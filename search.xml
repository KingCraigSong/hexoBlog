<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java多线程学习</title>
      <link href="/2020/01/31/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/01/31/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="详见"><a class="markdownIt-Anchor" href="#详见"></a> 详见</h2><p><a href="https://www.cnblogs.com/GarfieldEr007/p/5746362.html">https://www.cnblogs.com/GarfieldEr007/p/5746362.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 Spring IOC（DI-依赖注入）你需要知道的一切</title>
      <link href="/2020/01/31/SpringIOC%EF%BC%88DI-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%89%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E5%88%87/"/>
      <url>/2020/01/31/SpringIOC%EF%BC%88DI-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%89%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E5%88%87/</url>
      
        <content type="html"><![CDATA[<h2 id="详见"><a class="markdownIt-Anchor" href="#详见"></a> 详见</h2><p><a href="https://zhuanlan.zhihu.com/p/25459839?utm_source=com.evernote&amp;utm_medium=social">https://zhuanlan.zhihu.com/p/25459839?utm_source=com.evernote&amp;utm_medium=social</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> 问答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAS的底层实现</title>
      <link href="/2020/01/31/CAS%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/01/31/CAS%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="详见"><a class="markdownIt-Anchor" href="#详见"></a> 详见</h2><p><a href="https://zhuanlan.zhihu.com/p/44871583">https://zhuanlan.zhihu.com/p/44871583</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事件驱动过程分析</title>
      <link href="/2020/01/31/Spring%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/"/>
      <url>/2020/01/31/Spring%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="详见"><a class="markdownIt-Anchor" href="#详见"></a> 详见</h2><p><a href="https://zhuanlan.zhihu.com/p/27763120?utm_source=com.evernote&amp;utm_medium=social">https://zhuanlan.zhihu.com/p/27763120?utm_source=com.evernote&amp;utm_medium=social</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP是什么?你都拿它做什么?</title>
      <link href="/2020/01/31/SpringAOP%E6%98%AF%E4%BB%80%E4%B9%88-%E4%BD%A0%E9%83%BD%E6%8B%BF%E5%AE%83%E5%81%9A%E4%BB%80%E4%B9%88/"/>
      <url>/2020/01/31/SpringAOP%E6%98%AF%E4%BB%80%E4%B9%88-%E4%BD%A0%E9%83%BD%E6%8B%BF%E5%AE%83%E5%81%9A%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h2 id="详见"><a class="markdownIt-Anchor" href="#详见"></a> 详见</h2><p><a href="https://my.oschina.net/liughDevelop/blog/1457097#comment-list">https://my.oschina.net/liughDevelop/blog/1457097#comment-list</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> 问答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java开发者易犯错误Top10</title>
      <link href="/2020/01/31/Java%E5%BC%80%E5%8F%91%E8%80%85%E6%98%93%E7%8A%AF%E9%94%99%E8%AF%AFTop10/"/>
      <url>/2020/01/31/Java%E5%BC%80%E5%8F%91%E8%80%85%E6%98%93%E7%8A%AF%E9%94%99%E8%AF%AFTop10/</url>
      
        <content type="html"><![CDATA[<pre><code>本文总结了Java开发者经常会犯的前十种错误列表。</code></pre><h2 id="数组转换为数组列表"><a class="markdownIt-Anchor" href="#数组转换为数组列表"></a> 数组转换为数组列表</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(arr);</span><br></pre></td></tr></table></figure></div><p>Arrays.asList()将返回一个数组内部是私有静态类的ArrayList，这不是java.util.ArrayList类，java.util.Arrays.ArrayList类有set()、 get()、 contains()方法，但是没有任何加元素的方法，因此它的大小是固定的。你应该这么做来创建一个真正的数组：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(arr));</span><br></pre></td></tr></table></figure></div><p>ArrayList的构造函数能够接受一个集合类型，这也是java.util.Arrays.ArrayList的超级类型。</p><h2 id="检查一个数组包含一个值"><a class="markdownIt-Anchor" href="#检查一个数组包含一个值"></a> 检查一个数组包含一个值</h2><p>开发者经常这么做：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(arr));</span><br><span class="line"><span class="keyword">return</span> set.contains(targetValue);</span><br></pre></td></tr></table></figure></div><p>代码可以工作，但是没有必要首先转换列表到Set，转换一个列表到一个Set需要额外的时间。因此你可以把它简化为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.asList(arr).contains(targetValue);</span><br></pre></td></tr></table></figure></div><p>或</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(String s: arr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.equals(targetValue))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure></div><p>第一个比第二个更具可读性</p><h2 id="在一个循环中从一个列表里删除一个元素"><a class="markdownIt-Anchor" href="#在一个循环中从一个列表里删除一个元素"></a> 在一个循环中从一个列表里删除一个元素</h2><p>考虑下面删除元素的代码在迭代中的结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    list.remove(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure></div><p>输出是：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[b, d]</span><br></pre></td></tr></table></figure></div><p>该方法有一个严重的问题，当一个元素被删除时，列表收缩的大小以及指针改变了。所以想要在循环内利用指针删除多个元素是无法正常进行的。<br>这种情况下使用迭代器才是正确的方法，foreach循环在Java中的工作像是一个迭代器，但实际上并不是，考虑下面的代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">"a"</span>))</span><br><span class="line">        list.remove(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>它会报出ConcurrentModificationException异常。<br>相反下面这个就可以正常工作。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>));</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iter = list.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    String s = iter.next();</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">"a"</span>)) &#123;</span><br><span class="line">        iter.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>.next()必须在.remove()之前被调用。在foreach循环中，编译器将在删除元素操作之后调用.next()，这也是导致ConcurrentModificationException异常的原因，你可以点击此处查看ArrayList.iterator()的源代码。</p><h2 id="hashtable-vs-hashmap"><a class="markdownIt-Anchor" href="#hashtable-vs-hashmap"></a> Hashtable vs HashMap</h2><p>根据算法的常规，Hashtable是对数据结构的称呼。但是在Java中，数据结构的名称是HashMap。Hashtable和HashMap关键不同之一是Hashtable是同步的。<br>关于这一点可查看HashMap vs. TreeMap vs. Hashtable vs. LinkedHashMap</p><h2 id="使用集合的原始类型"><a class="markdownIt-Anchor" href="#使用集合的原始类型"></a> 使用集合的原始类型</h2><p>在Java中，原始类型和无限制的通配符类型很容易被混淆。以Set为例，Set是原始类型，而Set(?)则是无限制的通配符类型。<br>考虑下面的代码，以一个原始类型List作为参数：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(List list, Object o)</span></span>&#123;</span><br><span class="line">    list.add(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    add(list, <span class="number">10</span>);</span><br><span class="line">    String s = list.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>该代码会抛出一个异常：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">console</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">Exception in thread "main" java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</span><br><span class="line">at ...</span><br></pre></td></tr></table></figure></div><p>使用原始类型集合是危险的，因为原始类型集合跳过了泛型类型检查，也不安全。Set、Set&lt;?&gt;和Set<object>之间有很大的不同。<br>详细可查看Raw type vs. Unbounded wildcard和Type Erasure。</object></p><h2 id="访问级别"><a class="markdownIt-Anchor" href="#访问级别"></a> 访问级别</h2><p>开发者经常对类域使用public，这很容易通过直接引用获得域值，但这是一个非常糟糕的设计。根据经验来说是给予成员的访问级别越低越好。<br>详细情况可点击查看Java中成员访问级别：public、protected、private</p><h2 id="arraylist-vs-linkedlist"><a class="markdownIt-Anchor" href="#arraylist-vs-linkedlist"></a> ArrayList VS LinkedList</h2><p>如果你不知道ArrayList和LinkedList之间的区别时，你可能会经常的选用ArrayList，因为它看起来看熟悉。然而它们之间有巨大的性能不同。简单的来说，如果有大量的添加/删除操作，并且没有很多的随机存取操作时，LinkedList应该是你的首选。</p><h2 id="mutable-vs-immutable"><a class="markdownIt-Anchor" href="#mutable-vs-immutable"></a> Mutable VS Immutable</h2><p>Immutable对象有很多优势，比如简单、安全等等。但它要求每一个不同的值都需要有一个不同的对象，而太多的对象可能会导致垃圾收集的高成本。所以对Mutable和Immutable的选择应该有一个平衡点。<br>一般来说，Mutable对象用于避免产生过多的中间对象，经典的例子是连接大量的字符串数。如果你使用Immutable字符串，那么会产生很多符合垃圾收集条件的对象。这对CPU是浪费时间和精力的，当其可以使用Mutable对象作为正确的解决方案。（如StringBuilder）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String result=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(String s: arr)&#123;</span><br><span class="line">    result = result + s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这里还有一些其他Mutable对象可取的情况。例如mutable对象传递到方法中允许你在不跳过太多语法的情况下收集多个结果。另一个例子是排序和过滤，你可以构建一个带有原有集合的方法，并返回一个已排序的，不过这对大的集合来说会造成更大的浪费。</p><h2 id="super和sub构造函数"><a class="markdownIt-Anchor" href="#super和sub构造函数"></a> Super和Sub构造函数</h2><p>在Java中，如果一个类没有定义一个构造函数，编译器会默认的为类插入一个无参数构造函数。如果一个构造函数是在Super类中定义的，这种情况下Super(String s)，编译器不会插入默认的无参数构造函数。<br>另一方面，Sub类的构造函数，无论带不带有参数，都会调用无参数的Super构造函数。<br>编译器在Sub类中试图将Super()插入到两个构造函数中，但是Super默认的构造函数是没有定义的，编译器才会报错。如何解决这一问题？你只需在Super类中添加一个Super()构造函数，如下所示：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Super</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Super"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>或移除自定义的Super构造函数，又或者在Sub函数中添加super(value)。</p><h2 id="或构造函数"><a class="markdownIt-Anchor" href="#或构造函数"></a> &quot;&quot;或构造函数？</h2><p>字符串可以通过两种方式创建：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. use double quotes</span></span><br><span class="line">String x = <span class="string">"abc"</span>;</span><br><span class="line"><span class="comment">//2. use constructor</span></span><br><span class="line">String y = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure></div><p>它们之间有何不同？下面的例子可以给出答案：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String a = <span class="string">"abcd"</span>;</span><br><span class="line">String b = <span class="string">"abcd"</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">// True</span></span><br><span class="line">System.out.println(a.equals(b)); <span class="comment">// True</span></span><br><span class="line"></span><br><span class="line">String c = <span class="keyword">new</span> String(<span class="string">"abcd"</span>);</span><br><span class="line">String d = <span class="keyword">new</span> String(<span class="string">"abcd"</span>);</span><br><span class="line">System.out.println(c == d); <span class="comment">// False</span></span><br><span class="line">System.out.println(c.equals(d)); <span class="comment">// True</span></span><br></pre></td></tr></table></figure></div><p>关于它们如何在内存中分布的更多细节可以查看<a href="https://www.programcreek.com/2014/03/create-java-string-by-double-quotes-vs-by-constructor/">《使用&quot;&quot;或构造函数创建Java字符串》</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 编程随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Richardson Maturity Model</title>
      <link href="/2020/01/31/Richardson%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/01/31/Richardson%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<pre><code>A model (developed by Leonard Richardson) that breaks down the principal elements of a REST approach into three steps. These introduce resources, http verbs, and hypermedia controls.</code></pre><p>Recently I’ve been reading drafts of Rest In Practice: a book that a couple of my colleagues have been working on. Their aim is to explain how to use Restful web services to handle many of the integration problems that enterprises face. At the heart of the book is the notion that the web is an existence proof of a massively scalable distributed system that works really well, and we can take ideas from that to build integrated systems more easily.</p><p><a href="/img/blog/Richardson%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B/Figure1.png" data-fancybox="group" data-caption="Steps toward REST" class="fancybox"><img alt="Steps toward REST" title="Steps toward REST" data-src="/img/blog/Richardson%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B/Figure1.png" class="lazyload"></a><br>Figure 1.Steps toward REST</p><p>To help explain the specific properties of a web-style system, the authors use a model of restful maturity that was developed by Leonard Richardson and <a href="https://www.crummy.com/writing/speaking/2008-QCon/act3.html">explained</a> at a QCon talk. The model is nice way to think about using these techniques, so I thought I’d take a stab of my own explanation of it. (The protocol examples here are only illustrative, I didn’t feel it was worthwhile to code and test them up, so there may be problems in the detail.)</p><h2 id="level-0"><a class="markdownIt-Anchor" href="#level-0"></a> Level 0</h2><p>The starting point for the model is using HTTP as a transport system for remote interactions, but without using any of the mechanisms of the web. Essentially what you are doing here is using HTTP as a tunneling mechanism for your own remote interaction mechanism, usually based on <a href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/EncapsulatedSynchronousIntegration.html">Remote Procedure Invocation</a>.</p><p><a href="/img/blog/Richardson%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B/Figure2.png" data-fancybox="group" data-caption="An example interaction at Level 0" class="fancybox"><img alt="An example interaction at Level 0" title="An example interaction at Level 0" data-src="/img/blog/Richardson%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B/Figure2.png" class="lazyload"></a><br>Figure <a href="http://2.An">2.An</a> example interaction at Level 0</p><p>Let’s assume I want to book an appointment with my doctor. My appointment software first needs to know what open slots my doctor has on a given date, so it makes a request of the hospital appointment system to obtain that information. In a level 0 scenario, the hospital will expose a service endpoint at some URI. I then post to that endpoint a document containing the details of my request.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/appointmentService</span> HTTP/1.1</span><br><span class="line">[various other headers]</span><br><span class="line"></span><br><span class="line">&lt;openSlotRequest date = "2010-01-04" doctor = "mjones"/&gt;</span><br></pre></td></tr></table></figure></div><p>The server then will return a document giving me this information</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line">[various headers]</span><br><span class="line"></span><br><span class="line">&lt;openSlotList&gt;</span><br><span class="line">  &lt;slot start = "1400" end = "1450"&gt;</span><br><span class="line">    &lt;doctor id = "mjones"/&gt;</span><br><span class="line">  &lt;/slot&gt;</span><br><span class="line">  &lt;slot start = "1600" end = "1650"&gt;</span><br><span class="line">    &lt;doctor id = "mjones"/&gt;</span><br><span class="line">  &lt;/slot&gt;</span><br><span class="line">&lt;/openSlotList&gt;</span><br></pre></td></tr></table></figure></div><p>I’m using XML here for the example, but the content can actually be anything: JSON, YAML, key-value pairs, or any custom format.</p><p>My next step is to book an appointment, which I can again do by posting a document to the endpoint.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/appointmentService</span> HTTP/1.1</span><br><span class="line">[various other headers]</span><br><span class="line"></span><br><span class="line">&lt;appointmentRequest&gt;</span><br><span class="line">  &lt;slot doctor = "mjones" start = "1400" end = "1450"/&gt;</span><br><span class="line">  &lt;patient id = "jsmith"/&gt;</span><br><span class="line">&lt;/appointmentRequest&gt;</span><br></pre></td></tr></table></figure></div><p>If all is well I get a response saying my appointment is booked.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line">[various headers]</span><br><span class="line"></span><br><span class="line">&lt;appointment&gt;</span><br><span class="line">  &lt;slot doctor = "mjones" start = "1400" end = "1450"/&gt;</span><br><span class="line">  &lt;patient id = "jsmith"/&gt;</span><br><span class="line">&lt;/appointment&gt;</span><br></pre></td></tr></table></figure></div><p>If there is a problem, say someone else got in before me, then I’ll get some kind of error message in the reply body.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line">[various headers]</span><br><span class="line"></span><br><span class="line">&lt;appointmentRequestFailure&gt;</span><br><span class="line">  &lt;slot doctor = "mjones" start = "1400" end = "1450"/&gt;</span><br><span class="line">  &lt;patient id = "jsmith"/&gt;</span><br><span class="line">  &lt;reason&gt;Slot not available&lt;/reason&gt;</span><br><span class="line">&lt;/appointmentRequestFailure&gt;</span><br></pre></td></tr></table></figure></div><p>So far this is a straightforward RPC style system. It’s simple as it’s just slinging plain old XML (POX) back and forth. If you use SOAP or XML-RPC it’s basically the same mechanism, the only difference is that you wrap the XML messages in some kind of envelope.</p><h2 id="level-1-resources"><a class="markdownIt-Anchor" href="#level-1-resources"></a> Level 1 - Resources</h2><p>The first step towards the Glory of Rest in the <abbr title="Richardson Maturity Model">RMM</abbr> is to introduce resources. So now rather than making all our requests to a singular service endpoint, we now start talking to individual resources.</p><p><a href="/img/blog/Richardson%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B/Figure3.png" data-fancybox="group" data-caption="Level 1 adds resources" class="fancybox"><img alt="Level 1 adds resources" title="Level 1 adds resources" data-src="/img/blog/Richardson%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B/Figure3.png" class="lazyload"></a><br>Figure 3.Level 1 adds resources</p><p>So with our initial query, we might have a resource for given doctor.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/doctors/mjones</span> HTTP/1.1</span><br><span class="line">[various other headers]</span><br><span class="line"></span><br><span class="line">&lt;openSlotRequest date = "2010-01-04"/&gt;</span><br></pre></td></tr></table></figure></div><p>The reply carries the same basic information, but each slot is now a resource that can be addressed individually.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line">[various headers]</span><br><span class="line"></span><br><span class="line">&lt;openSlotList&gt;</span><br><span class="line">  &lt;slot id = "1234" doctor = "mjones" start = "1400" end = "1450"/&gt;</span><br><span class="line">  &lt;slot id = "5678" doctor = "mjones" start = "1600" end = "1650"/&gt;</span><br><span class="line">&lt;/openSlotList&gt;</span><br></pre></td></tr></table></figure></div><p>With specific resources booking an appointment means posting to a particular slot.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/slots/1234</span> HTTP/1.1</span><br><span class="line">[various other headers]</span><br><span class="line"></span><br><span class="line">&lt;appointmentRequest&gt;</span><br><span class="line">  &lt;patient id = "jsmith"/&gt;</span><br><span class="line">&lt;/appointmentRequest&gt;</span><br></pre></td></tr></table></figure></div><p>If all goes well I get a similar reply to before.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line">[various headers]</span><br><span class="line"></span><br><span class="line">&lt;appointment&gt;</span><br><span class="line">  &lt;slot id = "1234" doctor = "mjones" start = "1400" end = "1450"/&gt;</span><br><span class="line">  &lt;patient id = "jsmith"/&gt;</span><br><span class="line">&lt;/appointment&gt;</span><br></pre></td></tr></table></figure></div><p>The difference now is that if anyone needs to do anything about the appointment, like book some tests, they first get hold of the appointment resource, which might have a URI like <code>http://royalhope.nhs.uk/slots/1234/appointment</code>, and post to that resource.</p><p>To an object guy like me this is like the notion of object identity. Rather than calling some function in the ether and passing arguments, we call a method on one particular object providing arguments for the other information.</p><h2 id="level-2-http-verbs"><a class="markdownIt-Anchor" href="#level-2-http-verbs"></a> Level 2 - HTTP Verbs</h2><p>I’ve used HTTP POST verbs for all my interactions here in level 0 and 1, but some people use GETs instead or in addition. At these levels it doesn’t make much difference, they are both being used as tunneling mechanisms allowing you to tunnel your interactions through HTTP. Level 2 moves away from this, using the HTTP verbs as closely as possible to how they are used in HTTP itself.</p><p><a href="/img/blog/Richardson%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B/Figure4.png" data-fancybox="group" data-caption="Level 2 addes HTTP verbs" class="fancybox"><img alt="Level 2 addes HTTP verbs" title="Level 2 addes HTTP verbs" data-src="/img/blog/Richardson%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B/Figure4.png" class="lazyload"></a><br>Figure 4.Level 2 addes HTTP verbs</p><p>For our the list of slots, this means we want to use GET.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/doctors/mjones/slots?date=20100104&amp;status=open</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: royalhope.nhs.uk</span><br></pre></td></tr></table></figure></div><p>The reply is the same as it would have been with the POST</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line">[various headers]</span><br><span class="line"></span><br><span class="line">&lt;openSlotList&gt;</span><br><span class="line">  &lt;slot id = "1234" doctor = "mjones" start = "1400" end = "1450"/&gt;</span><br><span class="line">  &lt;slot id = "5678" doctor = "mjones" start = "1600" end = "1650"/&gt;</span><br><span class="line">&lt;/openSlotList&gt;</span><br></pre></td></tr></table></figure></div><p>At Level 2, the use of GET for a request like this is crucial. HTTP defines GET as a safe operation, that is it doesn’t make any significant changes to the state of anything. This allows us to invoke GETs safely any number of times in any order and get the same results each time. An important consequence of this is that it allows any participant in the routing of requests to use caching, which is a key element in making the web perform as well as it does. HTTP includes various measures to support caching, which can be used by all participants in the communication. By following the rules of HTTP we’re able to take advantage of that capability.</p><p>To book an appointment we need an HTTP verb that does change state, a POST or a PUT. I’ll use the same POST that I did earlier.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/slots/1234</span> HTTP/1.1</span><br><span class="line">[various other headers]</span><br><span class="line"></span><br><span class="line">&lt;appointmentRequest&gt;</span><br><span class="line">  &lt;patient id = "jsmith"/&gt;</span><br><span class="line">&lt;/appointmentRequest&gt;</span><br></pre></td></tr></table></figure></div><p>The trade-offs between using POST and PUT here are more than I want to go into here, maybe I’ll do a separate article on them some day. But I do want to point out that some people incorrectly make a correspondence between POST/PUT and create/update. The choice between them is rather different to that.</p><p>Even if I use the same post as level 1, there’s another significant difference in how the remote service responds. If all goes well, the service replies with a response code of 201 to indicate that there’s a new resource in the world.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">201</span> Created</span><br><span class="line"><span class="attribute">Location</span>: slots/1234/appointment</span><br><span class="line">[various headers]</span><br><span class="line"></span><br><span class="line">&lt;appointment&gt;</span><br><span class="line">  &lt;slot id = "1234" doctor = "mjones" start = "1400" end = "1450"/&gt;</span><br><span class="line">  &lt;patient id = "jsmith"/&gt;</span><br><span class="line">&lt;/appointment&gt;</span><br></pre></td></tr></table></figure></div><p>The 201 response includes a location attribute with a URI that the client can use to GET the current state of that resource in the future. The response here also includes a representation of that resource to save the client an extra call right now.</p><p>There is another difference if something goes wrong, such as someone else booking the session.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">409</span> Conflict</span><br><span class="line">[various headers]</span><br><span class="line"></span><br><span class="line">&lt;openSlotList&gt;</span><br><span class="line">  &lt;slot id = "5678" doctor = "mjones" start = "1600" end = "1650"/&gt;</span><br><span class="line">&lt;/openSlotList&gt;</span><br></pre></td></tr></table></figure></div><p>The important part of this response is the use of an HTTP response code to indicate something has gone wrong. In this case a 409 seems a good choice to indicate that someone else has already updated the resource in an incompatible way. Rather than using a return code of 200 but including an error response, at level 2 we explicitly use some kind of error response like this. It’s up to the protocol designer to decide what codes to use, but there should be a non-2xx response if an error crops up. Level 2 introduces using HTTP verbs and HTTP response codes.</p><p>There is an inconsistency creeping in here. REST advocates talk about using all the HTTP verbs. They also justify their approach by saying that REST is attempting to learn from the practical success of the web. But the world-wide web doesn’t use PUT or DELETE much in practice. There are sensible reasons for using PUT and DELETE more, but the existence proof of the web isn’t one of them.</p><p>The key elements that are supported by the existence of the web are the strong separation between safe (eg GET) and non-safe operations, together with using status codes to help communicate the kinds of errors you run into.</p><h2 id="level-3-hypermedia-controls"><a class="markdownIt-Anchor" href="#level-3-hypermedia-controls"></a> Level 3 - Hypermedia Controls</h2><p>The final level introduces something that you often hear referred to under the ugly acronym of HATEOAS (Hypertext As The Engine Of Application State). It addresses the question of how to get from a list open slots to knowing what to do to book an appointment.</p><p><a href="/img/blog/Richardson%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B/Figure5.png" data-fancybox="group" data-caption="Level 3 adds hypermedia controls" class="fancybox"><img alt="Level 3 adds hypermedia controls" title="Level 3 adds hypermedia controls" data-src="/img/blog/Richardson%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B/Figure5.png" class="lazyload"></a><br>Figure 5.Level 3 adds hypermedia controls</p><p>We begin with the same initial GET that we sent in level 2</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">http</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/doctors/mjones/slots?date=20100104&amp;status=open</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: royalhope.nhs.uk</span><br></pre></td></tr></table></figure></div><p>But the response has a new element</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line">[various headers]</span><br><span class="line"></span><br><span class="line">&lt;openSlotList&gt;</span><br><span class="line">  &lt;slot id = "1234" doctor = "mjones" start = "1400" end = "1450"&gt;</span><br><span class="line">     &lt;link rel = "/linkrels/slot/book" </span><br><span class="line">           uri = "/slots/1234"/&gt;</span><br><span class="line">  &lt;/slot&gt;</span><br><span class="line">  &lt;slot id = "5678" doctor = "mjones" start = "1600" end = "1650"&gt;</span><br><span class="line">     &lt;link rel = "/linkrels/slot/book" </span><br><span class="line">           uri = "/slots/5678"/&gt;</span><br><span class="line">  &lt;/slot&gt;</span><br><span class="line">&lt;/openSlotList&gt;</span><br></pre></td></tr></table></figure></div><p>Each slot now has a link element which contains a URI to tell us how to book an appointment.</p><p>The point of hypermedia controls is that they tell us what we can do next, and the URI of the resource we need to manipulate to do it. Rather than us having to know where to post our appointment request, the hypermedia controls in the response tell us how to do it.</p><p>The POST would again copy that of level 2</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/slots/1234</span> HTTP/1.1</span><br><span class="line">[various other headers]</span><br><span class="line"></span><br><span class="line">&lt;appointmentRequest&gt;</span><br><span class="line">  &lt;patient id = "jsmith"/&gt;</span><br><span class="line">&lt;/appointmentRequest&gt;</span><br></pre></td></tr></table></figure></div><p>And the reply contains a number of hypermedia controls for different things to do next.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">201</span> Created</span><br><span class="line"><span class="attribute">Location</span>: http://royalhope.nhs.uk/slots/1234/appointment</span><br><span class="line">[various headers]</span><br><span class="line"></span><br><span class="line">&lt;appointment&gt;</span><br><span class="line">  &lt;slot id = "1234" doctor = "mjones" start = "1400" end = "1450"/&gt;</span><br><span class="line">  &lt;patient id = "jsmith"/&gt;</span><br><span class="line">  &lt;link rel = "/linkrels/appointment/cancel"</span><br><span class="line">        uri = "/slots/1234/appointment"/&gt;</span><br><span class="line">  &lt;link rel = "/linkrels/appointment/addTest"</span><br><span class="line">        uri = "/slots/1234/appointment/tests"/&gt;</span><br><span class="line">  &lt;link rel = "self"</span><br><span class="line">        uri = "/slots/1234/appointment"/&gt;</span><br><span class="line">  &lt;link rel = "/linkrels/appointment/changeTime"</span><br><span class="line">        uri = "/doctors/mjones/slots?date=20100104&amp;status=open"/&gt;</span><br><span class="line">  &lt;link rel = "/linkrels/appointment/updateContactInfo"</span><br><span class="line">        uri = "/patients/jsmith/contactInfo"/&gt;</span><br><span class="line">  &lt;link rel = "/linkrels/help"</span><br><span class="line">        uri = "/help/appointment"/&gt;</span><br><span class="line">&lt;/appointment&gt;</span><br></pre></td></tr></table></figure></div><p>One obvious benefit of hypermedia controls is that it allows the server to change its URI scheme without breaking clients. As long as clients look up the “addTest” link URI then the server team can juggle all URIs other than the initial entry points.</p><p>A further benefit is that it helps client developers explore the protocol. The links give client developers a hint as to what may be possible next. It doesn’t give all the information: both the “self” and “cancel” controls point to the same URI - they need to figure out that one is a GET and the other a DELETE. But at least it gives them a starting point as to what to think about for more information and to look for a similar URI in the protocol documentation.</p><p>Similarly it allows the server team to advertise new capabilities by putting new links in the responses. If the client developers are keeping an eye out for unknown links these links can be a trigger for further exploration.</p><p>There’s no absolute standard as to how to represent hypermedia controls. What I’ve done here is to use the current recommendations of the REST in Practice team, which is to follow ATOM (RFC 4287) I use a <code>&lt;link&gt;</code> element with a uri attribute for the target URI and a rel attribute for to describe the kind of relationship. A well known relationship (such as self for a reference to the element itself) is bare, any specific to that server is a fully qualified URI. ATOM states that the definition for well-known linkrels is the <a href="https://www.iana.org/assignments/link-relations/link-relations.xhtml">Registry of Link Relations</a> . As I write these are confined to what’s done by ATOM, which is generally seen as a leader in level 3 restfulness.</p><h2 id="the-meaning-of-the-levels"><a class="markdownIt-Anchor" href="#the-meaning-of-the-levels"></a> The Meaning of the Levels</h2><p>I should stress that the <abbr title="Richardson Maturity Model">RMM</abbr>, while a good way to think about what the elements of REST, is not a definition of levels of REST itself. Roy Fielding has made it clear that <a href="https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven">level 3 <abbr title="Richardson Maturity Model">RMM</abbr> is a pre-condition of REST</a>. Like many terms in software, REST gets lots of definitions, but since Roy Fielding coined the term, his definition should carry more weight than most.</p><p>What I find useful about this <abbr title="Richardson Maturity Model">RMM</abbr> is that it provides a good step by step way to understand the basic ideas behind restful thinking. As such I see it as tool to help us learn about the concepts and not something that should be used in some kind of assessment mechanism. I don’t think we have enough examples yet to be really sure that the restful approach is the right way to integrate systems, I do think it’s a very attractive approach and the one that I would recommend in most situations.</p><p>Talking about this with Ian Robinson, he stressed that something he found attractive about this model when Leonard Richardson first presented it was its relationship to common design techniques.</p><ul><li>Level 1 tackles the question of handling complexity by using divide and conquer, breaking a large service endpoint down into multiple resources.</li><li>Level 2 introduces a standard set of verbs so that we handle similar situations in the same way, removing unnecessary variation.</li><li>Level 3 introduces discoverability, providing a way of making a protocol more self-documenting.</li></ul><p>The result is a model that helps us think about the kind of HTTP service we want to provide and frame the expectations of people looking to interact with it.</p><hr><p>原文作者：Martin Fowler<br><a href="https://martinfowler.com/articles/richardsonMaturityModel.html">链接</a></p><p><a href="https://www.jianshu.com/p/2eac3dc053c1">中文译文</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 架构理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> rest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>出游计划</title>
      <link href="/2020/01/31/%E5%87%BA%E6%B8%B8%E8%AE%A1%E5%88%92/"/>
      <url>/2020/01/31/%E5%87%BA%E6%B8%B8%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="去过的地方"><a class="markdownIt-Anchor" href="#去过的地方"></a> 去过的地方</h2><ul><li>山东<ul><li>五四广场</li><li>青岛金沙滩</li><li>八大关</li><li>栈桥</li><li>夜登泰山</li></ul></li><li>山西<ul><li>晋阳湖</li><li>汾河二库</li></ul></li><li>北京<ul><li>古北水镇</li><li>司马台长城</li><li>八达岭长城</li><li>南锣鼓巷</li><li>后海</li><li>圆明园</li><li>王府井步行街</li><li>欢乐谷</li><li>天安门广场</li><li>故宫博物院</li><li>北京动物园</li></ul></li><li>天津<ul><li>十八街</li><li>欢乐谷</li></ul></li><li>河北<ul><li>白洋淀</li><li>雄安新区</li></ul></li><li>湖北<ul><li>十堰</li></ul></li><li>河南<ul><li>洛阳十字街</li></ul></li><li>贵州<ul><li>毕节百里杜鹃</li><li>织金洞</li><li>黔灵山</li><li>青岩古镇</li><li>花溪十里河滩湿地公园</li></ul></li></ul><h2 id="想去的地方"><a class="markdownIt-Anchor" href="#想去的地方"></a> 想去的地方</h2><ul><li>北京<ul><li>十渡</li></ul></li><li>陕西<ul><li>夜登华山 <a href="/2020/01/29/%E5%8D%8E%E5%B1%B1%E6%94%BB%E7%95%A5/" title="华山攻略">华山攻略</a></li></ul></li><li>山西<ul><li>五台山</li><li>平遥古城</li><li>云冈石窟</li><li>晋祠</li><li>洪洞大槐树</li><li>壶口瀑布</li><li>雁门关</li><li>悬空寺</li><li>绵山</li><li>皇城相府</li></ul></li><li>河北<ul><li>秦皇岛北戴河</li><li>承德避暑山庄</li><li>野三坡</li><li>古莲花池</li><li>直隶总督府</li><li>广府古城</li><li>清东陵</li><li>抱犊寨</li><li>北海公园</li></ul></li><li>天津<ul><li>天津之眼</li></ul></li><li>湖北<ul><li>珞珈山</li><li>华科</li><li>黄鹤楼</li></ul></li><li>上海<ul><li>豫园</li></ul></li><li>黑龙江<ul><li>哈工大</li><li>中央大街</li><li>漠河</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文档记录 </category>
          
          <category> 待办列表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题目收集002</title>
      <link href="/2020/01/30/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%94%B6%E9%9B%86002/"/>
      <url>/2020/01/30/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%94%B6%E9%9B%86002/</url>
      
        <content type="html"><![CDATA[<h2 id="性能优化面试专栏"><a class="markdownIt-Anchor" href="#性能优化面试专栏"></a> 性能优化面试专栏</h2><h3 id="tomcat性能优化整理"><a class="markdownIt-Anchor" href="#tomcat性能优化整理"></a> tomcat性能优化整理</h3><ol><li>你怎样给tomcat调优？</li><li>如何加大comcat连接数？</li><li>怎样加大tomcat的内存？</li><li>tomcat中如何禁止列目录下的文件？</li><li>Tomcat有几种部署方式？</li><li>Tomcat的优化经验</li></ol><h3 id="jvm性能优化整理"><a class="markdownIt-Anchor" href="#jvm性能优化整理"></a> JVM性能优化整理</h3><ol><li>Java类加载过程</li><li>java内存分配</li><li>描述一下JVM加载Class文件的原理机制？</li><li>GC 是什么? 为什么要有 GC?</li><li>简述 Java 垃圾回收机制。</li><li>如何判断一个对象是否存活?(或者 GC 对象的判定方法)</li><li>垃圾回收的优点和原理。并考虑 2 种回收机制。</li><li>垃圾回收器的基本原理是什么?垃圾回收器可以马上回收内存吗?有什么办法主动通知虚拟机进行垃圾回收?</li><li>Java 中会存在内存泄漏吗，请简单描述。</li><li>深拷贝和浅拷贝。</li><li>System.gc() 和 Runtime.gc() 会做什么事情?</li><li>finalize() 方法什么时候被调用?析构函数 (finalization) 的 目的是什么?</li><li>如果对象的引用被置为 null，垃圾收集器是否会立即释放对象占 用的内存?</li><li>什么是分布式垃圾回收(DGC)?它是如何工作的?</li><li>串行(serial)收集器和吞吐量(throughput)收集器的区别 是什么?</li><li>在 Java 中，对象什么时候可以被垃圾回收?</li><li>简述 Java 内存分配与回收策率以及 Minor GC 和 Major GC。</li><li>JVM 的永久代中会发生垃圾回收么?</li><li>Java 中垃圾收集的方法有哪些?</li><li>什么是类加载器，类加载器有哪些?</li><li>类加载器双亲委派模型机制?</li></ol><h3 id="mysql性能优化整理"><a class="markdownIt-Anchor" href="#mysql性能优化整理"></a> Mysql性能优化整理</h3><h2 id="微服务架构面试专栏"><a class="markdownIt-Anchor" href="#微服务架构面试专栏"></a> 微服务架构面试专栏</h2><h3 id="springcloud面试整理"><a class="markdownIt-Anchor" href="#springcloud面试整理"></a> SpringCloud面试整理</h3><ol><li>什么是 Spring Cloud?</li><li>使用 Spring Cloud 有什么优势?</li><li>服务注册和发现是什么意思?Spring Cloud 如何实现?</li><li>负载平衡的意义什么?</li><li>什么是 Hystrix?它如何实现容错?</li><li>什么是 Hystrix 断路器?我们需要它吗?</li><li>什么是 Netflix Feign?它的优点是什么?</li><li>什么是 Spring Cloud Bus?我们需要它吗?</li></ol><h3 id="springboot面试整理"><a class="markdownIt-Anchor" href="#springboot面试整理"></a> SpringBoot面试整理</h3><ol><li>什么是 Spring Boot?</li><li>Spring Boot 有哪些优点?</li><li>什么是 JavaConfig?</li><li>如何重新加载 Spring Boot 上的更改，而无需重新启动服务器?</li><li>Spring Boot 中的监视器是什么?</li><li>如何在 Spring Boot 中禁用 Actuator 端点安全性?</li><li>如何在自定义端口上运行 Spring Boot 应用程序?</li><li>什么是 YAML?</li><li>如何实现 Spring Boot 应用程序的安全性?</li><li>如何集成 Spring Boot 和 ActiveMQ?</li><li>如何使用 Spring Boot 实现分页和排序?</li><li>什么是 Swagger?你用 Spring Boot 实现了它吗?</li><li>什么是 Spring Profiles?</li><li>什么是 Spring Batch?</li><li>什么是 FreeMarker 模板？</li><li>如何使用 Spring Boot 实现异常处理?</li><li>您使用了哪些 starter maven 依赖项?</li><li>什么是 CSRF 攻击?</li><li>什么是 WebSockets?</li><li>什么是 AOP?</li><li>什么是 Apache Kafka?</li><li>我们如何监视所有 Spring Boot 微服务?</li></ol><h3 id="dubbo面试整理"><a class="markdownIt-Anchor" href="#dubbo面试整理"></a> Dubbo面试整理</h3><ol><li>Dubbo 中 zookeeper 做注册中心，如果注册中心集群都挂掉，发布者和订阅者之间还能通信么?</li><li>Dubbo 服务负载均衡策略?</li><li>Dubbo 在安全机制方面是如何解决的</li><li>Dubbo 连接注册中心和直连的区别</li></ol><h2 id="并发编程高级面试专栏"><a class="markdownIt-Anchor" href="#并发编程高级面试专栏"></a> 并发编程高级面试专栏</h2><ol><li>Synchronized用过吗，其原理是什么？</li><li>你刚才提到获取对象的锁，这个 “锁 ”到底是什么？如何确定对象的锁？</li><li>什么是可重入性，为什么说 Synchronized 是可重入锁?</li><li>JVM 对 Java 的原生锁做了哪些优化?</li><li>为什么说 Synchronized 是非公平锁?</li><li>什么是锁消除和锁粗化?</li><li>为什么说 Synchronized 是一个悲观锁?乐观锁的实现原理 又是什么?什么是 CAS，它有什么特性?</li><li>乐观锁一定就是好的吗?</li><li>跟 Synchronized 相比，可重入锁 ReentrantLock 其实现 原理有什么不同?</li><li>那么请谈谈 AQS 框架是怎么回事儿?</li><li>请尽可能详尽地对比下 Synchronized 和 ReentrantLock 的异同。</li><li>ReentrantLock 是如何实现可重入性的?</li><li>除了 ReetrantLock，你还接触过 JUC 中的哪些并发工具?</li><li>请谈谈 ReadWriteLock 和 StampedLock。</li><li>如何让 Java 的线程彼此同步?你了解过哪些同步器?请分别介绍下。</li><li>CyclicBarrier 和 CountDownLatch 看起来很相似，请对比下呢?</li><li>Java 中的线程池是如何实现的?</li><li>创建线程池的几个核心构造参数?</li><li>线程池中的线程是怎么创建的?是一开始就随着线程池的启动 创建好的吗?</li><li>既然提到可以通过配置不同参数创建出不同的线程池，那么 Java 中默认实现好的线程池又有哪些呢?请比较它们的异同。</li><li>如何在 Java 线程池中提交线程?</li><li>什么是 Java 的内存模型，Java 中各个线程是怎么彼此看到 对方的变量的?</li><li>请谈谈 volatile 有什么特点，为什么它能保证变量对所有线 程的可见性?</li><li>既然 volatile 能够保证线程间的变量可见性，是不是就意味 着基于 volatile 变量的运算就是并发安全的?</li><li>请对比下 volatile 对比 Synchronized 的异同。</li><li>请谈谈 ThreadLocal 是怎么解决并发安全的?</li><li>很多人都说要慎用 ThreadLocal，谈谈你的理解，使用 ThreadLocal 需要注意些什么?</li></ol><h2 id="开源框架面试题专栏"><a class="markdownIt-Anchor" href="#开源框架面试题专栏"></a> 开源框架面试题专栏</h2><h3 id="spring面试整理"><a class="markdownIt-Anchor" href="#spring面试整理"></a> Spring面试整理</h3><ol><li>什么是 Spring 框架?Spring 框架有哪些主要模块?</li><li>使用 Spring 框架能带来哪些好处?</li><li>什么是控制反转(IOC)?什么是依赖注入?</li><li>请解释下 Spring 框架中的 IoC?</li><li>BeanFactory 和 ApplicationContext 有什么区别?</li><li>Spring 有几种配置方式?</li><li>如何用基于 XML 配置的方式配置 Spring?</li><li>如何用基于 Java 配置的方式配置 Spring?</li><li>怎样用注解的方式配置 Spring?</li><li>请解释 Spring Bean 的生命周期?</li><li>Spring Bean 的作用域之间有什么区别?</li><li>什么是 Spring inner beans?</li><li>Spring 框架中的单例 Beans 是线程安全的么?</li><li>请举例说明如何在 Spring 中注入一个 Java Collection?</li><li>如何向 Spring Bean 中注入一个 Java.util.Properties?</li><li>请解释 Spring Bean 的自动装配?</li><li>请解释自动装配模式的区别?</li><li>如何开启基于注解的自动装配?</li><li>请举例解释@Required 注解?</li><li>请举例解释@Autowired 注解?</li><li>请举例说明@Qualifier 注解?</li><li>构造方法注入和设值注入有什么区别? 请注意以下明显的区别:</li><li>Spring 框架中有哪些不同类型的事件?</li><li>FileSystemResource 和 ClassPathResource 有何区别?</li><li>Spring 框架中都用到了哪些设计模式?</li><li>开发中主要使用 Spring 的什么技术 ?</li><li>简述 AOP 和 IOC 概念 AOP:</li><li>在 Spring 中如何配置 Bean ?</li><li>IOC 容器对 Bean 的生命周期:</li></ol><h3 id="springmvc面试整理"><a class="markdownIt-Anchor" href="#springmvc面试整理"></a> SpringMVC面试整理</h3><ol><li>什么是 SpringMvc?</li><li>Spring MVC 的优点:</li><li>SpringMVC 工作原理?</li><li>SpringMVC 流程?</li><li>SpringMvc 的控制器是不是单例模式,如果是,有什么问题,怎么解决?</li><li>如果你也用过 struts2.简单介绍下 springMVC 和 struts2 的区别有哪些?</li><li>SpingMvc 中的控制器的注解一般用那个,有没有别的注解可以替代?</li><li>@RequestMapping 注解用在类上面有什么作用?</li><li>怎么样把某个请求映射到特定的方法上面?</li><li>如果在拦截请求中,我想拦截 get 方式提交的方法,怎么配置?</li><li>怎么样在方法里面得到 Request,或者 Session?</li><li>我想在拦截的方法里面得到从前台传入的参数,怎么得到?</li><li>如果前台有很多个参数传入,并且这些参数都是一个对象的,那么怎么样快速得到这个对象?</li><li>SpringMvc 中函数的返回值是什么?</li><li>SpringMVC 怎么样设定重定向和转发的?</li><li>SpringMvc 用什么对象从后台向前台传递数据的?</li><li>SpringMvc 中有个类把视图和数据都合并的一起的,叫什么?</li><li>怎么样把 ModelMap 里面的数据放入 Session 里面?</li><li>SpringMvc 怎么和 AJAX 相互调用的?</li><li>当一个方法向 AJAX 返回特殊对象,譬如 Object,List 等,需要做什么处理?</li><li>SpringMvc 里面拦截器是怎么写的</li><li>讲下 SpringMvc 的执行流程</li></ol><h3 id="mybatis面试整理"><a class="markdownIt-Anchor" href="#mybatis面试整理"></a> MyBatis面试整理</h3><ol><li>什么是 MyBatis?</li><li>讲下 MyBatis 的缓存</li><li>Mybatis 是如何进行分页的?分页插件的原理是什么?</li><li>简述 Mybatis 的插件运行原理，以及如何编写一个插件?</li><li>Mybatis 动态 sql 是做什么的?都有哪些动态 sql?能简述一下动态 sql 的执行原理吗?</li><li>#{}和${}的区别是什么?</li><li>为什么说 Mybatis 是半自动 ORM 映射工具?它与全自动的区别在哪里?</li><li>Mybatis 是否支持延迟加载?如果支持，它的实现原理是什么?</li><li>MyBatis 与 Hibernate 有哪些不同?</li><li>MyBatis 的好处是什么?</li><li>简述 Mybatis 的 Xml 映射文件和 Mybatis 内部数据结构之间的映射关系?</li><li>什么是 MyBatis 的接口绑定,有什么好处?</li><li>接口绑定有几种实现方式,分别是怎么实现的?</li><li>什么情况下用注解绑定,什么情况下用 xml 绑定?</li><li>MyBatis 实现一对一有几种方式?具体怎么操作的?</li><li>Mybatis 能执行一对一、一对多的关联查询吗?都有哪些实现方式，以及它们之间的区别?</li><li>MyBatis 里面的动态 Sql 是怎么设定的?用什么语法?</li><li>Mybatis 是如何将 sql 执行结果封装为目标对象并返回的?都有哪些映射形式?</li><li>Xml 映射文件中，除了常见的 select|insert|updae|delete 标签之外，还有哪些标签?</li><li>当实体类中的属性名和表中的字段名不一样，如果将查询的结果封装到指定 pojo?</li><li>模糊查询 like 语句该怎么写</li><li>通常一个 Xml 映射文件，都会写一个 Dao 接口与之对应, Dao 的工作原理，是否可以重载?</li><li>Mybatis 映射文件中，如果 A 标签通过 include 引用了 B 标签的内容，请问，B 标签能 否定义在 A 标签的后面，还是说必须定义在 A 标签的前面?</li><li>Mybatis 的 Xml 映射文件中，不同的 Xml 映射文件，id 是否可以重复?</li><li>Mybatis 中如何执行批处理?</li><li>Mybatis 都有哪些 Executor 执行器?它们之间的区别是什么?</li><li>Mybatis 中如何指定使用哪一种 Executor 执行器?</li><li>Mybatis 执行批量插入，能返回数据库主键列表吗?</li><li>Mybatis 是否可以映射 Enum 枚举类?</li><li>如何获取自动生成的(主)键值?</li><li>在 mapper 中如何传递多个参数?</li><li>resultType resultMap 的区别?</li><li>使用 MyBatis 的 mapper 接口调用时有哪些要求?</li><li>Mybatis 比 IBatis 比较大的几个改进是什么?</li><li>IBatis 和 MyBatis 在核心处理类分别叫什么?</li><li>IBatis 和 MyBatis 在细节上的不同有哪些?</li></ol><h2 id="分布式面试专栏"><a class="markdownIt-Anchor" href="#分布式面试专栏"></a> 分布式面试专栏</h2><h3 id="zookeeper专题"><a class="markdownIt-Anchor" href="#zookeeper专题"></a> ZooKeeper专题</h3><ol><li>ZooKeeper 是什么?</li><li>ZooKeeper 提供了什么?</li><li>Zookeeper 文件系统</li><li>四种类型的 znode</li><li>Zookeeper 通知机制</li><li>Zookeeper 做了什么?</li><li>Zookeeper 的命名服务(文件系统)</li><li>Zookeeper 的配置管理(文件系统、通知机制)</li><li>Zookeeper 集群管理(文件系统、通知机制)</li><li>Zookeeper 分布式锁(文件系统、通知 机制)</li><li>获取分布式锁的流程</li><li>Zookeeper 队列管理(文件系统、通知机制)</li><li>Zookeeper 数据复制</li><li>Zookeeper 工作原理</li><li>zookeeper 是如何保证事务的顺序一致性的?</li><li>Zookeeper 下 Server 工作状态</li><li>zookeeper 是如何选取主 leader 的?</li><li>Zookeeper 同步流程</li><li>分布式通知和协调</li><li>机器中为什么会有 leader?</li><li>Zookeeper 节点宕机如何处理?</li><li>zookeeper 负载均衡和 nginx 负载均衡区别</li><li>zookeeper watch 机制</li></ol><h3 id="nginx面试专题"><a class="markdownIt-Anchor" href="#nginx面试专题"></a> Nginx面试专题</h3><ol><li>请解释一下什么是 Nginx?</li><li>请列举 Nginx 的一些特性。</li><li>请解释 Nginx 如何处理 HTTP 请求</li><li>在 Nginx 中，如何使用未定义的服务器名称来阻止处理请求?</li><li>使用“反向代理服务器”的优点是什么?</li><li>请列举 Nginx 服务器的最佳用途。</li><li>请解释 Nginx 服务器上的 Master 和 Worker 进程分别是什么?</li><li>请解释你如何通过不同于 80 的端口开启 Nginx?</li><li>请解释是否有可能将 Nginx 的错误替换为 502 错误、503?</li><li>在 Nginx 中，解释如何在 URL 中保留双斜线?</li><li>请解释 ngx_http_upstream_module 的作用是什么?</li><li>请解释什么是 C10K 问题?</li><li>请陈述 stub_status 和 sub_filter 指令的作用是什么?</li><li>解释 Nginx 是否支持将请求压缩到上游?</li><li>解释如何在 Nginx 中获得当前的时间?</li></ol><h2 id="分布式通讯面试整理"><a class="markdownIt-Anchor" href="#分布式通讯面试整理"></a> 分布式通讯面试整理</h2><h3 id="rabbitmq消息中间件面试专题"><a class="markdownIt-Anchor" href="#rabbitmq消息中间件面试专题"></a> RabbitMQ消息中间件面试专题</h3><ol><li>RabbitMQ 中的 broker 是指什么?cluster 又是指什么?</li><li>什么是元数据?元数据分为哪些类型?包括哪些内容?与 cluster 相关的元数据 有哪些?元数据是如何保存的?元数据在 cluster 中是如何分布的?</li><li>RAM node 和 disk node 的区别?</li><li>RabbitMQ 上的一个 queue 中存放的 message 是否有数量限制?</li><li>vhost 是什么?起什么作用?</li><li>在单 node 系统和多 node 构成的 cluster 系统中声明 queue、exchange ，以及进行 binding 会有什么不同?</li><li>客户端连接到 cluster 中的任意 node 上是否都能正常工作?</li><li>若 cluster 中拥有某个 queue 的 owner node 失效了，且该 queue 被声明具有 durable 属性，是否能够成功从其他 node 上重新声明该 queue ?</li><li>cluster 中 node 的失效会对 consumer 产生什么影响?若是在 cluster 中创建了 mirrored queue ，这时 node 失效会对 consumer 产生什么影响?</li><li>能够在地理上分开的不同数据中心使用 RabbitMQ cluster 么?</li><li>为什么 heavy RPC 的使用场景下不建议采用 disk node</li><li>向不存在的 exchange 发 publish 消息会发生什么?向不存在的 queue 执行consume 动作会发生什么?</li><li>routing_key 和 binding_key 的最大长度是多少?</li><li>RabbitMQ 允许发送的 message 最大可达多大?</li><li>什么情况下 producer 不主动创建 queue 是安全的?</li><li>“dead letter”queue 的用途?</li><li>什么说保证 message 被可靠持久化的条件是 queue 和 exchange 具有 durable 属性，同时 message 具有 persistent 属性才行?</li><li>什么情况下会出现 blackholed 问题?</li><li>如何防止出现 blackholed 问题?</li><li>Consumer Cancellation Notification 机制用于什么场景?</li><li>Basic.Reject 的用法是什么?</li><li>为什么不应该对所有的 message 都使用持久化机制?</li></ol><h3 id="kafka面试专题"><a class="markdownIt-Anchor" href="#kafka面试专题"></a> Kafka面试专题</h3><ol><li>Kafka 的设计时什么样的呢?</li><li>数据传输的事物定义有哪三种?</li><li>Kafka 判断一个节点是否还活着有那两个条件?</li><li>producer 是否直接将数据发送到 broker 的 leader(主节点)?</li><li>Kafa consumer 是否可以消费指定分区消息?</li><li>Kafka 消息是采用 Pull 模式，还是 Push 模式?</li><li>Kafka 存储在硬盘上的消息格式是什么?</li><li>Kafka 高效文件存储设计特点:</li><li>Kafka 与传统消息系统之间有三个关键区别</li><li>Kafka 创建 Topic 时如何将分区放置到不同的 Broker 中</li><li>Kafka 新建的分区会在哪个目录下创建</li><li>partition 的数据如何保存到硬盘</li><li>kafka 的 ack 机制</li><li>Kafka 的消费者如何消费数据</li><li>消费者负载均衡策略</li><li>数据有序</li><li>kafaka 生产数据时数据的分组策略</li></ol><h3 id="activemq消息中间件面试专题"><a class="markdownIt-Anchor" href="#activemq消息中间件面试专题"></a> ActiveMQ消息中间件面试专题</h3><ol><li>什么是 ActiveMQ?</li><li>ActiveMQ 服务器宕机怎么办?</li><li>丢消息怎么办?</li><li>持久化消息非常慢。</li><li>消息的不均匀消费。</li><li>死信队列。</li><li>ActiveMQ 中的消息重发时间间隔和重发次数吗?</li></ol><h2 id="分布式数据库面试整理"><a class="markdownIt-Anchor" href="#分布式数据库面试整理"></a> 分布式数据库面试整理</h2><h3 id="redis面试专题"><a class="markdownIt-Anchor" href="#redis面试专题"></a> redis面试专题</h3><ol><li>redis 和 memcached 什么区别?为什么高并发下有时单线程的 redis 比多线程的 memcached 效率要高?</li><li>redis 主从复制如何实现的?redis 的集群模式如何实现?redis 的 key 是如何寻址的?</li><li>使用 redis 如何设计分布式锁?说一下实现思路?使用 zk 可以吗?如何实现?这两种有什么区别?</li><li>知道 redis 的持久化吗?底层如何实现的?有什么优点缺点?</li><li>redis 过期策略都有哪些?LRU 算法知道吗?写一下 java 代码实现?</li><li>缓存穿透、缓存击穿、缓存雪崩解决方案?</li><li>在选择缓存时，什么时候选择 redis，什么时候选择 memcached</li><li>缓存与数据库不一致怎么办</li><li>主从数据库不一致如何解决</li><li>Redis 常见的性能问题和解决方案</li><li>Redis 的数据淘汰策略有哪些</li><li>Redis 当中有哪些数据结构</li><li>假如 Redis 里面有 1 亿个 key，其中有 10w 个 key 是以某个固定的已知的前缀开头的，如果将它们全部找出来?</li><li>使用 Redis 做过异步队列吗，是如何实现的</li><li>Redis 如何实现延时队列</li><li>什么是 Redis?简述它的优缺点?</li><li>Redis 相比 memcached 有哪些优势?</li><li>Redis 支持哪几种数据类型?</li><li>Redis 主要消耗什么物理资源?</li><li>Redis 的全称是什么?</li><li>Redis 有哪几种数据淘汰策略?</li><li>Redis 官方为什么不提供 Windows 版本?</li><li>一个字符串类型的值能存储最大容量是多少?</li><li>为什么 Redis 需要把所有数据放到内存中?</li><li>Redis 集群方案应该怎么做?都有哪些方案?</li><li>Redis 集群方案什么情况下会导致整个集群不可用?</li><li>MySQL 里有 2000w 数据，redis 中只存 20w 的数据，如何保证 redis 中的数据都是热点数据?</li><li>Redis 有哪些适合的场景?</li><li>Redis 支持的 Java 客户端都有哪些?官方推荐用哪个?</li><li>Redis 和 Redisson 有什么关系?</li><li>Jedis 与 Redisson 对比有什么优缺点?</li><li>Redis 如何设置密码及验证密码?</li><li>说说 Redis 哈希槽的概念?</li><li>Redis 集群的主从复制模型是怎样的?</li><li>Redis 集群会有写操作丢失吗?为什么?</li><li>Redis 集群之间是如何复制的?</li><li>Redis 集群最大节点个数是多少?</li><li>Redis 集群如何选择数据库?</li><li>怎么测试 Redis 的连通性?</li><li>Redis 中的管道有什么用?</li><li>怎么理解 Redis 事务?</li><li>Redis 事务相关的命令有哪几个?</li><li>Redis key的过期时间和永久有效分别怎么设置?</li><li>Redis 如何做内存优化?</li><li>Redis 回收进程如何工作的?</li></ol><h3 id="mongodb面试专题"><a class="markdownIt-Anchor" href="#mongodb面试专题"></a> MongoDB面试专题</h3><ol><li>你说的 NoSQL 数据库是什么意思?NoSQL 与 RDBMS 直接有什么区别?为什么要使用和不使用 NoSQL 数据库?说一说 NoSQL 数据库的几个优点?</li><li>NoSQL 数据库有哪些类型?</li><li>MySQL 与 MongoDB 之间最基本的差别是什么?</li><li>你怎么比较 MongoDB、CouchDB 及 CouchBase?</li><li>MongoDB 成为最好 NoSQL 数据库的原因是什么?</li><li>32 位系统上有什么细微差别?</li><li>journal 回放在条目(entry)不完整时(比如恰巧有一个中途故障了)会遇到问题吗?</li><li>分析器在 MongoDB 中的作用是什么?</li><li>名字空间(namespace)是什么?</li><li>如果用户移除对象的属性，该属性是否从存储层中删除?</li><li>能否使用日志特征进行安全备份?</li><li>允许空值 null 吗?</li><li>更新操作立刻 fsync 到磁盘?</li><li>如何执行事务/加锁?</li><li>为什么我的数据文件如此庞大?</li><li>启用备份故障恢复需要多久?</li><li>什么是 master 或 primary?</li><li>什么是 secondary 或 slave?</li><li>我必须调用 getLastError 来确保写操作生效了么?</li><li>我应该启动一个集群分片(sharded)还是一个非集群分片的 MongoDB 环境?</li><li>分片(sharding)和复制(replication)是怎样工作的?</li><li>数据在什么时候才会扩展到多个分片(shard)里?</li><li>当我试图更新一个正在被迁移的块(chunk)上的文档时会发生什么?</li><li>如果在一个分片(shard)停止或者很慢的时候，我发起一个查询会怎样?</li><li>我可以把 moveChunk 目录里的旧文件删除吗?</li><li>我怎么查看 Mongo 正在使用的链接?</li><li>如果块移动操作(moveChunk)失败了，我需要手动清除部分转移的文档吗?</li><li>如果我在使用复制技术(replication)，可以一部分使用日志(journaling)而其他部分则不使用吗?</li><li>当更新一个正在被迁移的块(Chunk)上的文档时会发生什么?</li><li>MongoDB 在 A:{B,C}上建立索引，查询 A:{B,C}和 A:{C,B}都会使用索引吗?</li><li>如果一个分片(Shard)停止或很慢的时候，发起一个查询会怎样?</li><li>MongoDB 支持存储过程吗?如果支持的话，怎么用?</li><li>如何理解 MongoDB 中的 GridFS 机制，MongoDB 为何使用 GridFS 来存储文件?</li></ol><h3 id="memcached面试专题"><a class="markdownIt-Anchor" href="#memcached面试专题"></a> memcached面试专题</h3><ol><li>memcached是怎么工作的?</li><li>memcached 最大的优势是什么?</li><li>memcached 和 MySQL 的query cache 相比有什么优缺点?</li><li>memcached 和服务器的 local cache (比如 PHP 的 APC、mmap 文件等）相比，有什么优缺点？</li><li>memcached 的 cache 机制是怎样的?</li><li>memcached 如何实现冗余机制?</li><li>memcached 如何处理容错的?</li><li>如何将 memcached 中 item 批量导入导出?</li><li>我需要把 memcached 中的 item 批量导出导入，怎么办?</li><li>memcached 是如何做身份验证的?</li><li>memcached 的多线程是什么?如何使用它们?</li><li>memcached 能接受的 key 的最大长度是多少?</li><li>memcached 对 item 的过期时间有什么限制?</li><li>memcached 最大能存储多大的单个 item?</li></ol><hr><p>作者：楚阳<br>链接：<a href="https://leetcode-cn.com/circle/article/LcV4q1/">https://leetcode-cn.com/circle/article/LcV4q1/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串匹配算法</title>
      <link href="/2020/01/30/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/"/>
      <url>/2020/01/30/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="详见"><a class="markdownIt-Anchor" href="#详见"></a> 详见</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;mid=2650737867&amp;idx=2&amp;sn=3d96f28f0a72d050ab8e319505fd0b34&amp;chksm=bea77d1889d0f40e05eee3ac744350c33a88b9fe93ca7167497c91f74f54905ddf2f39d103a2&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1580359826790&amp;sharer_shareid=a13757509c959280de99eee610e2d081#rd">https://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;mid=2650737867&amp;idx=2&amp;sn=3d96f28f0a72d050ab8e319505fd0b34&amp;chksm=bea77d1889d0f40e05eee3ac744350c33a88b9fe93ca7167497c91f74f54905ddf2f39d103a2&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1580359826790&amp;sharer_shareid=a13757509c959280de99eee610e2d081#rd</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问答 </tag>
            
            <tag> programing </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题目收集001</title>
      <link href="/2020/01/30/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%94%B6%E9%9B%86001/"/>
      <url>/2020/01/30/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%94%B6%E9%9B%86001/</url>
      
        <content type="html"><![CDATA[<h2 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法</h2><ol><li>接雨水(被问很多次)</li><li>链表反转</li><li>链表快排和归并排序</li><li>堆排序</li><li>数据流中位数</li><li>给定n个数，找出和为k的最少数字个数，例如，给定数组是1，2，3，k=4,那么，需要1,3这两个数(应该是dp)</li><li>字符串反转，给定i work it,输出it work i</li><li>给一个数，例如1234，把这个数的所有数字排列，下一个比他大的数是1243,输出1243(被问很多次)</li><li>给一个数字，例如100,200,100,300,输出每个数下个比他大的数，复杂度要求o(n),例如，输出200，300，300，0(没有输出0)(栈))</li><li>给定{开始时间，结束时间}的一个数组，每个员工在这时间内工作，求最多多少人同时工作(按时间排序，遇见开始就加1，遇见结束减1)</li><li>矩阵连乘问题，求A1A2A3*…An的最小花费(算法导论经典题)</li><li>链表中间节点和扩展(找三分点之一位置，到数第n个节点)</li><li>空间n个点(xi,yi)，x,y&lt;1e8,求一个矩形内有多少个点,多次查询，(个人想法：将x坐标划分成sqrt(max(x))份，设sqrt(max(x))这个值为sqx,即0-sqx,sqx+1-2*sqx,以此类推，然后将每个区间按y值排序，设矩形左下坐标(x1,y1),右上坐标(x2,y2),找到x1和x2对应的区间，对应x1和x2这两个边界区间单独考虑，其余区间堆y1，y2分别使用二分)(RMQ问题)</li><li>((xy)z),将括号内字符反转，结果是zxy(栈))</li><li>求一个数平方根(牛顿法或者二分)</li></ol><h2 id="操作系统"><a class="markdownIt-Anchor" href="#操作系统"></a> 操作系统</h2><ol><li>局部性原理(空间和时间上的)</li><li>线程进程协程</li><li>共享内存实现(shget,shat,shctl等)</li><li>管层实现</li><li>fork</li><li>死锁，手写死锁</li><li>银行家算法</li><li>信号量应用，手写信号量实现</li><li>内核态线程和用户态</li><li>线程通信</li><li>进程通信</li></ol><h2 id="机算机网络"><a class="markdownIt-Anchor" href="#机算机网络"></a> 机算机网络</h2><ol><li>https通信过程和加密算法</li><li>http1.0,http1.1,http2.0,http3.0</li><li>7层结构(应用层等等)</li><li>tcp三次握手四次挥手（被问无数次)</li><li>time_wait状态，close_wait状态</li><li>time_wait状态太多原因和怎么处理</li><li>close_wait状态太多原因</li><li>syn连接太多怎么办</li><li>tcp问什么3次握手(不是2次或者4次)和4次挥手</li><li>tcp和udp区别</li><li>get post区别</li><li>怎么设计稳定的udp(我是按tcp那一套来答得)</li><li>tcp nat穿孔</li><li>ping过程以及ping使用什么协议</li><li>tcp滑动窗口</li><li>tcp怎么保证稳定</li><li>tcp nagle粘包问题</li><li>tcp拥塞控制，慢开始和快重传</li><li>ARP协议</li><li>DDOS攻击</li><li>cookie欺骗</li></ol><h2 id="c问题"><a class="markdownIt-Anchor" href="#c问题"></a> C++问题</h2><ol><li>volatile关键字</li><li>智能指针原理及实现</li><li>悬垂指针</li><li>异常相关(c++11 noexcept和之前throw的区别，为什么用noexcept)</li><li>c++11新特性有哪些</li><li>map实现(没看过源码，就没继续问了)</li></ol><h2 id="jvm问题"><a class="markdownIt-Anchor" href="#jvm问题"></a> JVM问题</h2><ol><li>gc算法</li><li>CMS和G1区别</li><li>java和c<ins>区别，为什么java是解释性语言，c</ins>编译性语言</li><li>新生代哪些情况进入老年代</li><li>调用system.gc()一定进行full gc吗</li><li>java内存区域</li><li>java内存模型和happen before原则</li><li>可达性分析法和引用计数，循环引用怎么解决</li><li>对象初始化过程</li></ol><h2 id="java多线程"><a class="markdownIt-Anchor" href="#java多线程"></a> java多线程</h2><ol><li>volatile关键字原理</li><li>synchronized关键字原理</li><li>volatile关键字和synchronized区别</li><li>多线程原理，增长策略和饱和策略</li><li>消费者生产者代码</li><li>多线程种类</li><li>fork-join简介</li><li>三个线程同步代码</li></ol><h2 id="java基础"><a class="markdownIt-Anchor" href="#java基础"></a> java基础</h2><ol><li>lambda表达式优点</li><li>comparator和comparatable区别</li><li>string为什么是final</li><li>静态内部类和非静态内部类，匿名内部类</li><li>final用途</li><li>linkedlist和arraylist</li><li>实现简单的arraylist</li><li>范型T和通配符?区别</li><li>concurrenthashmap原理</li><li>hashmap原理</li><li>hashmap多线程出现哪些问题</li><li>equal和==区别</li></ol><h2 id="mysql数据库"><a class="markdownIt-Anchor" href="#mysql数据库"></a> Mysql数据库</h2><ol><li>优化问题，例如使用exist不使用in</li><li>count()和count(1)区别，count()计算null,count(1)不考虑</li><li>innodb和memory区别</li><li>数据库实现数据结构（B+树)</li><li>B+树优点，为什么不使用B树，平衡二叉树,红黑树</li><li>B+树B是什么(Balance)</li><li>索引有哪些</li><li>怎么建立索引</li><li>索引有哪些优点</li><li>左前缀问题,给一个语句问是否使用索引，哪些走索引</li><li>主从复制读写分离原理</li><li>分库分表</li><li>怎么设计一个数据库，类似mysql,考虑哪些方面</li><li>数据库特性(ACID)</li><li>数据库事务种类</li><li>间隙锁，MVCC,next-key锁</li><li>数据库封锁协议</li><li>limit优化问题（例如，select * from table1 limit 10000,100;</li><li>给定学生成绩表，找出前三名成绩</li></ol><h2 id="redis数据库"><a class="markdownIt-Anchor" href="#redis数据库"></a> Redis数据库</h2><ol><li>redis单线程原因</li><li>redis数据结构</li><li>zset实现原理</li><li>缓存击穿，缓存穿透，缓存雪崩</li><li>主从复制读写分离</li><li>哨兵模式</li><li>redis和mysql之间缓存一致性</li></ol><hr><p>作者：选牌<br>链接：<a href="https://leetcode-cn.com/circle/article/OZEuMd/">https://leetcode-cn.com/circle/article/OZEuMd/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的遍历算法</title>
      <link href="/2020/01/30/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95/"/>
      <url>/2020/01/30/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2><pre><code>对于二叉树中的任何一个节点而言，它都有两个角色需要扮演，一个是作为值存储的角色（角色1），另一个角色是作为它所带领的子树的一个代表（角色2）。而我们设置的bool变量，就是为了说明我当前拿到的这个节点，应该是以一个值存储的这种角色对待它(True)，还是应该以一个子树的代表这种角色对待它（False），如果是前者，那么就简单的将其所存储的值打印出来，如果是后者，我们需要继续探索由它带领的子树。作者：liu-yong-4链接：https://leetcode-cn.com/problems/two-sum/solution/xian-xu-zhong-xu-hou-xu-de-fei-di-gui-ban-ben-by-l/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre><h2 id="二叉树"><a class="markdownIt-Anchor" href="#二叉树"></a> 二叉树</h2><h3 id="前序"><a class="markdownIt-Anchor" href="#前序"></a> 前序</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Definition for a binary tree node.</span><br><span class="line"># class TreeNode:</span><br><span class="line">#     def __init__(self, x):</span><br><span class="line">#         self.val = x</span><br><span class="line">#         self.left = None</span><br><span class="line">#         self.right = None</span><br><span class="line"></span><br><span class="line">class Solution:</span><br><span class="line">    <span class="function">def <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[<span class="keyword">int</span>]:</span></span><br><span class="line"><span class="function">        res </span>=[]</span><br><span class="line">        stack = [] #must have</span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            stack = [(root,False)]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node,visited= stack.pop()</span><br><span class="line">            <span class="keyword">if</span>  visited:</span><br><span class="line">                res.append(node.val)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    stack.append([node.right,False])</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    stack.append([node.left,False])</span><br><span class="line">                stack.append([node,True]) #前序</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div><h3 id="中序"><a class="markdownIt-Anchor" href="#中序"></a> 中序</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Definition for a binary tree node.</span><br><span class="line"># class TreeNode:</span><br><span class="line">#     def __init__(self, x):</span><br><span class="line">#         self.val = x</span><br><span class="line">#         self.left = None</span><br><span class="line">#         self.right = None</span><br><span class="line"></span><br><span class="line">class Solution:</span><br><span class="line">    <span class="function">def <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[<span class="keyword">int</span>]:</span></span><br><span class="line"><span class="function">        res </span>=[]</span><br><span class="line">        stack = [] #must have</span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            stack = [(root,False)]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node,visited= stack.pop()</span><br><span class="line">            <span class="keyword">if</span>  visited:</span><br><span class="line">                res.append(node.val)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    stack.append([node.right,False])</span><br><span class="line">                stack.append([node,True])            #中序</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    stack.append([node.left,False])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div><h3 id="后序"><a class="markdownIt-Anchor" href="#后序"></a> 后序</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Definition for a binary tree node.</span><br><span class="line"># class TreeNode:</span><br><span class="line">#     def __init__(self, x):</span><br><span class="line">#         self.val = x</span><br><span class="line">#         self.left = None</span><br><span class="line">#         self.right = None</span><br><span class="line"></span><br><span class="line">class Solution:</span><br><span class="line">    <span class="function">def <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[<span class="keyword">int</span>]:</span></span><br><span class="line"><span class="function">        res </span>=[]</span><br><span class="line">        stack = [] #must have</span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            stack = [(root,False)]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node,visited= stack.pop()</span><br><span class="line">            <span class="keyword">if</span>  visited:</span><br><span class="line">                res.append(node.val)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append([node,True])     #后序</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    stack.append([node.right,False])</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    stack.append([node.left,False])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div><h2 id="n叉树"><a class="markdownIt-Anchor" href="#n叉树"></a> N叉树</h2><h3 id="前序-2"><a class="markdownIt-Anchor" href="#前序-2"></a> 前序</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val, children):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.children = children</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">class Solution:</span><br><span class="line">    <span class="function">def <span class="title">preorder</span><span class="params">(self, root: <span class="string">'Node'</span>)</span> -&gt; List[<span class="keyword">int</span>]:</span></span><br><span class="line"><span class="function">        res </span>=[]</span><br><span class="line">        stack = [] #must have</span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            stack = [(root,False)]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node,visited= stack.pop()</span><br><span class="line">            <span class="keyword">if</span>  visited:</span><br><span class="line">                res.append(node.val)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                for child in node.children[::-1]: #逆向进孩子。</span><br><span class="line">                    stack.append([child,False])</span><br><span class="line">                stack.append([node,True])          #前序</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div><h3 id="后序-2"><a class="markdownIt-Anchor" href="#后序-2"></a> 后序</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val, children):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.children = children</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">class Solution:</span><br><span class="line">    <span class="function">def <span class="title">preorder</span><span class="params">(self, root: <span class="string">'Node'</span>)</span> -&gt; List[<span class="keyword">int</span>]:</span></span><br><span class="line"><span class="function">        res </span>=[]</span><br><span class="line">        stack = [] #must have</span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            stack = [(root,False)]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node,visited= stack.pop()</span><br><span class="line">            <span class="keyword">if</span>  visited:</span><br><span class="line">                res.append(node.val)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append([node,True])          #后序</span><br><span class="line">                for child in node.children[::-1]: #逆向进孩子。</span><br><span class="line">                    stack.append([child,False])</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div><hr><p>作者：keyianpai<br>链接：<a href="https://leetcode-cn.com/circle/article/JLcnF0/">https://leetcode-cn.com/circle/article/JLcnF0/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问答 </tag>
            
            <tag> programing </tag>
            
            <tag> 算法 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编辑距离</title>
      <link href="/2020/01/30/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/"/>
      <url>/2020/01/30/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="详见"><a class="markdownIt-Anchor" href="#详见"></a> 详见</h2><p><a href="https://leetcode-cn.com/circle/article/rY3PIQ/">https://leetcode-cn.com/circle/article/rY3PIQ/</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问答 </tag>
            
            <tag> programing </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口算法</title>
      <link href="/2020/01/30/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%AE%97%E6%B3%95/"/>
      <url>/2020/01/30/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="详见"><a class="markdownIt-Anchor" href="#详见"></a> 详见</h2><p><a href="https://www.zhihu.com/topic/20746237/intro">https://www.zhihu.com/topic/20746237/intro</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问答 </tag>
            
            <tag> programing </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哑节点的妙用</title>
      <link href="/2020/01/30/%E5%93%91%E8%8A%82%E7%82%B9%E7%9A%84%E5%A6%99%E7%94%A8/"/>
      <url>/2020/01/30/%E5%93%91%E8%8A%82%E7%82%B9%E7%9A%84%E5%A6%99%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h2><p>哑节点是在处理与链表相关的操作时，设置在链表头之前的指向链表头的节点，用于简化与链表头相关的操作。</p><h2 id="问题引入"><a class="markdownIt-Anchor" href="#问题引入"></a> 问题引入</h2><p>在刷leetcode时，遇到了删除链表的倒数第N个节点的问题。这个问题并不复杂，对于有一定编程经验的人来说，答题者很快就能想到使用双指针法来解决这一问题：<br>两个指针都指向链表头部，然后一个指针先向后跳n个节点，然后两个指针同时沿链表向后跳，当第一个指针指向最后一个节点时，另外一个指针指向的就是需要被删除的节点。</p><p>初始代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode n1=head;</span><br><span class="line">        ListNode n2=head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">            n1=n1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(n1.next!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            n1=n1.next;</span><br><span class="line">            n2=n2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        n2.next=n2.next.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p>对于普通的测试样例（即不涉及头尾操作的样例），这种写法都可以通过。</p><p>但是当我面对操作头节点的问题时，代码就无法通过测试了。<br>例如：我们一共有四个节点，需要删除倒数第四个节点。<br>因为当我们删除了头节点的时候，我们用什么来返回链表呢？</p><h2 id="哑节点妙用"><a class="markdownIt-Anchor" href="#哑节点妙用"></a> 哑节点妙用</h2><p>在经过各种复杂的尝试之后，我还是解决了这个问题，一种方法是我需要定义更多的节点来指向各种各样的特殊位置，另一种方法就是不使用原链表，对原链表进行复制，逐个添加进新链表。这两种方法具体写起来都比较复杂。<br>在看答案之后，我发现答案引入了哑节点，其实也就是在我最初的代码上进行很小的修改，就完美解决了问题：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    ListNode first = dummy;</span><br><span class="line">    ListNode second = dummy;</span><br><span class="line">    <span class="comment">// Advances first pointer so that the gap between first and second is n nodes apart</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Move first to the end, maintaining the gap</span></span><br><span class="line">    <span class="keyword">while</span> (first != <span class="keyword">null</span>) &#123;</span><br><span class="line">        first = first.next;</span><br><span class="line">        second = second.next;</span><br><span class="line">    &#125;</span><br><span class="line">    second.next = second.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><p>上述代码作者：LeetCode<br>链接：<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/shan-chu-lian-biao-de-dao-shu-di-nge-jie-dian-by-l/">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/shan-chu-lian-biao-de-dao-shu-di-nge-jie-dian-by-l/</a><br>来源：力扣（LeetCode）<br>以上代码就是在我的代码的基础上添加了dummy节点，用于指向head节点，完美解决了头节点的操作问题。</p><p>版权声明：本文为CSDN博主「Terminator ld」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_44388094/article/details/100929840">https://blog.csdn.net/weixin_44388094/article/details/100929840</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> programing </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis使用</title>
      <link href="/2020/01/29/Mybatis%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/01/29/Mybatis%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="foreach-使用"><a class="markdownIt-Anchor" href="#foreach-使用"></a> foreach 使用</h2><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p>foreach简单介绍：foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。<br>foreach元素的属性主要有item，index，collection，open，separator，close。</p><ul><li>item表示集合中每一个元素进行迭代时的别名，</li><li>index指定一个名字，用于表示在迭代过程中，每次迭代到的位置，</li><li>open表示该语句以什么开始，</li><li>separator表示在每次进行迭代之间以什么符号作为分隔符，</li><li>close表示以什么结束，</li><li>collection属性是在使用foreach的时候最关键的也是最容易出错的，该属性是必须指定的，但是在不同情况下，该属性的值是不一样的，主要有一下3种情况：<ul><li>如果传入的是单参数且参数类型是一个List的时候，collection属性值为list .</li><li>如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array .</li><li>如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map的，map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key.</li></ul></li></ul><h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3><p>Entity</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employees</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> Integer employeeId;  </span><br><span class="line">    <span class="keyword">private</span> String firstName;  </span><br><span class="line">    <span class="keyword">private</span> String lastName;  </span><br><span class="line">    <span class="keyword">private</span> String email;  </span><br><span class="line">    <span class="keyword">private</span> String phoneNumber;  </span><br><span class="line">    <span class="keyword">private</span> Date hireDate;  </span><br><span class="line">    <span class="keyword">private</span> String jobId;  </span><br><span class="line">    <span class="keyword">private</span> BigDecimal salary;  </span><br><span class="line">    <span class="keyword">private</span> BigDecimal commissionPct;  </span><br><span class="line">    <span class="keyword">private</span> Integer managerId;  </span><br><span class="line">    <span class="keyword">private</span> Short departmentId;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Mapper</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeesMapper</span> </span>&#123; </span><br><span class="line">    <span class="function">List&lt;Employees&gt; <span class="title">getEmployeesListParams</span><span class="params">(List&lt;String&gt; employeeIds)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Employees&gt; <span class="title">getEmployeesArrayParams</span><span class="params">(String[] employeeIds)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Employees&gt; <span class="title">getEmployeesMapParams</span><span class="params">(Map&lt;String,Object&gt; params)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>XML</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List:forech中的collection属性类型是List,collection的值必须是:list,item的值可以随意,Dao接口中参数名字随意 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmployeesListParams"</span> <span class="attr">resultType</span>=<span class="string">"Employees"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from EMPLOYEES e</span><br><span class="line">    where e.EMPLOYEE_ID in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"employeeId"</span> <span class="attr">index</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        #&#123;employeeId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--Array:forech中的collection属性类型是array,collection的值必须是:list,item的值可以随意,Dao接口中参数名字随意 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmployeesArrayParams"</span> <span class="attr">resultType</span>=<span class="string">"Employees"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from EMPLOYEES e</span><br><span class="line">    where e.EMPLOYEE_ID in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">item</span>=<span class="string">"employeeId"</span> <span class="attr">index</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        #&#123;employeeId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--Map:不单单forech中的collection属性是map.key,其它所有属性都是map.key,比如下面的departmentId --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmployeesMapParams"</span> <span class="attr">resultType</span>=<span class="string">"Employees"</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from EMPLOYEES e</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"departmentId!=null and departmentId!=''"</span>&gt;</span></span><br><span class="line">            e.DEPARTMENT_ID=#&#123;departmentId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"employeeIdsArray!=null and employeeIdsArray.length!=0"</span>&gt;</span></span><br><span class="line">            AND e.EMPLOYEE_ID in</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"employeeIdsArray"</span> <span class="attr">item</span>=<span class="string">"employeeId"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">                #&#123;employeeId&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 编程随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring and Spring MVC 总结</title>
      <link href="/2020/01/29/Spring&amp;SpringMVC%E6%80%BB%E7%BB%93/"/>
      <url>/2020/01/29/Spring&amp;SpringMVC%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么使用spring"><a class="markdownIt-Anchor" href="#为什么使用spring"></a> 为什么使用Spring</h2><ol><li>方便解耦，简化开发<br>通过Spring提供的IoC容器，可以将对象之间的依赖关系交由Spring进行控制，避免硬编码所造成的过度程序耦合。</li><li>AOP编程的支持<br>通过Spring提供的AOP功能，方便进行面向切面的编程，如性能监测、事务管理、日志记录等。</li><li>声明式事务的支持</li><li>方便集成各种优秀框架</li><li>降低Java EE API的使用难度<br>如对JDBC，JavaMail，远程调用等提供了简便封装</li></ol><h2 id="什么是ioc为什使用ioc"><a class="markdownIt-Anchor" href="#什么是ioc为什使用ioc"></a> 什么是IoC，为什使用IoC</h2><p>IoC全称Iversion of Controller，控制反转。<br>这概念是说你不用创建对象，而只需要描述它如何被创建。你不在代码里直接组装你的组件和服务，但是要在配置文件里描述哪些组件需要哪些服务，之后一个容器（IOC容器）负责把他们组装起来。<br>它能指导我们如何设计出松耦合、更优良的程序。</p><h2 id="什么是aop为什么使用aop"><a class="markdownIt-Anchor" href="#什么是aop为什么使用aop"></a> 什么是AOP，为什么使用AOP</h2><p>AOP全称：Aspect-Oriented Programming，面向切面编程。<br>AOP，面向切面编程，就是把可重用的功能提取出来，然后将这些通用功能在合适的时候织入到应用程序中，比如事务管理、权限控制、日志记录、性能统计等。<br>AOP并没有帮助我们解决任何新的问题，它只是提供了一种更好的办法，能够用更少的工作量来解决现有的一些问题，使得系统更加健壮，可维护性更好。</p><h2 id="什么是spring的事务管理"><a class="markdownIt-Anchor" href="#什么是spring的事务管理"></a> 什么是Spring的事务管理</h2><p>事务就是对一系列的数据库操作（比如插入多条数据）进行统一的提交或回滚操作，如果插入成功，那么一起成功，如果中间有一条出现异常，那么回滚之前的所有操作。这样可以防止出现脏数据，防止数据库数据出现问题。<br>开发中为了避免这种情况一般都会进行事务管理。<br>Spring的声明式事务通常是指在配置文件中对事务进行配置声明，其中包括了很多声明属性，它是通过Spring Proxy帮你做代理，自己不用额外的写代码，只要在Spring配置文件中声明即可；通常用在数据库的操作里面；<br>编程式事务就是指通过硬编码的方式做事务处理，这种处理方式需要写代码，事务中的逻辑可以自己定制；可以是数据库的东东，也可以是其他的操作。<br>Spring中也有自己的事务管理机制，一般是使用TransactionMananger进行管理，可以通过Spring的注入来完成此功能。</p><h2 id="spring框架支持以下五种bean的作用域"><a class="markdownIt-Anchor" href="#spring框架支持以下五种bean的作用域"></a> Spring框架支持以下五种bean的作用域</h2><ul><li>singleton<br>默认值，bean在每个Spring ioc 容器中只有一个实例。</li><li>prototype<br>一个bean的定义可以有多个实例。</li><li>request<br>每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。</li><li>session<br>在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</li><li>global-session<br>在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</li><li></li></ul><h2 id="什么是spring的mvc框架"><a class="markdownIt-Anchor" href="#什么是spring的mvc框架"></a> 什么是Spring的MVC框架</h2><p>Spring 配备构建Web 应用的全功能MVC框架。Spring可以很便捷地和其他MVC框架集成，如Struts，Spring 的MVC框架用控制反转把业务对象和控制逻辑清晰地隔离。它也允许以声明的方式把请求参数和业务对象绑定。<br>spring mvc是一个基于mvc的web框架。spring mvc是spring框架的一个模块，springmvc和spring无需通过中间整合层进行整合。</p><h2 id="如何启用注解"><a class="markdownIt-Anchor" href="#如何启用注解"></a> 如何启用注解</h2><p><code>&lt;context:annotation-config/&gt;</code><br>如果使用<code>&lt;context:component-scan base-package=&quot;com.tgb.web.controller.annotation&quot;&gt; &lt;/context:component-scan&gt;</code> 则上面内容可以省略</p><h2 id="spring-mvc的请求流程"><a class="markdownIt-Anchor" href="#spring-mvc的请求流程"></a> Spring MVC的请求流程</h2><ul><li>第一步：发起请求到前端控制器(DispatcherServlet)</li><li>第二步：前端控制器请求HandlerMapping查找Handler可以根据xml配置、注解进行查找</li><li>第三步：处理器映射器HandlerMapping向前端控制器返回Handler</li><li>第四步：前端控制器调用处理器适配器去执行Handler</li><li>第五步：处理器适配器去执行Handler</li><li>第六步：Handler执行完成给适配器返回ModelAndView</li><li>第七步：处理器适配器向前端控制器返回ModelAndView。ModelAndView是springmvc框架的一个底层对象，包括 Model和view</li><li>第八步：前端控制器请求视图解析器去进行视图解析，根据逻辑视图名解析成真正的视图(jsp)</li><li>第九步：视图解析器向前端控制器返回View</li><li>第十步：前端控制器进行视图渲染。视图渲染将模型数据(在ModelAndView对象中)填充到request域</li><li>第十一步：前端控制器向用户响应结果</li></ul><h2 id="webxml的配置"><a class="markdownIt-Anchor" href="#webxml的配置"></a> web.xml的配置</h2><h2 id="注解的处理器映射器和适配器"><a class="markdownIt-Anchor" href="#注解的处理器映射器和适配器"></a> 注解的处理器映射器和适配器</h2><p>spring3.1之后使用<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</code>注解映射器。<br>在spring3.1之后使用<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</code>注解适配器。<br>使用<code>mvc:annotation-driven</code>代替上边注解映射器和注解适配器配置</p><h2 id="spring-与-mybatis整合过程"><a class="markdownIt-Anchor" href="#spring-与-mybatis整合过程"></a> spring 与 mybatis整合过程</h2><ul><li>第一步：整合dao层<br>mybatis和spring整合，通过spring管理mapper接口。<br>使用mapper的扫描器自动扫描mapper接口在spring中进行注册。</li><li>第二步：整合service层<br>通过spring管理 service接口。<br>使用配置方式将service接口配置在spring配置文件中。<br>实现事务控制。</li><li>第三步：整合springmvc<br>由于springmvc是spring的模块，不需要整合。<br>主要配置有：<ul><li>mybatis配置文件sqlMapConfig.xml配置别名自动扫描(实体类)</li><li>mapper扫描器(接口，数据库访问接口)</li><li>数据库连接池配置</li><li>声明式事务配置</li><li>启用注解扫描：<code>&lt;context:component-scan base-package=&quot;cn.itcast.ssm.controller&quot;&gt;&lt;/context:component-scan&gt;</code></li><li>配置注解映射器和适配器： <code>&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;</code></li><li>视图解析器：<code>&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</code></li><li>配置控制类： DispatcherServlet前端控制器</li><li>配置spring配置文件加载类：ClassLoadListener</li></ul></li></ul><h2 id="sqlmapconfigxml"><a class="markdownIt-Anchor" href="#sqlmapconfigxml"></a> sqlMapConfig.xml</h2><h2 id="配置数据源"><a class="markdownIt-Anchor" href="#配置数据源"></a> 配置数据源</h2><h2 id="事务控制"><a class="markdownIt-Anchor" href="#事务控制"></a> 事务控制</h2><p>(applicationContext-transaction.xml)，在applicationContext-transaction.xml中使用spring声明式事务控制方法。</p><h2 id="加载spring配置"><a class="markdownIt-Anchor" href="#加载spring配置"></a> 加载spring配置</h2><h2 id="静态资源访问不被拦截"><a class="markdownIt-Anchor" href="#静态资源访问不被拦截"></a> 静态资源访问不被拦截：</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> <span class="attr">location</span>=<span class="string">"/resources/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span> <span class="attr">location</span>=<span class="string">"/images/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> <span class="attr">location</span>=<span class="string">"/js/"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="requestmapping的作用"><a class="markdownIt-Anchor" href="#requestmapping的作用"></a> @RequestMapping的作用</h2><ul><li>url映射</li><li>窄化请求映射</li><li>限制http请求方法</li></ul><h2 id="controller方法的返回值"><a class="markdownIt-Anchor" href="#controller方法的返回值"></a> controller方法的返回值</h2><ul><li>返回ModelAndView<br>需要方法结束时，定义ModelAndView，将model和view分别进行设置。</li><li>返回string<br>表示返回逻辑视图名。真正视图(jsp路径)=前缀+逻辑视图名+后缀<br>redirect重定向：返回字符串格式为：“redirect:queryItem.action”<br>forward页面转发：返回字符串格式为：“forward:queryItem.action”</li><li>返回void<br>在controller方法形参上可以定义request和response，使用request或response指定响应结果：<ul><li>使用request转向页面，如下：request.getRequestDispatcher(“页面路径”).forward(request, response);</li><li>也可以通过response页面重定向：response.sendRedirect(“url”)</li><li>也可以通过response指定响应结果，例如响应json数据如下：  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"json串"</span>);</span><br></pre></td></tr></table></figure></div></li></ul></li></ul><h2 id="参数绑定"><a class="markdownIt-Anchor" href="#参数绑定"></a> 参数绑定：</h2><ol><li>默认支持的类型<br>直接在controller方法形参上定义下边类型的对象，就可以使用这些对象。在参数绑定过程中，如果遇到下边类型直接进行绑定。<ul><li>HttpServletRequest：通过request对象获取请求信息</li><li>HttpServletResponse：通过response处理响应信息</li><li>HttpSession：通过session对象得到session中存放的对象</li><li>Model/ModelMap：model是一个接口，modelMap是一个接口实现 。作用：将model数据填充到request域。</li></ul></li><li>简单类型<br>通过@RequestParam对简单类型的参数进行绑定。<br>如果不使用@RequestParam，要求request传入参数名称和controller方法的形参名称一致，方可绑定成功。<br>如果使用@RequestParam，不用限制request传入参数名称和controller方法的形参名称一致。<br>通过required属性指定参数是否必须要传入，如果设置为true，没有传入参数，会报错。</li><li>pojo绑定<br>页面中input的name和controller的pojo形参中的属性名称一致，将页面中数据绑定到pojo。(usename,age；不需要user.username,user.age)</li><li>自定义参数绑定实现日期类型绑定<br>对于controller形参中pojo对象，如果属性中有日期类型，需要自定义参数绑定。将请求日期数据串转成 日期类型，要转换的日期类型和pojo中日期属性的类型保持一致。</li></ol><h2 id="spring-mvc-和-struts2-对比"><a class="markdownIt-Anchor" href="#spring-mvc-和-struts2-对比"></a> Spring MVC 和 Struts2 对比</h2><ol><li>Struts2是类级别的拦截， 一个类对应一个request上下文，SpringMVC是方法级别的拦截，一个方法对应一个request上下文，而方法同时又跟一个url对应，所以说从架构本身上SpringMVC 就容易实现restful url</li><li>由上边原因，SpringMVC的方法之间基本上独立的，独享request response数据，请求数据通过参数获取，处理结果通过ModelMap交回给框架，方法之间不共享变量，而Struts2搞的就比较乱，虽然方法之间也是独立的，但其所有Action变量是共享的，这不会影响程序运行，却给我们编码 读程序时带来麻烦，每次来了请求就创建一个Action，一个Action对象对应一个request上下文。</li><li>由于Struts2需要针对每个request进行封装，把request，session等servlet生命周期的变量封装成一个一个Map，供给每个Action使用，并保证线程安全，所以在原则上，是比较耗费内存的。</li><li>SpringMVC集成了Ajax，使用非常方便，只需一个注解@ResponseBody就可以实现，然后直接返回响应文本即可，而Struts2拦截器集成了Ajax，在Action中处理时一般必须安装插件或者自己写代码集成进去，使用起来也相对不方便。</li><li>springmvc面向方法开发的（更接近service接口的开发方式），struts2面向类开发。</li><li>springmvc可以单例开发，struts2只能是多例开发。</li></ol><h2 id="乱码处理"><a class="markdownIt-Anchor" href="#乱码处理"></a> 乱码处理</h2><ol><li>post乱码<br>在web.xml添加post乱码filter：CharacterEncodingFilter</li><li>对于get请求中文参数出现乱码解决方法有两个：<ul><li>修改tomcat配置文件添加编码与工程编码一致，如下：<br><code>&lt;Connector URIEncoding=&quot;utf-8&quot; connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;</code></li><li>对参数进行重新编码：<br>String userName = new  String(request.getParamter(“userName”).getBytes(“ISO8859-1”),“utf-8”)<br>ISO8859-1是tomcat默认编码，需要将tomcat编码后的内容按utf-8编码</li></ul></li></ol><h2 id="集合类型绑定"><a class="markdownIt-Anchor" href="#集合类型绑定"></a> 集合类型绑定</h2><ol><li>数组绑定：<br>controller方法参数使用：(Integer[] itemId)<br>页面统一使用:itemId 作为name</li><li>list绑定：<br>pojo属性名为：itemsList<br>页面：<code>itemsList[index].属性名</code></li><li>map 绑定：<br>pojo属性名为：<code>Map&lt;String, Object&gt; itemInfo = new HashMap&lt;String, Object&gt;();</code><br>页面： <code>&lt;td&gt;</code>姓名：<code>&lt;inputtype=&quot;text&quot;name=&quot;itemInfo['name']&quot;/&gt;</code></li></ol><h2 id="spring-校验"><a class="markdownIt-Anchor" href="#spring-校验"></a> spring 校验</h2><ol><li>项目中，通常使用较多是前端的校验，比如页面中js校验。对于安全要求较高点建议在服务端进行校验。</li><li>springmvc使用hibernate的校验框架validation(和hibernate没有任何关系)。<br>校验思路：页面提交请求的参数，请求到controller方法中，使用validation进行校验。如果校验出错，将错误信息展示到页面。</li></ol><h2 id="数据回显"><a class="markdownIt-Anchor" href="#数据回显"></a> 数据回显</h2><ul><li><code>@ModelAttribute</code>还可以将方法的返回值传到页面：在方法上加注解<code>@ModelAttribute</code></li><li>使用最简单方法使用model，可以不用<code>@ModelAttribute：model.addAttribute(&quot;id&quot;, id);</code></li><li>springmvc默认对pojo数据进行回显。pojo数据传入controller方法后，springmvc自动将pojo数据放到request域，key等于pojo类型（首字母小写）</li><li><code>public String testParam(PrintWriter out, @RequestParam(&quot;username&quot;) String username) { //out直接输出}</code></li></ul><h2 id="异常处理"><a class="markdownIt-Anchor" href="#异常处理"></a> 异常处理</h2><p>springmvc提供全局异常处理器（一个系统只有一个异常处理器）进行统一异常处理。<br>系统遇到异常，在程序中手动抛出，dao抛给service、service给controller、controller抛给前端控制器，前端控制器调用全局异常处理器。</p><h2 id="上传图片"><a class="markdownIt-Anchor" href="#上传图片"></a> 上传图片</h2><ol><li>在页面form中提交<code>enctype=&quot;multipart/form-data&quot;</code>的数据时，需要springmvc对multipart类型的数据进行解析。</li><li>在springmvc.xml中配置multipart类型解析器。</li><li>方法中使用：MultipartFile attach (单个文件上传) 或者  MultipartFile[] attachs (多个文件上传)</li></ol><h2 id="json处理"><a class="markdownIt-Anchor" href="#json处理"></a> Json处理</h2><ol><li>加载json转换的jar包：springmvc中使用jackson的包进行json转换（<code>@requestBody</code>和<code>@responseBody</code>使用下边的包进行json转）</li><li>配置json转换器。在注解适配器RequestMappingHandlerAdapter中加入messageConverters。如果使用<code>&lt;mvc:annotation-driven /&gt;</code> 则会自动加入。</li><li>ajax</li><li>Controller (ResponseBody、RequestBody)</li><li>注意ajax中contentType如果不设置为json类型，则传的参数为key/value类型。上面设置后，传的是json类型。<br>详见：<a href="http://www.cnblogs.com/Jtianlin/p/5224885.html">http://www.cnblogs.com/Jtianlin/p/5224885.html</a></li></ol><h2 id="拦截器"><a class="markdownIt-Anchor" href="#拦截器"></a> 拦截器：</h2><ol><li>定义拦截器，实现HandlerInterceptor接口。接口中提供三个方法。<br>a. preHandle ：进入 Handler方法之前执行，用于身份认证、身份授权，比如身份认证，如果认证通过表示当前用户没有登陆，需要此方法拦截不再向下执行<br>b. postHandle：进入Handler方法之后，返回modelAndView之前执行，应用场景从modelAndView出发：将公用的模型数据(比如菜单导航)在这里传到视图，也可以在这里统一指定视图<br>c. afterCompletion：执行Handler完成执行此方法，应用场景：统一异常处理，统一日志处理</li><li>拦截器配置：<br>a. 针对HandlerMapping配置(不推荐)：springmvc拦截器针对HandlerMapping进行拦截设置，如果在某个HandlerMapping中配置拦截，经过该 HandlerMapping映射成功的handler最终使用该 拦截器。(一般不推荐使用)<br>b. 类似全局的拦截器：springmvc配置类似全局的拦截器，springmvc框架将配置的类似全局的拦截器注入到每个HandlerMapping中</li></ol><h2 id="如何启用注解-2"><a class="markdownIt-Anchor" href="#如何启用注解-2"></a> 如何启用注解：</h2><p><code>&lt;context:annotation-config/&gt;</code><br>如果使用<code>&lt;context:component-scan base-package=&quot;com.tgb.web.controller.annotation&quot;&gt; &lt;/context:component-scan&gt;</code> 则上面内容可以省略<br>使用<code>mvc:annotation-driven</code>代替注解映射器和注解适配器配置</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> 问答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC 摘要</title>
      <link href="/2020/01/29/SpringMVC%E6%91%98%E8%A6%81/"/>
      <url>/2020/01/29/SpringMVC%E6%91%98%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<h2 id="spring-mvc-概述"><a class="markdownIt-Anchor" href="#spring-mvc-概述"></a> Spring MVC 概述</h2><p>Spring MVC是Spring提供的一个强大而灵活的web框架。借助于注解，Spring MVC提供了几乎是POJO的开发模式，使得控制器的开发和测试更加简单。这些控制器一般不直接处理请求，而是将其委托给Spring上下文中的其他bean，通过Spring的依赖注入功能，这些bean被注入到控制器中。</p><p>Spring MVC主要由DispatcherServlet、处理器映射、处理器(控制器)、视图解析器、视图组成。他的两个核心是两个核心：</p><ul><li>处理器映射：选择使用哪个控制器来处理请求</li><li>视图解析器：选择结果应该如何渲染</li></ul><p>通过以上两点，Spring MVC保证了如何选择控制处理请求和如何选择视图展现输出之间的松耦合。</p><h2 id="spring-mvc-运行原理"><a class="markdownIt-Anchor" href="#spring-mvc-运行原理"></a> Spring MVC 运行原理</h2><p><a href="/img/blog/spring_mvc_abstract_01.png" data-fancybox="group" data-caption="SpringMVC运行原理" class="fancybox"><img alt="SpringMVC运行原理" title="SpringMVC运行原理" data-src="/img/blog/spring_mvc_abstract_01.png" class="lazyload"></a></p><ol><li>Http请求：客户端请求提交到DispatcherServlet。</li><li>寻找处理器：由DispatcherServlet控制器查询一个或多个HandlerMapping，找到处理请求的Controller。</li><li>调用处理器：DispatcherServlet将请求提交到Controller。</li><li>调用业务处理和返回结果：Controller调用业务逻辑处理后，返回ModelAndView。</li><li>处理视图映射并返回模型： DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图。</li><li>Http响应：视图负责将结果显示到客户端。</li></ol><h2 id="spring-mvc-接口解释"><a class="markdownIt-Anchor" href="#spring-mvc-接口解释"></a> Spring MVC 接口解释</h2><h3 id="dispatcherservlet接口"><a class="markdownIt-Anchor" href="#dispatcherservlet接口"></a> DispatcherServlet接口</h3><p>Spring提供的前端控制器，所有的请求都有经过它来统一分发。在DispatcherServlet将请求分发给Spring Controller之前，需要借助于Spring提供的HandlerMapping定位到具体的Controller。</p><p>是整个Spring MVC的核心。它负责接收HTTP请求组织协调Spring MVC的各个组成部分。其主要工作有以下三项：</p><ol><li>截获符合特定格式的URL请求。</li><li>初始化DispatcherServlet上下文对应WebApplicationContext，并将其与业务层、持久化层的WebApplicationContext建立关联。</li><li>初始化Spring MVC的各个组成组件，并装配到DispatcherServlet中。</li></ol><h3 id="handlermapping接口"><a class="markdownIt-Anchor" href="#handlermapping接口"></a> HandlerMapping接口</h3><p>能够完成客户请求到Controller映射。</p><h3 id="controller接口"><a class="markdownIt-Anchor" href="#controller接口"></a> Controller接口</h3><p>需要为并发用户处理上述请求，因此实现Controller接口时，必须保证线程安全并且可重用。<br>Controller将处理用户请求，这和Struts Action扮演的角色是一致的。一旦Controller处理完用户请求，则返回ModelAndView对象给DispatcherServlet前端控制器，ModelAndView中包含了模型（Model）和视图（View）。<br>从宏观角度考虑，DispatcherServlet是整个Web应用的控制器；从微观考虑，Controller是单个Http请求处理过程中的控制器，而ModelAndView是Http请求过程中返回的模型（Model）和视图（View）。</p><h3 id="viewresolver接口"><a class="markdownIt-Anchor" href="#viewresolver接口"></a> ViewResolver接口</h3><p>Spring提供的视图解析器（ViewResolver）在Web应用中查找View对象，从而将相应结果渲染给客户。</p><h2 id="spring-mvc-配置"><a class="markdownIt-Anchor" href="#spring-mvc-配置"></a> Spring MVC 配置</h2><p>略</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书签整理</title>
      <link href="/2020/01/29/000_%E4%B9%A6%E7%AD%BE%E6%95%B4%E7%90%86/"/>
      <url>/2020/01/29/000_%E4%B9%A6%E7%AD%BE%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="工具集"><a class="markdownIt-Anchor" href="#工具集"></a> 工具集</h2><h3 id="对照表"><a class="markdownIt-Anchor" href="#对照表"></a> 对照表</h3><ul><li><a href="http://tool.oschina.net/commons">HTTP Content-type</a></li><li><a href="http://tool.oschina.net/commons?type=5">HTTP状态码详解</a></li><li><a href="http://tool.oschina.net/commons?type=4">ASCII码</a></li><li><a href="http://tool.oschina.net/commons?type=3">RGB颜色</a></li><li><a href="http://tool.oschina.net/commons?type=2">HTML转义字符</a></li><li><a href="http://tool.oschina.net/commons?type=7">TCP/UDP常见端口</a></li><li><a href="http://tool.oschina.net/commons?type=8">网页常用字体参考</a></li></ul><h3 id="cdn"><a class="markdownIt-Anchor" href="#cdn"></a> CDN</h3><ul><li><a href="https://www.staticfile.org/">Staticfile CDN</a></li><li><a href="http://www.bootcdn.cn/">Bootstrap中文网开源项目</a></li><li><a href="https://cdnjs.com/">The best FOSS CDN</a></li></ul><h3 id="数据分析平台"><a class="markdownIt-Anchor" href="#数据分析平台"></a> 数据分析平台</h3><ul><li><a href="https://tongji.baidu.com/web/welcome/login">百度统计</a></li><li><a href="https://zhugeio.com/">诸葛iO</a></li><li><a href="http://www.umeng.com/">友盟</a></li><li><a href="https://www.talkingdata.com/">TalkingData</a></li><li><a href="http://mta.qq.com/">腾讯移动分析</a></li></ul><h3 id="文字识别"><a class="markdownIt-Anchor" href="#文字识别"></a> 文字识别</h3><ul><li><a href="https://cloud.tencent.com/act/event/ocrdemo">腾讯</a></li><li><a href="http://ai.baidu.com/tech/ocr/general">百度</a></li></ul><h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3><ul><li><a href="http://www.network-science.de/ascii/">文字转ASCII</a></li><li><a href="https://www.baidufe.com/fehelper">百度前端助手</a></li><li><a href="https://carbon.now.sh/">代码图片值作Carbon</a></li><li><a href="http://www.styb.cn/cms/ieee_754.php">单精度浮点数转换 IEEE 754</a></li><li><a href="http://tool.chinaz.com/tools/unicode.aspx">站长工具-编码解码</a></li><li><a href="https://www.reg007.com/">注册过的网站 REG007</a></li><li><a href="https://login.teamviewer.com/">TeamViewer Management Console</a></li><li><a href="https://www.processon.com/">ProcessOn</a></li><li><a href="https://mail.protonmail.com/">ProtonMail</a></li><li><a href="http://sourcegear.com/diffmerge/downloaded.php">DiffMerge</a></li><li><a href="http://www.c-lodop.com/index.html">Lodop</a></li><li><a href="http://www.stats.gov.cn/tjsj/tjbz/tjypflml/">国家统计局&gt;&gt;统计用产品分类目录</a></li></ul><h2 id="教程集"><a class="markdownIt-Anchor" href="#教程集"></a> 教程集</h2><h3 id="c"><a class="markdownIt-Anchor" href="#c"></a> c</h3><h3 id="csslessscss"><a class="markdownIt-Anchor" href="#csslessscss"></a> css/less/scss</h3><h3 id="docker"><a class="markdownIt-Anchor" href="#docker"></a> Docker</h3><ul><li><a href="https://docs.docker.com/">官网</a></li><li><a href="https://yeasy.gitbooks.io/docker_practice/content/">Docker 从入门到实践</a></li></ul><h3 id="java基础"><a class="markdownIt-Anchor" href="#java基础"></a> java基础</h3><h3 id="kubernetesk8s"><a class="markdownIt-Anchor" href="#kubernetesk8s"></a> kubernetes/k8s</h3><ul><li><a href="https://kubernetes.io/">官网</a></li><li><a href="https://www.kubernetes.org.cn/">中文社区</a></li></ul><h3 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> linux</h3><ul><li><a href="https://wangchujiang.com/linux-command/">Linux 命令搜索引擎</a></li></ul><h3 id="markdown"><a class="markdownIt-Anchor" href="#markdown"></a> markdown</h3><ul><li><a href="https://mermaid-js.github.io/mermaid/#/">mermaid</a></li><li><a href="https://www.dazhuanlan.com/2019/10/16/5da67e8a17798/">Hexo 的 markdown-it 渲染引擎和其相关插件</a></li></ul><h3 id="maven"><a class="markdownIt-Anchor" href="#maven"></a> maven</h3><ul><li><a href="https://mvnrepository.com/">maven 仓库</a></li></ul><h3 id="mybatis"><a class="markdownIt-Anchor" href="#mybatis"></a> mybatis</h3><h3 id="mysql"><a class="markdownIt-Anchor" href="#mysql"></a> mysql</h3><h3 id="nginx"><a class="markdownIt-Anchor" href="#nginx"></a> nginx</h3><ul><li><a href="http://tengine.taobao.org/book/index.html">Nginx开发从入门到精通</a></li><li><a href="https://www.nginx.com/blog/introducing-the-nginx-microservices-reference-architecture/">Introducing the Microservices Reference Architecture from NGINX</a></li></ul><h3 id="oracle"><a class="markdownIt-Anchor" href="#oracle"></a> oracle</h3><ul><li><a href="https://blog.csdn.net/xiaoyu19910321/article/details/89856514">安装教程</a></li></ul><h3 id="python"><a class="markdownIt-Anchor" href="#python"></a> python</h3><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">廖雪峰</a></li><li><a href="https://docs.python.org/3/library/functions.html">python3 内建函数</a></li></ul><h3 id="spring"><a class="markdownIt-Anchor" href="#spring"></a> spring</h3><h3 id="tcpip"><a class="markdownIt-Anchor" href="#tcpip"></a> TCP/IP</h3><ul><li><a href="http://jkorpela.fi/http.html">Quick reference to HTTP headers</a></li><li><a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html">互联网协议入门（一）阮一峰</a></li><li><a href="http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html">互联网协议入门（二）阮一峰</a></li></ul><h3 id="tensorflow"><a class="markdownIt-Anchor" href="#tensorflow"></a> Tensorflow</h3><ul><li><a href="http://www.tensorfly.cn/">中文社区</a></li></ul><h3 id="tomcat"><a class="markdownIt-Anchor" href="#tomcat"></a> tomcat</h3><ul><li><a href="https://blog.csdn.net/YaoDeBiAn/article/details/80001406">Tomcat数据源</a></li><li><a href="https://www.w3cschool.cn/tomcat/5y2t1k9g.html">Tomcat 8 权威指南</a></li></ul><h3 id="typescriptes6"><a class="markdownIt-Anchor" href="#typescriptes6"></a> TypeScript/ES6</h3><ul><li><a href="https://ts.xcatliu.com/">TypeScript 入门教程</a></li><li><a href="https://zhongsp.gitbooks.io/typescript-handbook/content/">TypeScript Handbook（中文版）</a></li><li><a href="https://jkchao.github.io/typescript-book-chinese/">《TypeScript Deep Dive》 深入理解TypeScript</a></li></ul><h3 id="工作流"><a class="markdownIt-Anchor" href="#工作流"></a> 工作流</h3><ul><li><a href="https://www.activiti.org/userguide/">Activiti User Guide</a></li><li><a href="http://www.mossle.com/docs/activiti/index.html">Activiti 5.16 用户手册</a></li><li><a href="https://waylau.gitbooks.io/activiti-5-x-user-guide/">Activiti 5.x User Guide 《Activiti 5.x 用户指南》中文翻译</a></li></ul><h3 id="规则引擎"><a class="markdownIt-Anchor" href="#规则引擎"></a> 规则引擎</h3><ul><li><a href="https://www.drools.org/">Drools官网</a></li><li><a href="http://www.drools.org.cn/">Drools中文网</a></li></ul><h3 id="缓存"><a class="markdownIt-Anchor" href="#缓存"></a> 缓存</h3><ul><li>Redis<ul><li><a href="https://www.redis.net.cn/">官网</a></li><li><a href="http://redisdoc.com/">命令参考</a></li></ul></li><li>MemoryCache</li></ul><h3 id="全文搜索引擎"><a class="markdownIt-Anchor" href="#全文搜索引擎"></a> 全文搜索引擎</h3><ul><li><a href="https://blog.csdn.net/csdnYF/article/details/79286792">使用 ElasticSearch6.0 快速实现全文搜索功能</a></li><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html">ElasticSearch权威指南</a></li></ul><h3 id="小程序"><a class="markdownIt-Anchor" href="#小程序"></a> 小程序</h3><ul><li>架构<ul><li><a href="https://youzan.github.io/vant-weapp/#/intro">Vant Weapp UI 组件库</a></li></ul></li><li>教程<ul><li><a href="https://github.com/wechat-miniprogram/miniprogram-cli">miniprogram-cli</a></li><li><a href="https://www.jianshu.com/p/5fdcdf478ec8">微信小程序版本自动更新</a></li></ul></li></ul><h3 id="设计模式"><a class="markdownIt-Anchor" href="#设计模式"></a> 设计模式</h3><h3 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法</h3><ul><li>练习<ul><li><a href="https://leetcode-cn.com/">LeetCode</a></li></ul></li><li>题解/学习<ul><li><a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html">红黑树动画</a></li></ul></li></ul><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><ul><li><a href="https://junit.org/junit5/docs/current/user-guide/">JUnit 5</a></li><li><a href="http://jmock.org/index.html">jMock</a></li></ul><h3 id="压测"><a class="markdownIt-Anchor" href="#压测"></a> 压测</h3><ul><li><a href="https://www.cnblogs.com/imyalost/p/7062784.html">JMeter</a></li></ul><h3 id="架构"><a class="markdownIt-Anchor" href="#架构"></a> 架构</h3><ul><li>前端框架<ul><li><a href="https://github.com/PanJiaChen/vue-element-admin">Vue Element Admin</a></li></ul></li><li>后端框架<ul><li><a href="https://docs.jumpserver.org/zh/docs/introduce.html">Jumpserver开源堡垒机</a></li><li><a href="http://dubbo.apache.org/zh-cn/">Apache Dubbo</a></li></ul></li><li>微服务架构<ul><li><a href="https://www.nginx.com/blog/introducing-the-nginx-microservices-reference-architecture/">Introducing the Microservices Reference Architecture from NGINX</a></li><li><a href="https://docshome.gitbooks.io/microservices/">微服务：从设计到部署</a></li></ul></li><li>日志框架</li><li>数据分析</li></ul><h3 id="管理"><a class="markdownIt-Anchor" href="#管理"></a> 管理</h3><ul><li>软件架构模式<ul><li><a href="http://ifeve.com/software-architecture-patterns/">第一章分层架构（上）</a></li><li><a href="http://ifeve.com/%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e6%a8%a1%e5%bc%8f-%e7%ac%ac%e4%b8%80%e7%ab%a0%e5%88%86%e5%b1%82%e6%9e%b6%e6%9e%84%e6%a8%a1%e5%bc%8f2/">第一章分层架构（下）</a></li><li><a href="http://ifeve.com/%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e6%a8%a1%e5%bc%8f-%e7%ac%ac%e4%ba%8c%e7%ab%a0%e4%ba%8b%e4%bb%b6%e9%a9%b1%e5%8a%a8%e6%9e%b6%e6%9e%84%e4%b8%8a/">第二章事件驱动架构(上)</a></li><li><a href="http://ifeve.com/%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e6%a8%a1%e5%bc%8f-%e7%ac%ac%e4%ba%8c%e7%ab%a0%e4%ba%8b%e4%bb%b6%e9%a9%b1%e5%8a%a8%e6%9e%b6%e6%9e%84%e4%b8%8b/">第二章事件驱动架构(下)</a></li><li><a href="http://ifeve.com/%e3%80%8a%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e6%a8%a1%e5%bc%8f%e3%80%8b-%e7%ac%ac%e4%b8%89%e7%ab%a0-%e5%be%ae%e5%86%85%e6%a0%b8%e7%b3%bb%e7%bb%9f%e7%bb%93%e6%9e%84/">第三章 微内核系统结构</a></li><li><a href="http://ifeve.com/%e3%80%8a%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e6%a8%a1%e5%bc%8f%e3%80%8b-%e7%ac%ac%e5%9b%9b%e7%ab%a0-%e5%be%ae%e6%9c%8d%e5%8a%a1%e6%a1%86%e6%9e%b6%e6%a8%a1%e5%bc%8f%ef%bc%88%e4%b8%8a%ef%bc%89/">第四章 微服务框架模式（上）</a></li><li><a href="http://ifeve.com/%e3%80%8a%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e6%a8%a1%e5%bc%8f%e3%80%8b-%e7%ac%ac%e5%9b%9b%e7%ab%a0-%e5%be%ae%e6%9c%8d%e5%8a%a1%e6%a1%86%e6%9e%b6%e6%a8%a1%e5%bc%8f%ef%bc%88%e4%b8%8b%ef%bc%89/">第四章 微服务框架模式（下）</a></li></ul></li></ul><h3 id="面试"><a class="markdownIt-Anchor" href="#面试"></a> 面试</h3><ul><li><a href="https://cyc2018.github.io/CS-Notes/">技术面必备的基础知识</a></li></ul><h3 id="资源下载"><a class="markdownIt-Anchor" href="#资源下载"></a> 资源下载</h3><h2 id="学习站点"><a class="markdownIt-Anchor" href="#学习站点"></a> 学习站点</h2><ul><li><a href="http://academictorrents.com/">Academic Torrents</a></li><li><a href="http://www.programcreek.com/">ProgramCreek</a></li><li><a href="https://pintia.cn/problem-sets">PTA</a></li><li><a href="https://classroom.udacity.com/me">Udacity</a></li><li><a href="https://www.icourse163.org/">中国大学MOOC</a></li><li><a href="https://www.oschina.net/">开源中国</a></li><li><a href="http://www.icourses.cn/home/">爱课程</a></li><li><a href="https://www.nowcoder.com/">牛客网</a></li><li><a href="https://www.coursera.org/">Coursera 课程</a></li><li><a href="https://stackoverflow.com/">Stack Overflow</a></li><li><a href="https://coolshell.cn/">酷壳</a></li></ul><h2 id="文献论文"><a class="markdownIt-Anchor" href="#文献论文"></a> 文献论文</h2><ul><li><a href="https://www.engineeringvillage.com/search/quick.url">Engineering Village</a></li><li><a href="https://link.springer.com/">Springer</a></li><li><a href="http://search.sciencemag.org/">Search Science</a></li><li><a href="http://www.wanfangdata.com.cn/index.html">万方数据知识服务平台</a></li><li><a href="https://www.nstl.gov.cn/">国家科技图书文献中心</a></li><li><a href="https://www.cnki.net/">中国知网</a></li><li><a href="http://aelab.net/">aedraw</a></li><li><a href="http://www.bzfxw.com/">学兔兔</a></li></ul><h2 id="uml-收集"><a class="markdownIt-Anchor" href="#uml-收集"></a> UML 收集</h2><ul><li><a href="https://www.processon.com/view/595daf26e4b068b0a241f7c2">财务组织</a></li><li><a href="https://www.processon.com/view/59e981a4e4b00842bddfbf65">电商购物支付流程中的支付结果回调处理流程</a></li><li><a href="https://www.processon.com/view/57357c30e4b0c102ad31b565">高性能MySQL总结</a></li><li><a href="https://www.processon.com/view/598e8a1ee4b0b83fa25e0445">工作常用辅助IT工具</a></li><li><a href="https://www.processon.com/view/5b03d1c6e4b01f32972b8b1e">管理员状态图</a></li><li><a href="https://www.processon.com/view/5b8f2a70e4b0d4d65bf6411c">互联网+政务服务技术体系建设指南</a></li><li><a href="https://www.processon.com/view/5a0d3b61e4b06c8e1091e2a7">互联网产品迭代反馈团队协作流程</a></li><li><a href="https://www.processon.com/view/54abbb84e4b0f90534fd0e49">计算机网络</a></li><li><a href="https://www.processon.com/view/5aa8b855e4b0a84684038ef7">技术架构</a></li><li><a href="https://www.processon.com/view/54bf441de4b0c7bde4e59403">架构图</a></li><li><a href="https://www.processon.com/view/590993c8e4b056fe6425a3a1">平台高可用小集</a></li><li><a href="https://www.processon.com/view/5a9cff92e4b04b1b69015a00">平台架构图</a></li><li><a href="https://www.processon.com/view/57ecb680e4b0300f4fbccadf#map">前端</a></li><li><a href="https://www.processon.com/view/5b691580e4b053a09c2823ee">身份认证方案</a></li><li><a href="https://www.processon.com/view/5a2654c6e4b0f3a79866ac4b">数据驱动</a></li><li><a href="https://www.processon.com/view/5afcdff3e4b02ec429d29d65">推送系统结构</a></li><li><a href="https://www.processon.com/view/58ba81bce4b0bb529f2428db">微服务</a></li><li><a href="https://www.processon.com/view/5b431563e4b00b08ad1306ba">微服务部署与监控运维架构图 </a></li><li><a href="https://www.processon.com/view/5bf51ecfe4b0f012f22bf240">微服务架构+DevOps</a></li><li><a href="https://www.processon.com/view/5a4c3d51e4b078cf1edacfe9">微机原理</a></li><li><a href="https://www.processon.com/view/5719ec36e4b005d06ff488de">微商城SAAS数据库表结构-公共功能业务</a></li><li><a href="https://www.processon.com/view/598d14a4e4b01618aacfe247">微信聊天原型图</a></li><li><a href="https://www.processon.com/view/5be10c0fe4b05aadb7d04072">物联网云平台架构设计</a></li><li><a href="https://www.processon.com/view/57862934e4b0a94dc24bbfe7">系统架构图</a></li><li><a href="https://www.processon.com/view/5a91170ce4b0615ac05e89f4">系统架构图1</a></li><li><a href="https://www.processon.com/view/59a681fde4b063c756f94ca0">系统框架图2</a></li><li><a href="https://www.processon.com/view/5aa63460e4b0d77c8a850fbb">业务流程</a></li><li><a href="https://www.processon.com/view/5a1be580e4b0b3ee0574811e">用户登录时序图</a></li><li><a href="https://www.processon.com/view/5a4ae442e4b0be852db6c490">用户画像系统架构设计</a></li><li><a href="https://www.processon.com/view/583e280de4b0e742e4524505">云架构图</a></li><li><a href="https://www.processon.com/view/5a77f599e4b059c41ab54de4">云平台系统架构图</a></li><li><a href="https://www.processon.com/view/5a8f6beae4b0874437cbee46">政务系统拓扑图</a></li><li><a href="https://www.processon.com/view/58e4541be4b0a2c5b1218349">Dubbo</a></li><li><a href="https://www.processon.com/view/587c6bf9e4b087b115ed5538">ERP结构图 总</a></li><li><a href="https://www.processon.com/view/5bc73d4ce4b0bd4db968ae41">ERP系统登录流程</a></li><li><a href="https://www.processon.com/view/59d9aa93e4b017b4197a15fe">IM 客户端架构 |</a></li><li><a href="https://www.processon.com/view/5ab09e3ae4b0e93533935bcc">Java架构师技术栈</a></li><li><a href="https://www.processon.com/view/59e874a6e4b0b640aeeca4ac">Linux命令</a></li><li><a href="https://www.processon.com/view/5993b471e4b06df7265b49c6">Mybatis架构源码分析流程</a></li><li><a href="https://www.processon.com/view/57b856d9e4b03e7bd5b0d74e">MySQL</a></li><li><a href="https://www.processon.com/view/5b16331be4b03f9d250f3183">spring cloud 微服务</a></li><li><a href="https://www.processon.com/view/5797120ae4b0683474301869">TCP正常状态变迁图 </a></li><li><a href="https://www.processon.com/view/534cc3ee0cf236ef7e6265cd">WebChat Routing Logic</a></li><li><a href="https://www.processon.com/view/59f43b0de4b0d53d97919482">webview架构图</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文档记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bookmarks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书单</title>
      <link href="/2020/01/29/000_%E4%B9%A6%E5%8D%95/"/>
      <url>/2020/01/29/000_%E4%B9%A6%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机"><a class="markdownIt-Anchor" href="#计算机"></a> 计算机</h2><table><thead><tr><th>科目</th><th>最佳书籍</th><th>最佳视频</th></tr></thead><tbody><tr><td>分布式系统</td><td>《分布式系统原理与范型》（中文第二版，英文第三版）</td><td></td></tr><tr><td>操作系统</td><td>《操作系统导论》</td><td>Berkeley CS 162</td></tr><tr><td>数学知识</td><td>《计算机科学中的数学》</td><td>Tom Leighton’s MIT 6.042J</td></tr><tr><td>数据库</td><td>《Readings in Database Systems》 （暂无中译本）</td><td>Joe Hellerstein’s Berkeley CS 186</td></tr><tr><td>算法与数据结构</td><td>《算法设计手册》</td><td>Steven Skiena’s lectures</td></tr><tr><td>编程</td><td>《计算机程序的构造和解释》</td><td>Brian Harvey’s Berkeley CS 61A</td></tr><tr><td>编程语言与编译器</td><td>《编译原理》</td><td>Alex Aiken’s course on Lagunita</td></tr><tr><td>计算机架构</td><td>《计算机组成与设计》</td><td>Berkeley CS 61C</td></tr><tr><td>计算机网络</td><td>《计算机网络：自顶向下方法》</td><td>Stanford CS 144</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 文档记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>增广贤文</title>
      <link href="/2020/01/29/%E5%A2%9E%E5%B9%BF%E8%B4%A4%E6%96%87/"/>
      <url>/2020/01/29/%E5%A2%9E%E5%B9%BF%E8%B4%A4%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>昔时贤文，诲汝谆谆，集韵增文，多见多闻。<br>观今宜鉴古，无古不成今。<br>知己知彼，将心比心。<br>酒逢知己饮，诗向会人吟。<br>相识满天下，知心能几人。<br>相逢好似初相识，到老终无怨恨心。<br>近水知鱼性，近山识鸟音。<br>易涨易退山溪水，易反易覆小人心。<br>运去金成铁，时来铁似金，读书须用意，一字值千金。<br>逢人且说三分话，未可全抛一片心。<br>有意栽花花不发，无心插柳柳成阴。<br>画虎画皮难画骨，知人知面不知心。<br>钱财如粪土，仁义值千金。<br>流水下滩非有意，白云出岫本无心。<br>当时若不登高望，谁信东流海洋深。<br>路遥知马力，事久见人心。<br>两人一般心，无钱堪买金，一人一般心，有钱难买针。<br>相见易得好，久住难为人。<br>马行无力皆因瘦，人不风流只为贫。<br>饶人不是痴汉，痴汉不会饶人。<br>是亲不是亲，非亲却是亲。<br>美不美，乡中水，亲不亲，故乡人。<br>莺花犹怕春光老，岂可教人枉度春。<br>相逢不饮空归去，洞口桃花也笑人。<br>红粉佳人休使老，风流浪子莫教贫。<br>在家不会迎宾客，出外方知少主人。<br>黄金无假，阿魏无真。<br>客来主不顾，应恐是痴人。<br>贫居闹市无人问，富在深山有远亲。<br>谁人背后无人说，哪个人前不说人。<br>有钱道真语，无钱语不真。<br>不信但看筵中酒，杯杯先劝有钱人。<br>闹里有钱，静处安身。<br>来如风雨，去似微尘。<br>长江后浪推前浪，世上新人赶旧人。<br>近水楼台先得月，向阳花木早逢春。<br>莫道君行早，更有早行人。<br>莫信直中直，须防仁不仁。<br>山中有直树，世上无直人。<br>自恨枝无叶，莫怨太阳偏。<br>大家都是命，半点不由人。<br>一年之计在于春，一日之计在于寅，一家之计在于和，一生之计在于勤。<br>责人之心责己，恕己之心恕人。<br>守口如瓶，防意如城。<br>宁可人负我，切莫我负人。<br>再三须慎意，第一莫欺心。<br>虎生犹可近，人熟不堪亲。<br>来说是非者，便是是非人。<br>远水难救近火，远亲不如近邻。<br>有茶有酒多兄弟，急难何曾见一人。<br>人情似纸张张薄，世事如棋局局新。<br>山中也有千年树，世上难逢百岁人。<br>力微休负重，言轻莫劝人。<br>无钱休入众，遭难莫寻亲。<br>平生莫作皱眉事，世上应无切齿人。<br>士者国之宝，儒为席上珍。<br>若要断酒法，醒眼看醉人。<br>求人须求大丈夫，济人须济急时无。<br>渴时一滴如甘露，醉后添杯不如无。<br>久住令人贱，频来亲也疏。<br>酒中不语真君子，财上分明大丈夫。<br>出家如初，成佛有余。<br>积金千两，不如明解经书。<br>养子不教如养驴，养女不教如养猪。<br>有田不耕仓廪虚，有书不读子孙愚。<br>仓廪虚兮岁月乏，子孙愚兮礼义疏。<br>同君一席话，胜读十年书。<br>人不通今古，马牛如襟裾。<br>茫茫四海人无数，哪个男儿是丈夫。<br>白酒酿成缘好客，黄金散尽为收书。<br>救人一命，胜造七级浮屠。<br>城门失火，殃及池鱼。<br>庭前生瑞草，好事不如无。<br>欲求生富贵，须下死工夫。<br>百年成之不足，一旦败之有余。<br>人心似铁，官法如炉。<br>善化不足，恶化有余。<br>水太清则无鱼，人至察则无徒。<br>知者减半，省者全无。<br>在家由父，出家从夫。<br>痴人畏妇，贤女敬夫。<br>是非终日有，不听自然无。<br>宁可正而不足，不可邪而有余。<br>宁可信其有，不可信其无。<br>竹篱茅舍风光好，道院僧堂终不如。<br>命里有时终须有，命里无时莫强求。<br>道院迎仙客，书堂隐相儒。<br>庭栽栖凤竹，池养化龙鱼。<br>结交须胜己，似我不如无。<br>但看三五日，相见不如初。<br>人情似水分高下，世事如云任卷舒。<br>会说说都是，不会说无礼。<br>磨刀恨不利，刀利伤人指。<br>求财恨不得，财多害自己。<br>知足常足，终身不辱。<br>知止常止，终身不耻。<br>有福伤财，无福伤己。<br>差之毫厘，失之千里。<br>若登高必自卑，若涉远必自迩。<br>三思而行，再思可矣。<br>使口不如自走，求人不如求己。<br>小时是兄弟，长大各乡里。<br>妒财莫妒食，怨生莫怨死。<br>人见白头嗔，我见白头喜。<br>多少少年亡，不到白头死。<br>墙有逢，壁有耳。<br>好事不出门，恶事传千里。<br>贼是小人，知过君子。<br>君子固穷，小人穷斯滥也。<br>贫穷自在，富贵多忧。<br>不以我为德，反以我为仇。<br>宁向直中取，不可曲中求。<br>人无远虑，必有近忧。<br>知我者为我心忧，不知我者谓我何求。<br>晴天不肯去，只待雨淋头。<br>成事莫说，覆水难收。<br>是非只为多开口，烦恼皆因强出头。<br>忍得一时之气，免得百日之忧。<br>近来学得乌龟法，得缩头时且缩头。<br>惧法朝朝乐，欺公日日忧。<br>人生一世，草生一春。<br>黑发不知勤学早，看看又是白头翁。<br>月到十五光明少，人到中年万事休。<br>儿孙自有儿孙福，莫为儿孙作马牛。<br>人生不满百，常怀千岁忧。<br>今朝有酒今朝醉，明日愁来明日忧。<br>路逢险处难回避，事到头来不自由。<br>药能医假病，酒不解真愁。<br>人贫不语，水平不流。<br>一家有女百家求，一马不行百马忧。<br>有花方酌酒，无月不登楼。<br>三杯通大道，一醉解千愁。<br>深山毕竟藏猛虎，大海终须纳细流。<br>惜花须检点，爱月不梳头。<br>大抵选他肌骨好，不擦红粉也风流。<br>受恩深处宜先退，得意浓时便可休。<br>莫待是非来入耳，从前恩爱反为仇。<br>留得五湖明月在，不愁无处下金钩。<br>休别有鱼处，莫恋浅滩头。<br>去时终须去，再三留不住。<br>忍一句，息一怒，饶一着，退一步。<br>三十不豪，四十不富，五十将来寻死路。<br>生不论魂，死不认尸。<br>父母恩深终有别，夫妻义重也分离。<br>人生似鸟同林宿，大限来时各自飞。<br>人善被人欺，马善被人骑。<br>人无横财不富，马无野草不肥。<br>人恶人怕天不怕，人善人欺天不欺。<br>善恶到头终有报，只争来早与来迟。<br>黄河尚有澄清日，岂可人无得运时。<br>得宠思辱，安居虑危。<br>念念有如临敌日，心心常似过桥时。<br>英雄行险道，富贵似花枝。<br>人情莫道春光好，只怕秋来有冷时。<br>送君千里，终须一别。<br>但将冷眼看螃蟹，看你横行到几时。<br>见事莫说，问事不知。<br>闲事休管，无事早归。<br>假缎染就真红色，也被旁人说是非。<br>善事可作，恶事莫为。<br>许人一物，千金不移。<br>龙生龙子，虎生豹儿。<br>龙游浅水遭虾戏，虎落平阳被犬欺。<br>一举首登龙虎榜，十年身到风凰池。<br>十年窗下无人问，一举成名天下知。<br>酒债寻常行处有，人生七十古来稀。<br>养儿待老，积谷防饥。<br>鸡豚狗彘之畜，无失其时。<br>数家之口，可以无饥矣。<br>常将有日思无日，莫把无时当有时。<br>时来风送腾王阁，运去雷轰荐福碑。<br>入门休问荣枯事，观看容颜便得知。<br>官清书吏瘦，神灵庙祝肥。<br>息却雷霆之怒，罢却虎狼之威。<br>饶人算人之本，输人算人之机。<br>好言难得，恶语易施。<br>一言既出，驷马难追。<br>道吾好者是吾贼，道吾恶者是吾师。<br>路逢侠客须呈剑，不是才人莫献诗。<br>三人同行，必有我师，择其善者而从之，其不善者而改之。<br>少壮不努力，老大徒悲伤。<br>人有善愿，天必佑之。<br>莫饮卯时酒，昏昏醉到酉。<br>莫骂酉时妻，一夜受孤凄。<br>种麻得麻，种豆得豆。<br>天眼恢恢，疏而不漏。<br>见官莫向前，做客莫在后。<br>宁添一斗，莫添一口。<br>螳螂捕蝉，岂知黄雀在后。<br>不求金玉重重贵，但愿儿孙个个贤。<br>一日夫妻，百世姻缘。<br>百世修来同船渡，千世修来共枕眠。<br>杀人一万，自损三千。<br>伤人一语，利如刀割。<br>枯木逢春犹再发，人无两度再少年。<br>未晚先投宿，鸡鸣早看天。<br>将相胸前堪走马，公候肚里好撑船。<br>富人思来年，穷人思眼前。<br>世上若要人情好，赊去物件莫取钱。<br>死生有命，富贵在天。<br>击石原有火，不击乃无烟。<br>为学始知道，不学亦徒然。<br>莫笑他人老，终须还到老。<br>但能依本分，终须无烦恼。<br>君子爱财，取之有道。<br>贞妇爱色，纳之以礼。<br>善有善报，恶有恶报。<br>不是不报，日子不到。<br>人而无信，不知其可也。<br>一人道好，千人传实。<br>凡事要好，须问三老。<br>若争小可，便失大道。<br>年年防饥，夜夜防盗。<br>学者如禾如稻，不学者如蒿如草。<br>遇饮酒时须饮酒，得高歌处且高歌。<br>因风吹火，用力不多。<br>不因渔父引，怎得见波涛。<br>无求到处人情好，不饮从他酒价高。<br>知事少时烦恼少，识人多处是非多。<br>入山不怕伤人虎，只怕人情两面刀。<br>强中更有强中手，恶人须用恶人磨。<br>会使不在家豪富，风流不用着衣多。<br>光阴似箭，日月如梭。<br>天时不如地利，地利不如人和。<br>黄金未为贵，安乐值钱多。<br>世上万般皆下品，思量唯有读书高。<br>世间好语书说尽，天下名山僧占多。<br>为善最乐，为恶难逃。<br>羊有跪乳之恩，鸦有反哺之义。<br>你急他未急，人闲心不闲。<br>隐恶扬善，执其两端。<br>妻贤夫祸少，子孝父心宽。<br>既坠釜甑，反顾无益。<br>翻覆之水，收之实难。<br>人生知足何时足，人老偷闲且是闲。<br>但有绿杨堪系马，处处有路透长安。<br>见者易，学者难。<br>莫将容易得，便作等闲看。<br>用心计较般般错，退步思量事事难。<br>道路各别，养家一般。<br>从俭入奢易，从奢入俭难。<br>知音说与知音听，不是知音莫与弹。<br>点石化为金，人心犹未足。<br>信了肚，卖了屋。<br>他人观花，不涉你目。<br>他人碌碌，不涉你足。<br>谁人不爱子孙贤，谁人不爱千钟粟。<br>莫把真心空计较，五行不是这题目。<br>与人不和，劝人养鹅。<br>与人不睦，劝人架屋。<br>但行好事，莫问前程。<br>河狭水急，人急计生。<br>明知山有虎，莫向虎山行。<br>路不行不到，事不为不成。<br>人不劝不善，钟不打不鸣。<br>无钱方断酒，临老始看经。<br>点塔七层，不如暗处一灯。<br>万事劝人休瞒昧，举头三尺有神明。<br>但存方寸土，留与子孙耕。<br>灭却心头火，剔起佛前灯。<br>惺惺常不足，懵懵作公卿。<br>众星朗朗，不如孤月独明。<br>兄弟相害，不如自生。<br>合理可作，小利莫争。<br>牡丹花好空入目，枣花虽小结实成。<br>欺老莫欺小，欺人心不明。<br>随分耕锄收地利，他时饱满谢苍天。<br>得忍且忍，得耐且耐。<br>不忍不耐，小事成大。<br>相论逞英雄，家计渐渐退。<br>贤妇令夫贵，恶妇令夫败。<br>一人有庆，兆民咸赖。<br>人老心未老，人穷志莫穷。<br>人无千日好，花无百日红。<br>杀人可恕，情理难容。<br>乍富不知新受用，乍贫难改旧家风。<br>座上客常满，樽中酒不空。<br>屋漏更遭连年雨，行船又遇打头风。<br>笋因落箨方成竹，鱼为奔波始化龙。<br>记得少年骑竹马，看看又是白头翁。<br>礼义生于富足，盗贼出于贫穷。<br>天上众星皆拱北，世间无水不朝东。<br>君子安平，达人知命。<br>忠言逆耳利于行，良药苦口利于病。<br>顺天者存，逆天者亡。<br>人为财死，鸟为食亡。<br>夫妻相合好，琴瑟与笙簧。<br>有儿贫不久，无子富不长。<br>善必寿老，恶必早亡。<br>爽口食多偏作药，快心事过恐生殃。<br>富贵定要安本分，贫穷不必枉思量。<br>画水无风空作浪，绣花虽好不闻香。<br>贪他一斗米，失却半年粮。<br>争他一脚豚，反失一肘羊。<br>龙归晚洞云犹湿，麝过春山草木香。<br>平生只会量人短，何不回头把自量。<br>见善如不及，见恶如探汤。<br>人贫志短，马瘦毛长。<br>自家心里急，他人未知忙。<br>贫无达士将金赠，病有高人说药方。<br>触来莫与说，事过心清凉。<br>秋至满山多秀色，春来无处不花香。<br>凡人不可貌相，海水不可斗量。<br>清清之水，为土所防。<br>济济之士，为酒所伤。<br>蒿草之下，或有兰香。<br>茅茨之屋，或有侯王。<br>无限朱门生饿殍，几多白屋出卿。<br>醉后乾坤大，壶中日月长。<br>万事皆已定，浮生空白茫。<br>千里送毫毛，礼轻仁义重。<br>一人传虚，百人传实。<br>世事明如镜，前程暗似漆。<br>光阴黄金难买，一世如驹过隙。<br>良田万倾，日食一升。<br>大厦千间，夜眠八尺。<br>千经万典，孝义为先。<br>一字入公门，九牛拖不出。<br>衙门八字开，有理无钱莫进来。<br>富从升合起，贫因不算来。<br>家中无才子，官从何处来。<br>万事不由人计较，一生都是命安排。<br>急行慢行，前程只有多少路。<br>人间私语，天闻若雷。<br>暗室亏心，神目如电。<br>一毫之恶，劝人莫作。<br>一毫之善，与人方便。<br>欺人是祸，饶人是福。<br>天眼恢恢，报应甚速。<br>圣贤言语，神钦鬼伏。<br>人各有心，心各有见。<br>口说不如身逢，耳闻不如目见。<br>养军千日，用在一朝。<br>国清才子贵，家富小儿骄。<br>利刀割体痕易合，恶语伤人恨不消。<br>公道世间唯白发，贵人头上不曾饶。<br>有钱堪出众，无衣懒出门。<br>为官须作相，及第必争先。<br>苗从地发，树向枝分。<br>父子和而家不退，兄弟和而家不分。<br>官有正条，民有和约。<br>闲时不烧香，急时抱佛脚。<br>幸生太平无事日，恐逢年老不多时。<br>国乱思良将，家贫思贤妻。<br>池塘积水须防旱，田地勤耕足养家。<br>根深不怕风摇动，树正无愁月影斜。<br>奉劝君子，各宜守己。<br>只此程式，万无一失。</p>]]></content>
      
      
      <categories>
          
          <category> 文学摘录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>华山攻略</title>
      <link href="/2020/01/29/%E5%8D%8E%E5%B1%B1%E6%94%BB%E7%95%A5/"/>
      <url>/2020/01/29/%E5%8D%8E%E5%B1%B1%E6%94%BB%E7%95%A5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 文档记录 </category>
          
          <category> 旅游攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>待办</title>
      <link href="/2020/01/29/000_%E5%BE%85%E5%8A%9E/"/>
      <url>/2020/01/29/000_%E5%BE%85%E5%8A%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="待办"><a class="markdownIt-Anchor" href="#待办"></a> 待办</h2><ul><li>整理10篇印象笔记</li><li>整理华山攻略</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIwMDY0Nzk2Mw==&amp;mid=2650320998&amp;idx=1&amp;sn=dc6d76e78cd8cc6694941fd6ff1ad247&amp;chksm=8ef5e412b9826d049c7375c7ee5a1090ae3f07b23ba5c7e8967afe6344a1a5bfcd389e18e7b9&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1580441753273&amp;sharer_shareid=a13757509c959280de99eee610e2d081#rd">Spring Boot 与微服务从0到1的实践</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文档记录 </category>
          
          <category> 待办列表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待办 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis安装设置及常用命令</title>
      <link href="/2020/01/29/Redis%E5%AE%89%E8%A3%85%E8%AE%BE%E7%BD%AE%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/01/29/Redis%E5%AE%89%E8%A3%85%E8%AE%BE%E7%BD%AE%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="安装配置"><a class="markdownIt-Anchor" href="#安装配置"></a> 安装|配置</h2><h3 id="linux版"><a class="markdownIt-Anchor" href="#linux版"></a> linux版</h3><p>linux版的可以到https://redis.io/ 或者是 <a href="http://www.redis.cn/">http://www.redis.cn/</a> 下载需要版本的源代码。<br>因为是源代码且底层是c开发的，所以需要c的编译环境。<br>如果make命令能够使用，则证明已经有了c环境了。没有c环境则可以使用yum install gcc-c++</p><p>安装步骤</p><ol><li>把redis的源码包上传到linux系统，如果直接在Linux环境下下载的，不需要这步。</li><li>使用tar -zxvf redis-3.x.x.tar.gz解压源码包</li><li>进入解压出来的目录redis-3.x.x</li><li>使用make install PREFIX=编译源码，生成可执行文件</li></ol><p>- PREFIX参数：指定安装目录</p><h3 id="redis的启动"><a class="markdownIt-Anchor" href="#redis的启动"></a> redis的启动</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ini</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[root@iZ28xuvyce3Z bin]</span><span class="comment"># ./redis-server redis.conf</span></span><br></pre></td></tr></table></figure></div><h3 id="redis的关闭"><a class="markdownIt-Anchor" href="#redis的关闭"></a> Redis的关闭</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ini</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[root@iZ28xuvyce3Z bin]</span><span class="comment"># ps aux | grep redis</span></span><br><span class="line"><span class="section">[root@iZ28xuvyce3Z bin]</span><span class="comment"># kill xxx</span></span><br></pre></td></tr></table></figure></div><p>PS：也可以使用命令关闭使用命令关闭：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ini</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[root@iZ28xuvyce3Z bin]</span><span class="comment"># ./redis-server redis.conf</span></span><br><span class="line"><span class="section">[root@iZ28xuvyce3Z bin]</span><span class="comment"># ps aux | grep redis</span></span><br><span class="line">  root 1121 0.0 0.7 140840 7460 ? Ssl 15:14 0:00 ./redis-server 127.0.0.1:6379</span><br><span class="line">  root 1139 0.0 0.0 110216 900 pts/0 S+ 15:14 0:00 grep --color=auto redis</span><br><span class="line"><span class="section">[root@iZ28xuvyce3Z bin]</span><span class="comment"># ./redis-cli -p 6379 shutdown</span></span><br><span class="line"><span class="section">[root@iZ28xuvyce3Z bin]</span><span class="comment"># ps aux | grep redis</span></span><br><span class="line">  root 1189 0.0 0.0 110216 896 pts/0 S+ 15:14 0:00 grep --color=auto redis</span><br><span class="line">  root 1892 0.1 0.6 140836 6572 ? Ssl Aug19 146:42 /usr/local/redis/bin/redis-server 127.0.0.1:6379</span><br><span class="line"><span class="section">[root@iZ28xuvyce3Z bin]</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></div><h2 id="redisconf设置详解"><a class="markdownIt-Anchor" href="#redisconf设置详解"></a> Redis.conf设置详解</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis 配置文件示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当你需要为某个配置项指定内存大小的时候，必须要带上单位，</span></span><br><span class="line"><span class="comment"># 通常的格式就是 1k 5gb 4m 等酱紫：</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1k  =&gt; 1000 bytes</span></span><br><span class="line"><span class="comment"># 1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="comment"># 1m  =&gt; 1000000 bytes</span></span><br><span class="line"><span class="comment"># 1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="comment"># 1g  =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="comment"># 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 单位是不区分大小写的，你写 1K 5GB 4M 也行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## INCLUDES ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假如说你有一个可用于所有的 redis server 的标准配置模板，</span></span><br><span class="line"><span class="comment"># 但针对某些 server 又需要一些个性化的设置，</span></span><br><span class="line"><span class="comment"># 你可以使用 include 来包含一些其他的配置文件，这对你来说是非常有用的。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 但是要注意哦，include 是不能被 config rewrite 命令改写的</span></span><br><span class="line"><span class="comment"># 由于 redis 总是以最后的加工线作为一个配置指令值，所以你最好是把 include 放在这个文件的最前面，</span></span><br><span class="line"><span class="comment"># 以避免在运行时覆盖配置的改变，相反，你就把它放在后面（外国人真啰嗦）。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># include /path/to/local.conf</span></span><br><span class="line"><span class="comment"># include /path/to/other.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################ 常用 #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下 redis 不是作为守护进程运行的，如果你想让它在后台运行，你就把它改成 yes。</span></span><br><span class="line"><span class="comment"># 当redis作为守护进程运行的时候，它会写一个 pid 到 /var/run/redis.pid 文件里面。</span></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当redis作为守护进程运行的时候，它会把 pid 默认写到 /var/run/redis.pid 文件里面，</span></span><br><span class="line"><span class="comment"># 但是你可以在这里自己制定它的文件位置。</span></span><br><span class="line">pidfile /var/run/redis.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听端口号，默认为 6379，如果你设为 0 ，redis 将不在 socket 上监听任何客户端连接。</span></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP 监听的最大容纳数量</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 在高并发的环境下，你需要把这个值调高以避免客户端连接缓慢的问题。</span></span><br><span class="line"><span class="comment"># Linux 内核会一声不响的把这个值缩小成 /proc/sys/net/core/somaxconn 对应的值，</span></span><br><span class="line"><span class="comment"># 所以你要修改这两个值才能达到你的预期。</span></span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下，redis 在 server 上所有有效的网络接口上监听客户端连接。</span></span><br><span class="line"><span class="comment"># 你如果只想让它在一个网络接口上监听，那你就绑定一个IP或者多个IP。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 示例，多个IP用空格隔开:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># bind 192.168.1.100 10.0.0.1</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 unix socket 的路径。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># unixsocket /tmp/redis.sock</span></span><br><span class="line"><span class="comment"># unixsocketperm 755</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定在一个 client 空闲多少秒之后关闭连接（0 就是不管它）</span></span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp 心跳包。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 如果设置为非零，则在与客户端缺乏通讯的时候使用 SO_KEEPALIVE 发送 tcp acks 给客户端。</span></span><br><span class="line"><span class="comment"># 这个之所有有用，主要由两个原因：</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) 防止死的 peers</span></span><br><span class="line"><span class="comment"># 2) Take the connection alive from the point of view of network</span></span><br><span class="line"><span class="comment">#    equipment in the middle.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># On Linux, the specified value (in seconds) is the period used to send ACKs.</span></span><br><span class="line"><span class="comment"># Note that to close the connection the double of the time is needed.</span></span><br><span class="line"><span class="comment"># On other kernels the period depends on the kernel configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A reasonable value for this option is 60 seconds.</span></span><br><span class="line"><span class="comment"># 推荐一个合理的值就是60秒</span></span><br><span class="line">tcp-keepalive 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义日志级别。</span></span><br><span class="line"><span class="comment"># 可以是下面的这些值：</span></span><br><span class="line"><span class="comment"># debug (适用于开发或测试阶段)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (适用于生产环境)</span></span><br><span class="line"><span class="comment"># warning (仅仅一些重要的消息被记录)</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定日志文件的位置</span></span><br><span class="line">logfile ""</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要想把日志记录到系统日志，就把它改成 yes，</span></span><br><span class="line"><span class="comment"># 也可以可选择性的更新其他的syslog 参数以达到你的要求</span></span><br><span class="line"><span class="comment"># syslog-enabled no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 syslog 的 identity。</span></span><br><span class="line"><span class="comment"># syslog-ident redis</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 syslog 的 facility，必须是 USER 或者是 LOCAL0-LOCAL7 之间的值。</span></span><br><span class="line"><span class="comment"># syslog-facility local0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置数据库的数目。</span></span><br><span class="line"><span class="comment"># 默认数据库是 DB 0，你可以在每个连接上使用 select &lt;dbid&gt; 命令选择一个不同的数据库，</span></span><br><span class="line"><span class="comment"># 但是 dbid 必须是一个介于 0 到 databasees - 1 之间的值</span></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"><span class="comment">################################ 快照 ################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 存 DB 到磁盘：</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   格式：save &lt;间隔时间（秒）&gt; &lt;写入次数&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   根据给定的时间间隔和写入次数将数据保存到磁盘</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   下面的例子的意思是：</span></span><br><span class="line"><span class="comment">#   900 秒内如果至少有 1 个 key 的值变化，则保存</span></span><br><span class="line"><span class="comment">#   300 秒内如果至少有 10 个 key 的值变化，则保存</span></span><br><span class="line"><span class="comment">#   60 秒内如果至少有 10000 个 key 的值变化，则保存</span></span><br><span class="line"><span class="comment">#　　</span></span><br><span class="line"><span class="comment">#   注意：你可以注释掉所有的 save 行来停用保存功能。</span></span><br><span class="line"><span class="comment">#   也可以直接一个空字符串来实现停用：</span></span><br><span class="line"><span class="comment">#   save ""</span></span><br><span class="line"></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，</span></span><br><span class="line"><span class="comment"># 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，</span></span><br><span class="line"><span class="comment"># 否则就会没人注意到灾难的发生。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 然而你要是安装了靠谱的监控，你可能不希望 redis 这样做，那你就改成 no 好了。</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否在 dump .rdb 数据库的时候使用 LZF 压缩字符串</span></span><br><span class="line"><span class="comment"># 默认都设为 yes</span></span><br><span class="line"><span class="comment"># 如果你希望保存子进程节省点 cpu ，你就设置它为 no ，</span></span><br><span class="line"><span class="comment"># 不过这个数据集可能就会比较大</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否校验rdb文件</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 dump 的文件位置</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作目录</span></span><br><span class="line"><span class="comment"># 例如上面的 dbfilename 只指定了文件名，</span></span><br><span class="line"><span class="comment"># 但是它会写入到这个目录下。这个配置项一定是个目录，而不能是文件名。</span></span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line"><span class="comment">################################# 主从复制 #################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主从复制。使用 slaveof 来让一个 redis 实例成为另一个reids 实例的副本。</span></span><br><span class="line"><span class="comment"># 注意这个只需要在 slave 上配置。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 master 需要密码认证，就在这里设置</span></span><br><span class="line"><span class="comment"># masterauth &lt;master-password&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当一个 slave 与 master 失去联系，或者复制正在进行的时候，</span></span><br><span class="line"><span class="comment"># slave 可能会有两种表现：</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) 如果为 yes ，slave 仍然会应答客户端请求，但返回的数据可能是过时，</span></span><br><span class="line"><span class="comment">#    或者数据可能是空的在第一次同步的时候</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2) 如果为 no ，在你执行除了 info he salveof 之外的其他命令时，</span></span><br><span class="line"><span class="comment">#    slave 都将返回一个 "SYNC with master in progress" 的错误，</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以配置一个 slave 实体是否接受写入操作。</span></span><br><span class="line"><span class="comment"># 通过写入操作来存储一些短暂的数据对于一个 slave 实例来说可能是有用的，</span></span><br><span class="line"><span class="comment"># 因为相对从 master 重新同步数而言，据数据写入到 slave 会更容易被删除。</span></span><br><span class="line"><span class="comment"># 但是如果客户端因为一个错误的配置写入，也可能会导致一些问题。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 从 redis 2.6 版起，默认 slaves 都是只读的。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> read only slaves are not designed to be exposed to untrusted clients</span></span><br><span class="line"><span class="comment"># on the internet. It's just a protection layer against misuse of the instance.</span></span><br><span class="line"><span class="comment"># Still a read only slave exports by default all the administrative commands</span></span><br><span class="line"><span class="comment"># such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span></span><br><span class="line"><span class="comment"># security of read only slaves using 'rename-command' to shadow all the</span></span><br><span class="line"><span class="comment"># administrative / dangerous commands.</span></span><br><span class="line"><span class="comment"># 注意：只读的 slaves 没有被设计成在 internet 上暴露给不受信任的客户端。</span></span><br><span class="line"><span class="comment"># 它仅仅是一个针对误用实例的一个保护层。</span></span><br><span class="line">slave-read-only yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># Slaves 在一个预定义的时间间隔内发送 ping 命令到 server 。</span></span><br><span class="line"><span class="comment"># 你可以改变这个时间间隔。默认为 10 秒。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># repl-ping-slave-period 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following option sets the replication timeout for:</span></span><br><span class="line"><span class="comment"># 设置主从复制过期时间</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Bulk transfer I/O during SYNC, from the point of view of slave.</span></span><br><span class="line"><span class="comment"># 2) Master timeout from the point of view of slaves (data, pings).</span></span><br><span class="line"><span class="comment"># 3) Slave timeout from the point of view of masters (REPLCONF ACK pings).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is important to make sure that this value is greater than the value</span></span><br><span class="line"><span class="comment"># specified for repl-ping-slave-period otherwise a timeout will be detected</span></span><br><span class="line"><span class="comment"># every time there is low traffic between the master and the slave.</span></span><br><span class="line"><span class="comment"># 这个值一定要比 repl-ping-slave-period 大</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># repl-timeout 60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable TCP_NODELAY on the slave socket after SYNC?</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you select "yes" Redis will use a smaller number of TCP packets and</span></span><br><span class="line"><span class="comment"># less bandwidth to send data to slaves. But this can add a delay for</span></span><br><span class="line"><span class="comment"># the data to appear on the slave side, up to 40 milliseconds with</span></span><br><span class="line"><span class="comment"># Linux kernels using a default configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you select "no" the delay for data to appear on the slave side will</span></span><br><span class="line"><span class="comment"># be reduced but more bandwidth will be used for replication.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default we optimize for low latency, but in very high traffic conditions</span></span><br><span class="line"><span class="comment"># or when the master and slaves are many hops away, turning this to "yes" may</span></span><br><span class="line"><span class="comment"># be a good idea.</span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主从复制容量大小。这个 backlog 是一个用来在 slaves 被断开连接时</span></span><br><span class="line"><span class="comment"># 存放 slave 数据的 buffer，所以当一个 slave 想要重新连接，通常不希望全部重新同步，</span></span><br><span class="line"><span class="comment"># 只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The biggest the replication backlog, the longer the time the slave can be</span></span><br><span class="line"><span class="comment"># disconnected and later be able to perform a partial resynchronization.</span></span><br><span class="line"><span class="comment"># 这个值越大，salve 可以断开连接的时间就越长。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The backlog is only allocated once there is at least a slave connected.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># repl-backlog-size 1mb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># After a master has no longer connected slaves for some time, the backlog</span></span><br><span class="line"><span class="comment"># will be freed. The following option configures the amount of seconds that</span></span><br><span class="line"><span class="comment"># need to elapse, starting from the time the last slave disconnected, for</span></span><br><span class="line"><span class="comment"># the backlog buffer to be freed.</span></span><br><span class="line"><span class="comment"># 在某些时候，master 不再连接 slaves，backlog 将被释放。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A value of 0 means to never release the backlog.</span></span><br><span class="line"><span class="comment"># 如果设置为 0 ，意味着绝不释放 backlog 。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># repl-backlog-ttl 3600</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 master 不能正常工作的时候，Redis Sentinel 会从 slaves 中选出一个新的 master，</span></span><br><span class="line"><span class="comment"># 这个值越小，就越会被优先选中，但是如果是 0 ， 那是意味着这个 slave 不可能被选中。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 默认优先级为 100。</span></span><br><span class="line">slave-priority 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># It is possible for a master to stop accepting writes if there are less than</span></span><br><span class="line"><span class="comment"># N slaves connected, having a lag less or equal than M seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The N slaves need to be in "online" state.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The lag in seconds, that must be &lt;= the specified value, is calculated from</span></span><br><span class="line"><span class="comment"># the last ping received from the slave, that is usually sent every second.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This option does not GUARANTEES that N replicas will accept the write, but</span></span><br><span class="line"><span class="comment"># will limit the window of exposure for lost writes in case not enough slaves</span></span><br><span class="line"><span class="comment"># are available, to the specified number of seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For example to require at least 3 slaves with a lag &lt;= 10 seconds use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># min-slaves-to-write 3</span></span><br><span class="line"><span class="comment"># min-slaves-max-lag 10</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Setting one or the other to 0 disables the feature.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default min-slaves-to-write is set to 0 (feature disabled) and</span></span><br><span class="line"><span class="comment"># min-slaves-max-lag is set to 10.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## 安全 ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other</span></span><br><span class="line"><span class="comment"># commands.  This might be useful in environments in which you do not trust</span></span><br><span class="line"><span class="comment"># others with access to the host running redis-server.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This should stay commented out for backward compatibility and because most</span></span><br><span class="line"><span class="comment"># people do not need auth (e.g. they run their own servers).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Warning: since Redis is pretty fast an outside user can try up to</span></span><br><span class="line"><span class="comment"># 150k passwords per second against a good box. This means that you should</span></span><br><span class="line"><span class="comment"># use a very strong password otherwise it will be very easy to break.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 设置认证密码</span></span><br><span class="line"><span class="comment"># requirepass foobared</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Command renaming.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is possible to change the name of dangerous commands in a shared</span></span><br><span class="line"><span class="comment"># environment. For instance the CONFIG command may be renamed into something</span></span><br><span class="line"><span class="comment"># hard to guess so that it will still be available for internal-use tools</span></span><br><span class="line"><span class="comment"># but not available for general clients.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is also possible to completely kill a command by renaming it into</span></span><br><span class="line"><span class="comment"># an empty string:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># rename-command CONFIG ""</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please note that changing the name of commands that are logged into the</span></span><br><span class="line"><span class="comment"># AOF file or transmitted to slaves may cause problems.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################### 限制 ####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the max number of connected clients at the same time. By default</span></span><br><span class="line"><span class="comment"># this limit is set to 10000 clients, however if the Redis server is not</span></span><br><span class="line"><span class="comment"># able to configure the process file limit to allow for the specified limit</span></span><br><span class="line"><span class="comment"># the max number of allowed clients is set to the current file limit</span></span><br><span class="line"><span class="comment"># minus 32 (as Redis reserves a few file descriptors for internal uses).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 一旦达到最大限制，redis 将关闭所有的新连接</span></span><br><span class="line"><span class="comment"># 并发送一个‘max number of clients reached’的错误。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># maxclients 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你设置了这个值，当缓存的数据容量达到这个值， redis 将根据你选择的</span></span><br><span class="line"><span class="comment"># eviction 策略来移除一些 keys。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 如果 redis 不能根据策略移除 keys ，或者是策略被设置为 ‘noeviction’，</span></span><br><span class="line"><span class="comment"># redis 将开始响应错误给命令，如 set，lpush 等等，</span></span><br><span class="line"><span class="comment"># 并继续响应只读的命令，如 get</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This option is usually useful when using Redis as an LRU cache, or to set</span></span><br><span class="line"><span class="comment"># a hard memory limit for an instance (using the 'noeviction' policy).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: If you have slaves attached to an instance with maxmemory on,</span></span><br><span class="line"><span class="comment"># the size of the output buffers needed to feed the slaves are subtracted</span></span><br><span class="line"><span class="comment"># from the used memory count, so that network problems / resyncs will</span></span><br><span class="line"><span class="comment"># not trigger a loop where keys are evicted, and in turn the output</span></span><br><span class="line"><span class="comment"># buffer of slaves is full with DELs of keys evicted triggering the deletion</span></span><br><span class="line"><span class="comment"># of more keys, and so forth until the database is completely emptied.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In short... if you have slaves attached it is suggested that you set a lower</span></span><br><span class="line"><span class="comment"># limit for maxmemory so that there is some free RAM on the system for slave</span></span><br><span class="line"><span class="comment"># output buffers (but this is not needed if the policy is 'noeviction').</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 最大使用内存</span></span><br><span class="line"><span class="comment"># maxmemory &lt;bytes&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大内存策略，你有 5 个选择。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># volatile-lru -&gt; remove the key with an expire set using an LRU algorithm</span></span><br><span class="line"><span class="comment"># volatile-lru -&gt; 使用 LRU 算法移除包含过期设置的 key 。</span></span><br><span class="line"><span class="comment"># allkeys-lru -&gt; remove any key accordingly to the LRU algorithm</span></span><br><span class="line"><span class="comment"># allkeys-lru -&gt; 根据 LRU 算法移除所有的 key 。</span></span><br><span class="line"><span class="comment"># volatile-random -&gt; remove a random key with an expire set</span></span><br><span class="line"><span class="comment"># allkeys-random -&gt; remove a random key, any key</span></span><br><span class="line"><span class="comment"># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="comment"># noeviction -&gt; don't expire at all, just return an error on write operations</span></span><br><span class="line"><span class="comment"># noeviction -&gt; 不让任何 key 过期，只是给写入操作返回一个错误</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> with any of the above policies, Redis will return an error on write</span></span><br><span class="line"><span class="comment">#       operations, when there are not suitable keys for eviction.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       At the date of writing this commands are: set setnx setex append</span></span><br><span class="line"><span class="comment">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span></span><br><span class="line"><span class="comment">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span></span><br><span class="line"><span class="comment">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span></span><br><span class="line"><span class="comment">#       getset mset msetnx exec sort</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># maxmemory-policy noeviction</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LRU and minimal TTL algorithms are not precise algorithms but approximated</span></span><br><span class="line"><span class="comment"># algorithms (in order to save memory), so you can tune it for speed or</span></span><br><span class="line"><span class="comment"># accuracy. For default Redis will check five keys and pick the one that was</span></span><br><span class="line"><span class="comment"># used less recently, you can change the sample size using the following</span></span><br><span class="line"><span class="comment"># configuration directive.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default of 5 produces good enough results. 10 Approximates very closely</span></span><br><span class="line"><span class="comment"># true LRU but costs a bit more CPU. 3 is very fast but not very accurate.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># maxmemory-samples 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################## APPEND ONLY MODE ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis asynchronously dumps the dataset on disk. This mode is</span></span><br><span class="line"><span class="comment"># good enough in many applications, but an issue with the Redis process or</span></span><br><span class="line"><span class="comment"># a power outage may result into a few minutes of writes lost (depending on</span></span><br><span class="line"><span class="comment"># the configured save points).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The Append Only File is an alternative persistence mode that provides</span></span><br><span class="line"><span class="comment"># much better durability. For instance using the default data fsync policy</span></span><br><span class="line"><span class="comment"># (see later in the config file) Redis can lose just one second of writes in a</span></span><br><span class="line"><span class="comment"># dramatic event like a server power outage, or a single write if something</span></span><br><span class="line"><span class="comment"># wrong with the Redis process itself happens, but the operating system is</span></span><br><span class="line"><span class="comment"># still running correctly.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># AOF and RDB persistence can be enabled at the same time without problems.</span></span><br><span class="line"><span class="comment"># If the AOF is enabled on startup Redis will load the AOF, that is the file</span></span><br><span class="line"><span class="comment"># with the better durability guarantees.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please check http://redis.io/topics/persistence for more information.</span></span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment"># The name of the append only file (default: "appendonly.aof")</span></span><br><span class="line"></span><br><span class="line">appendfilename "appendonly.aof"</span><br><span class="line"></span><br><span class="line"><span class="comment"># The fsync() call tells the Operating System to actually write data on disk</span></span><br><span class="line"><span class="comment"># instead to wait for more data in the output buffer. Some OS will really flush</span></span><br><span class="line"><span class="comment"># data on disk, some other OS will just try to do it ASAP.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Redis supports three different modes:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># no: don't fsync, just let the OS flush the data when it wants. Faster.</span></span><br><span class="line"><span class="comment"># always: fsync after every write to the append only log . Slow, Safest.</span></span><br><span class="line"><span class="comment"># everysec: fsync only one time every second. Compromise.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is "everysec", as that's usually the right compromise between</span></span><br><span class="line"><span class="comment"># speed and data safety. It's up to you to understand if you can relax this to</span></span><br><span class="line"><span class="comment"># "no" that will let the operating system flush the output buffer when</span></span><br><span class="line"><span class="comment"># it wants, for better performances (but if you can live with the idea of</span></span><br><span class="line"><span class="comment"># some data loss consider the default persistence mode that's snapshotting),</span></span><br><span class="line"><span class="comment"># or on the contrary, use "always" that's very slow but a bit safer than</span></span><br><span class="line"><span class="comment"># everysec.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># More details please check the following article:</span></span><br><span class="line"><span class="comment"># http://antirez.com/post/redis-persistence-demystified.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If unsure, use "everysec".</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># appendfsync no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When the AOF fsync policy is set to always or everysec, and a background</span></span><br><span class="line"><span class="comment"># saving process (a background save or AOF log background rewriting) is</span></span><br><span class="line"><span class="comment"># performing a lot of I/O against the disk, in some Linux configurations</span></span><br><span class="line"><span class="comment"># Redis may block too long on the fsync() call. Note that there is no fix for</span></span><br><span class="line"><span class="comment"># this currently, as even performing fsync in a different thread will block</span></span><br><span class="line"><span class="comment"># our synchronous write(2) call.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to mitigate this problem it's possible to use the following option</span></span><br><span class="line"><span class="comment"># that will prevent fsync() from being called in the main process while a</span></span><br><span class="line"><span class="comment"># BGSAVE or BGREWRITEAOF is in progress.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This means that while another child is saving, the durability of Redis is</span></span><br><span class="line"><span class="comment"># the same as "appendfsync none". In practical terms, this means that it is</span></span><br><span class="line"><span class="comment"># possible to lose up to 30 seconds of log in the worst scenario (with the</span></span><br><span class="line"><span class="comment"># default Linux settings).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you have latency problems turn this to "yes". Otherwise leave it as</span></span><br><span class="line"><span class="comment"># "no" that is the safest pick from the point of view of durability.</span></span><br><span class="line"></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatic rewrite of the append only file.</span></span><br><span class="line"><span class="comment"># Redis is able to automatically rewrite the log file implicitly calling</span></span><br><span class="line"><span class="comment"># BGREWRITEAOF when the AOF log size grows by the specified percentage.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is how it works: Redis remembers the size of the AOF file after the</span></span><br><span class="line"><span class="comment"># latest rewrite (if no rewrite has happened since the restart, the size of</span></span><br><span class="line"><span class="comment"># the AOF at startup is used).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This base size is compared to the current size. If the current size is</span></span><br><span class="line"><span class="comment"># bigger than the specified percentage, the rewrite is triggered. Also</span></span><br><span class="line"><span class="comment"># you need to specify a minimal size for the AOF file to be rewritten, this</span></span><br><span class="line"><span class="comment"># is useful to avoid rewriting the AOF file even if the percentage increase</span></span><br><span class="line"><span class="comment"># is reached but it is still pretty small.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Specify a percentage of zero in order to disable the automatic AOF</span></span><br><span class="line"><span class="comment"># rewrite feature.</span></span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"><span class="comment">################################ LUA SCRIPTING  ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Max execution time of a Lua script in milliseconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the maximum execution time is reached Redis will log that a script is</span></span><br><span class="line"><span class="comment"># still in execution after the maximum allowed time and will start to</span></span><br><span class="line"><span class="comment"># reply to queries with an error.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When a long running script exceed the maximum execution time only the</span></span><br><span class="line"><span class="comment"># SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</span></span><br><span class="line"><span class="comment"># used to stop a script that did not yet called write commands. The second</span></span><br><span class="line"><span class="comment"># is the only way to shut down the server in the case a write commands was</span></span><br><span class="line"><span class="comment"># already issue by the script but the user don't want to wait for the natural</span></span><br><span class="line"><span class="comment"># termination of the script.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set it to 0 or a negative value for unlimited execution without warnings.</span></span><br><span class="line">lua-time-limit 5000</span><br><span class="line"></span><br><span class="line"><span class="comment">################################ REDIS 集群  ###############################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 启用或停用集群</span></span><br><span class="line"><span class="comment"># cluster-enabled yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Every cluster node has a cluster configuration file. This file is not</span></span><br><span class="line"><span class="comment"># intended to be edited by hand. It is created and updated by Redis nodes.</span></span><br><span class="line"><span class="comment"># Every Redis Cluster node requires a different cluster configuration file.</span></span><br><span class="line"><span class="comment"># Make sure that instances running in the same system does not have</span></span><br><span class="line"><span class="comment"># overlapping cluster configuration file names.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-config-file nodes-6379.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cluster node timeout is the amount of milliseconds a node must be unreachable</span></span><br><span class="line"><span class="comment"># for it to be considered in failure state.</span></span><br><span class="line"><span class="comment"># Most other internal time limits are multiple of the node timeout.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-node-timeout 15000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A slave of a failing master will avoid to start a failover if its data</span></span><br><span class="line"><span class="comment"># looks too old.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># There is no simple way for a slave to actually have a exact measure of</span></span><br><span class="line"><span class="comment"># its "data age", so the following two checks are performed:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) If there are multiple slaves able to failover, they exchange messages</span></span><br><span class="line"><span class="comment">#    in order to try to give an advantage to the slave with the best</span></span><br><span class="line"><span class="comment">#    replication offset (more data from the master processed).</span></span><br><span class="line"><span class="comment">#    Slaves will try to get their rank by offset, and apply to the start</span></span><br><span class="line"><span class="comment">#    of the failover a delay proportional to their rank.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2) Every single slave computes the time of the last interaction with</span></span><br><span class="line"><span class="comment">#    its master. This can be the last ping or command received (if the master</span></span><br><span class="line"><span class="comment">#    is still in the "connected" state), or the time that elapsed since the</span></span><br><span class="line"><span class="comment">#    disconnection with the master (if the replication link is currently down).</span></span><br><span class="line"><span class="comment">#    If the last interaction is too old, the slave will not try to failover</span></span><br><span class="line"><span class="comment">#    at all.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The point "2" can be tuned by user. Specifically a slave will not perform</span></span><br><span class="line"><span class="comment"># the failover if, since the last interaction with the master, the time</span></span><br><span class="line"><span class="comment"># elapsed is greater than:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   (node-timeout * slave-validity-factor) + repl-ping-slave-period</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># So for example if node-timeout is 30 seconds, and the slave-validity-factor</span></span><br><span class="line"><span class="comment"># is 10, and assuming a default repl-ping-slave-period of 10 seconds, the</span></span><br><span class="line"><span class="comment"># slave will not try to failover if it was not able to talk with the master</span></span><br><span class="line"><span class="comment"># for longer than 310 seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A large slave-validity-factor may allow slaves with too old data to failover</span></span><br><span class="line"><span class="comment"># a master, while a too small value may prevent the cluster from being able to</span></span><br><span class="line"><span class="comment"># elect a slave at all.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For maximum availability, it is possible to set the slave-validity-factor</span></span><br><span class="line"><span class="comment"># to a value of 0, which means, that slaves will always try to failover the</span></span><br><span class="line"><span class="comment"># master regardless of the last time they interacted with the master.</span></span><br><span class="line"><span class="comment"># (However they'll always try to apply a delay proportional to their</span></span><br><span class="line"><span class="comment"># offset rank).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Zero is the only value able to guarantee that when all the partitions heal</span></span><br><span class="line"><span class="comment"># the cluster will always be able to continue.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-slave-validity-factor 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cluster slaves are able to migrate to orphaned masters, that are masters</span></span><br><span class="line"><span class="comment"># that are left without working slaves. This improves the cluster ability</span></span><br><span class="line"><span class="comment"># to resist to failures as otherwise an orphaned master can't be failed over</span></span><br><span class="line"><span class="comment"># in case of failure if it has no working slaves.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Slaves migrate to orphaned masters only if there are still at least a</span></span><br><span class="line"><span class="comment"># given number of other working slaves for their old master. This number</span></span><br><span class="line"><span class="comment"># is the "migration barrier". A migration barrier of 1 means that a slave</span></span><br><span class="line"><span class="comment"># will migrate only if there is at least 1 other working slave for its master</span></span><br><span class="line"><span class="comment"># and so forth. It usually reflects the number of slaves you want for every</span></span><br><span class="line"><span class="comment"># master in your cluster.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default is 1 (slaves migrate only if their masters remain with at least</span></span><br><span class="line"><span class="comment"># one slave). To disable migration just set it to a very large value.</span></span><br><span class="line"><span class="comment"># A value of 0 can be set but is useful only for debugging and dangerous</span></span><br><span class="line"><span class="comment"># in production.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-migration-barrier 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In order to setup your cluster make sure to read the documentation</span></span><br><span class="line"><span class="comment"># available at http://redis.io web site.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## SLOW LOG ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The Redis Slow Log is a system to log queries that exceeded a specified</span></span><br><span class="line"><span class="comment"># execution time. The execution time does not include the I/O operations</span></span><br><span class="line"><span class="comment"># like talking with the client, sending the reply and so forth,</span></span><br><span class="line"><span class="comment"># but just the time needed to actually execute the command (this is the only</span></span><br><span class="line"><span class="comment"># stage of command execution where the thread is blocked and can not serve</span></span><br><span class="line"><span class="comment"># other requests in the meantime).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can configure the slow log with two parameters: one tells Redis</span></span><br><span class="line"><span class="comment"># what is the execution time, in microseconds, to exceed in order for the</span></span><br><span class="line"><span class="comment"># command to get logged, and the other parameter is the length of the</span></span><br><span class="line"><span class="comment"># slow log. When a new command is logged the oldest one is removed from the</span></span><br><span class="line"><span class="comment"># queue of logged commands.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following time is expressed in microseconds, so 1000000 is equivalent</span></span><br><span class="line"><span class="comment"># to one second. Note that a negative number disables the slow log, while</span></span><br><span class="line"><span class="comment"># a value of zero forces the logging of every command.</span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># There is no limit to this length. Just be aware that it will consume memory.</span></span><br><span class="line"><span class="comment"># You can reclaim memory used by the slow log with SLOWLOG RESET.</span></span><br><span class="line">slowlog-max-len 128</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Event notification ##############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis can notify Pub/Sub clients about events happening in the key space.</span></span><br><span class="line"><span class="comment"># This feature is documented at http://redis.io/topics/keyspace-events</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For instance if keyspace events notification is enabled, and a client</span></span><br><span class="line"><span class="comment"># performs a DEL operation on key "foo" stored in the Database 0, two</span></span><br><span class="line"><span class="comment"># messages will be published via Pub/Sub:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># PUBLISH __keyspace@0__:foo del</span></span><br><span class="line"><span class="comment"># PUBLISH __keyevent@0__:del foo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is possible to select the events that Redis will notify among a set</span></span><br><span class="line"><span class="comment"># of classes. Every class is identified by a single character:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span></span><br><span class="line"><span class="comment">#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span></span><br><span class="line"><span class="comment">#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span></span><br><span class="line"><span class="comment">#  $     String commands</span></span><br><span class="line"><span class="comment">#  l     List commands</span></span><br><span class="line"><span class="comment">#  s     Set commands</span></span><br><span class="line"><span class="comment">#  h     Hash commands</span></span><br><span class="line"><span class="comment">#  z     Sorted set commands</span></span><br><span class="line"><span class="comment">#  x     Expired events (events generated every time a key expires)</span></span><br><span class="line"><span class="comment">#  e     Evicted events (events generated when a key is evicted for maxmemory)</span></span><br><span class="line"><span class="comment">#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  The "notify-keyspace-events" takes as argument a string that is composed</span></span><br><span class="line"><span class="comment">#  by zero or multiple characters. The empty string means that notifications</span></span><br><span class="line"><span class="comment">#  are disabled at all.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Example: to enable list and generic events, from the point of view of the</span></span><br><span class="line"><span class="comment">#           event name, use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  notify-keyspace-events Elg</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Example 2: to get the stream of the expired keys subscribing to channel</span></span><br><span class="line"><span class="comment">#             name __keyevent@0__:expired use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  notify-keyspace-events Ex</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  By default all notifications are disabled because most users don't need</span></span><br><span class="line"><span class="comment">#  this feature and the feature has some overhead. Note that if you don't</span></span><br><span class="line"><span class="comment">#  specify at least one of K or E, no events will be delivered.</span></span><br><span class="line">notify-keyspace-events ""</span><br><span class="line"></span><br><span class="line"><span class="comment">############################### ADVANCED CONFIG ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hashes are encoded using a memory efficient data structure when they have a</span></span><br><span class="line"><span class="comment"># small number of entries, and the biggest entry does not exceed a given</span></span><br><span class="line"><span class="comment"># threshold. These thresholds can be configured using the following directives.</span></span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment"># Similarly to hashes, small lists are also encoded in a special way in order</span></span><br><span class="line"><span class="comment"># to save a lot of space. The special representation is only used when</span></span><br><span class="line"><span class="comment"># you are under the following limits:</span></span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets have a special encoding in just one case: when a set is composed</span></span><br><span class="line"><span class="comment"># of just strings that happens to be integers in radix 10 in the range</span></span><br><span class="line"><span class="comment"># of 64 bit signed integers.</span></span><br><span class="line"><span class="comment"># The following configuration setting sets the limit in the size of the</span></span><br><span class="line"><span class="comment"># set in order to use this special memory saving encoding.</span></span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"></span><br><span class="line"><span class="comment"># Similarly to hashes and lists, sorted sets are also specially encoded in</span></span><br><span class="line"><span class="comment"># order to save a lot of space. This encoding is only used when the length and</span></span><br><span class="line"><span class="comment"># elements of a sorted set are below the following limits:</span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment"># HyperLogLog sparse representation bytes limit. The limit includes the</span></span><br><span class="line"><span class="comment"># 16 bytes header. When an HyperLogLog using the sparse representation crosses</span></span><br><span class="line"><span class="comment"># this limit, it is converted into the dense representation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A value greater than 16000 is totally useless, since at that point the</span></span><br><span class="line"><span class="comment"># dense representation is more memory efficient.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The suggested value is ~ 3000 in order to have the benefits of</span></span><br><span class="line"><span class="comment"># the space efficient encoding without slowing down too much PFADD,</span></span><br><span class="line"><span class="comment"># which is O(N) with the sparse encoding. The value can be raised to</span></span><br><span class="line"><span class="comment"># ~ 10000 when CPU is not a concern, but space is, and the data set is</span></span><br><span class="line"><span class="comment"># composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</span></span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span></span><br><span class="line"><span class="comment"># order to help rehashing the main Redis hash table (the one mapping top-level</span></span><br><span class="line"><span class="comment"># keys to values). The hash table implementation Redis uses (see dict.c)</span></span><br><span class="line"><span class="comment"># performs a lazy rehashing: the more operation you run into a hash table</span></span><br><span class="line"><span class="comment"># that is rehashing, the more rehashing "steps" are performed, so if the</span></span><br><span class="line"><span class="comment"># server is idle the rehashing is never complete and some more memory is used</span></span><br><span class="line"><span class="comment"># by the hash table.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is to use this millisecond 10 times every second in order to</span></span><br><span class="line"><span class="comment"># active rehashing the main dictionaries, freeing memory when possible.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If unsure:</span></span><br><span class="line"><span class="comment"># use "activerehashing no" if you have hard latency requirements and it is</span></span><br><span class="line"><span class="comment"># not a good thing in your environment that Redis can reply form time to time</span></span><br><span class="line"><span class="comment"># to queries with 2 milliseconds delay.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># use "activerehashing yes" if you don't have such hard requirements but</span></span><br><span class="line"><span class="comment"># want to free memory asap when possible.</span></span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># The client output buffer limits can be used to force disconnection of clients</span></span><br><span class="line"><span class="comment"># that are not reading data from the server fast enough for some reason (a</span></span><br><span class="line"><span class="comment"># common reason is that a Pub/Sub client can't consume messages as fast as the</span></span><br><span class="line"><span class="comment"># publisher can produce them).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The limit can be set differently for the three different classes of clients:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># normal -&gt; normal clients</span></span><br><span class="line"><span class="comment"># slave  -&gt; slave clients and MONITOR clients</span></span><br><span class="line"><span class="comment"># pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The syntax of every client-output-buffer-limit directive is the following:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A client is immediately disconnected once the hard limit is reached, or if</span></span><br><span class="line"><span class="comment"># the soft limit is reached and remains reached for the specified number of</span></span><br><span class="line"><span class="comment"># seconds (continuously).</span></span><br><span class="line"><span class="comment"># So for instance if the hard limit is 32 megabytes and the soft limit is</span></span><br><span class="line"><span class="comment"># 16 megabytes / 10 seconds, the client will get disconnected immediately</span></span><br><span class="line"><span class="comment"># if the size of the output buffers reach 32 megabytes, but will also get</span></span><br><span class="line"><span class="comment"># disconnected if the client reaches 16 megabytes and continuously overcomes</span></span><br><span class="line"><span class="comment"># the limit for 10 seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default normal clients are not limited because they don't receive data</span></span><br><span class="line"><span class="comment"># without asking (in a push way), but just after a request, so only</span></span><br><span class="line"><span class="comment"># asynchronous clients may create a scenario where data is requested faster</span></span><br><span class="line"><span class="comment"># than it can read.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Instead there is a default limit for pubsub and slave clients, since</span></span><br><span class="line"><span class="comment"># subscribers and slaves receive data in a push fashion.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Both the hard or the soft limit can be disabled by setting them to zero.</span></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis calls an internal function to perform many background tasks, like</span></span><br><span class="line"><span class="comment"># closing connections of clients in timeout, purging expired keys that are</span></span><br><span class="line"><span class="comment"># never requested, and so forth.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Not all tasks are performed with the same frequency, but Redis checks for</span></span><br><span class="line"><span class="comment"># tasks to perform accordingly to the specified "hz" value.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default "hz" is set to 10. Raising the value will use more CPU when</span></span><br><span class="line"><span class="comment"># Redis is idle, but at the same time will make Redis more responsive when</span></span><br><span class="line"><span class="comment"># there are many keys expiring at the same time, and timeouts may be</span></span><br><span class="line"><span class="comment"># handled with more precision.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The range is between 1 and 500, however a value over 100 is usually not</span></span><br><span class="line"><span class="comment"># a good idea. Most users should use the default of 10 and raise this up to</span></span><br><span class="line"><span class="comment"># 100 only in environments where very low latency is required.</span></span><br><span class="line">hz 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># When a child rewrites the AOF file, if the following option is enabled</span></span><br><span class="line"><span class="comment"># the file will be fsync-ed every 32 MB of data generated. This is useful</span></span><br><span class="line"><span class="comment"># in order to commit the file to the disk more incrementally and avoid</span></span><br><span class="line"><span class="comment"># big latency spikes.</span></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 软件教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL安装设置及常用命令</title>
      <link href="/2020/01/29/MySQL%E5%AE%89%E8%A3%85%E8%AE%BE%E7%BD%AE%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/01/29/MySQL%E5%AE%89%E8%A3%85%E8%AE%BE%E7%BD%AE%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql安装"><a class="markdownIt-Anchor" href="#mysql安装"></a> MySQL安装</h2><h3 id="linux下使用yum安装mysql"><a class="markdownIt-Anchor" href="#linux下使用yum安装mysql"></a> linux下使用yum安装mysql</h3><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><p>查看有没有安装过：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list installed mysql*</span><br><span class="line">rpm -qa | grep mysql*</span><br></pre></td></tr></table></figure></div><p>查看有没有安装包：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list mysql*</span><br></pre></td></tr></table></figure></div><p>安装mysql客户端：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mysql</span><br></pre></td></tr></table></figure></div><p>安装mysql 服务器端：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mysql-server</span><br><span class="line">yum install mysql-devel</span><br></pre></td></tr></table></figure></div><h4 id="启动停止"><a class="markdownIt-Anchor" href="#启动停止"></a> 启动\停止</h4><p>数据库字符集设置</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ini</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mysql配置文件/etc/my.cnf中加入</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure></div><p>启动mysql服务：</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysqld start</span><br><span class="line">/etc/init.d/mysqld start</span><br></pre></td></tr></table></figure></div><p>开机启动：</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig -add mysqld</span><br></pre></td></tr></table></figure></div><p>查看开机启动设置是否成功</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig --list | grep mysql*</span><br></pre></td></tr></table></figure></div><p>停止：</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysqld stop</span><br></pre></td></tr></table></figure></div><h4 id="登录"><a class="markdownIt-Anchor" href="#登录"></a> 登录</h4><p>创建root管理员：</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root password 123456</span><br></pre></td></tr></table></figure></div><p>登录：</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></div><p>忘记密码：</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysqld stop</span><br><span class="line">mysqld_safe --user=root --skip-grant-tables</span><br><span class="line">mysql -u root</span><br><span class="line">use mysql</span><br><span class="line">update user <span class="built_in">set</span> password=password(<span class="string">"new_pass"</span>) <span class="built_in">where</span> user=<span class="string">"root"</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></div><h4 id="配置账户权限"><a class="markdownIt-Anchor" href="#配置账户权限"></a> 配置账户权限</h4><p>创建账户</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'test'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure></div><p>刷新授权</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure></div><h4 id="远程访问"><a class="markdownIt-Anchor" href="#远程访问"></a> 远程访问</h4><p>开放防火墙的端口号<br>mysql增加权限：mysql库中的user表新增一条记录host为“%”，user为“root”</p><h4 id="linux-mysql的几个重要目录"><a class="markdownIt-Anchor" href="#linux-mysql的几个重要目录"></a> Linux MySQL的几个重要目录</h4><p>数据库目录</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/var/lib/mysql/</span><br></pre></td></tr></table></figure></div><p>配置文件</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/share /mysql</span><br></pre></td></tr></table></figure></div><p>相关命令</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin</span><br></pre></td></tr></table></figure></div><p>启动脚本</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/rc.d/init.d/</span><br></pre></td></tr></table></figure></div><h2 id="mysql操作"><a class="markdownIt-Anchor" href="#mysql操作"></a> MySQL操作</h2><h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3><h3 id="启动-停止-重启"><a class="markdownIt-Anchor" href="#启动-停止-重启"></a> 启动、停止、重启</h3><h3 id="导入导出"><a class="markdownIt-Anchor" href="#导入导出"></a> 导入导出</h3><h3 id="修改root密码"><a class="markdownIt-Anchor" href="#修改root密码"></a> 修改root密码</h3><ul><li><p><strong>方法1： 用SET PASSWORD命令</strong><br>首先登录MySQL。<br>格式：mysql&gt; set password for 用户名@localhost = password(‘新密码’);<br>例子：mysql&gt; set password for root@localhost = password(‘123’);</p></li><li><p><strong>方法2：用mysqladmin</strong><br>格式：mysqladmin -u用户名 -p旧密码 password 新密码<br>例子：mysqladmin -uroot -p123456 password 123</p></li><li><p><strong>方法3：用UPDATE直接编辑user表</strong><br>首先登录MySQL。<br>mysql&gt; use mysql;<br>mysql&gt; update user set password=password(‘123’) where user=’root’ and host=’localhost’;<br>mysql&gt; flush privileges;</p></li></ul><h2 id="navicat"><a class="markdownIt-Anchor" href="#navicat"></a> Navicat</h2><h3 id="mysql的表"><a class="markdownIt-Anchor" href="#mysql的表"></a> MySQL的表</h3><h3 id="mysql的视图"><a class="markdownIt-Anchor" href="#mysql的视图"></a> MySQL的视图</h3><h3 id="mysql的函数"><a class="markdownIt-Anchor" href="#mysql的函数"></a> MySQL的函数</h3><p>存储过程待学习</p><h3 id="mysql的事件"><a class="markdownIt-Anchor" href="#mysql的事件"></a> MySQL的事件</h3><h3 id="mysql的报表"><a class="markdownIt-Anchor" href="#mysql的报表"></a> MySQL的报表</h3><h3 id="mysql的计划"><a class="markdownIt-Anchor" href="#mysql的计划"></a> MySQL的计划</h3><h3 id="mysql的备份"><a class="markdownIt-Anchor" href="#mysql的备份"></a> MySQL的备份</h3><h3 id="mysql的模型"><a class="markdownIt-Anchor" href="#mysql的模型"></a> MySQL的模型</h3><h2 id="常见问题及处理办法"><a class="markdownIt-Anchor" href="#常见问题及处理办法"></a> 常见问题及处理办法</h2><h3 id="caused-by-javasqlsqlexception-value-0000-00-00-000000-can-not-be-represented-as-javasqltimestamp"><a class="markdownIt-Anchor" href="#caused-by-javasqlsqlexception-value-0000-00-00-000000-can-not-be-represented-as-javasqltimestamp"></a> Caused by: java.sql.SQLException: Value ‘0000-00-00 00:00:00’ can not be represented as java.sql.Timestamp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#原因：因为数据库里面存储了这样子的值，所以查询的时候报错了</span></span><br><span class="line"><span class="comment">#解决方案：在url路径哪里加上一句话</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://ip地址:端口号/数据库?characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull</span></span><br></pre></td></tr></table></figure></div><h3 id="sql_mode-问题"><a class="markdownIt-Anchor" href="#sql_mode-问题"></a> sql_mode 问题</h3><p>在 /etc/my.cnf中设置</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ini</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">sql_mode</span>=</span><br></pre></td></tr></table></figure></div><h4 id="sql_mode常用值"><a class="markdownIt-Anchor" href="#sql_mode常用值"></a> sql_mode常用值</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">    ONLY_FULL_GROUP_BY</span><br><span class="line">对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中。</span><br><span class="line"></span><br><span class="line">    NO_AUTO_VALUE_ON_ZERO</span><br><span class="line">该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，该列又是自增长的，那么这个选项就有用了。</span><br><span class="line"></span><br><span class="line">    STRICT_TRANS_TABLES</span><br><span class="line">在该模式下，如果一个值不能插入到一个事务表中，则中断当前的操作，对非事务表不做限制</span><br><span class="line"></span><br><span class="line">    NO_ZERO_IN_DATE</span><br><span class="line">在严格模式下，不允许日期和月份为零</span><br><span class="line"></span><br><span class="line">    NO_ZERO_DATE</span><br><span class="line">设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告。</span><br><span class="line"></span><br><span class="line">    ERROR_FOR_DIVISION_BY_ZERO</span><br><span class="line">在INSERT或UPDATE过程中，如果数据被零除，则产生错误而非警告。如 果未给出该模式，那么数据被零除时MySQL返回NULL</span><br><span class="line"></span><br><span class="line">    NO_AUTO_CREATE_USER</span><br><span class="line">禁止GRANT创建密码为空的用户</span><br><span class="line"></span><br><span class="line">    NO_ENGINE_SUBSTITUTION</span><br><span class="line">如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常</span><br><span class="line"></span><br><span class="line">    PIPES_AS_CONCAT</span><br><span class="line">将"||"视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样的，也和字符串的拼接函数Concat相类似</span><br><span class="line"></span><br><span class="line">    ANSI_QUOTES</span><br><span class="line">启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 软件教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域及其解决方案</title>
      <link href="/2020/01/29/%E8%B7%A8%E5%9F%9F%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/01/29/%E8%B7%A8%E5%9F%9F%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是跨域"><a class="markdownIt-Anchor" href="#什么是跨域"></a> 什么是跨域</h2><p>Cross-Origin Resource Sharing(CORS) 是W3C为浏览器制定的可以跨域通信的规范。通过使用 XMLHttpRequest 对象, CORS可以让开发者方便的进行跨域通信, 就像在使用同域通信一样。</p><p>CORS的使用十分简单。想象一下有一个网站 <a href="http://a.com">a.com</a> 想要获取另一个网站 <a href="http://b.com">b.com</a> 的数据。但由于浏览器的同源策略, 这样的请求将会被禁止. 这时我们可以使用CORS, 通过添加一些特殊的请求\响应头, 可以让 <a href="http://a.com">a.com</a> 访问 <a href="http://b.com">b.com</a> 的数据。</p><p>根据浏览器的同源策略, 当请求的地址与来源地址的协议、域名、端口中的任一值不相同时, 均视为是一个跨域的请求。</p><h2 id="解决跨域问题"><a class="markdownIt-Anchor" href="#解决跨域问题"></a> 解决跨域问题</h2><ol><li><p>jsonp跨域</p><p>JSONP（JSON with Padding：填充式JSON)，应用JSON的一种新方法，JSON、JSONP的区别：</p><ul><li>JSON返回的是一串数据、JSONP返回的是脚本代码(包含一个函数调用)</li><li>JSONP 只支持get请求、不支持post请求(类似往页面添加一个script标签，通过src属性去触发对指定地址的请求,故只能是Get请求)</li></ul></li><li><p>nginx反向代理：</p><p><a href="http://www.baidu.com/index.html%E9%9C%80%E8%A6%81%E8%B0%83%E7%94%A8www.sina.com/server.php%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%86%99%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3www.baidu.com/server.php%EF%BC%8C%E7%94%B1%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%9C%A8%E5%90%8E%E7%AB%AF%E5%8E%BB%E8%B0%83%E7%94%A8www.sina.com/server.php%E5%B9%B6%E6%8B%BF%E5%88%B0%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%8D%E8%BF%94%E5%9B%9E%E7%BB%99index.html">www.baidu.com/index.html需要调用www.sina.com/server.php，可以写一个接口www.baidu.com/server.php，由这个接口在后端去调用www.sina.com/server.php并拿到返回值，然后再返回给index.html</a></p></li><li><p>PHP端修改header</p><p>header(‘Access-Control-Allow-Origin:*’);//允许所有来源访问<br>header(‘Access-Control-Allow-Method:POST,GET’);//允许访问的方式</p></li><li><p>document.domain</p><p>跨域分为两种，一种xhr不能访问不同源的文档，另一种是不同window之间不能进行交互操作;</p><ul><li>document.domain主要是解决第二种情况，且只能适用于主域相同子域不同的情况；</li><li>document.domain的设置是有限制的，我们只能把document.domain设置成自身或更高一级的父域，且主域必须相同。例如：<a href="http://a.b.example.xn--comdocument-108qgb3680exfhjlc3w6h.xn--domaina-nc5kp88aqs9ao29g.b.example.com">a.b.example.com中某个文档的document.domain可以设成a.b.example.com</a>、<a href="http://b.example.com">b.example.com</a> 、example.com中的任意一个，<a href="http://xn--c-qo6ay0axlo6qdwx5sg2k5f.a.b.example.com">但是不可以设成c.a.b.example.com</a>，因为这是当前域的子域，<a href="http://xn--baidu-ni1h7sr7ay81aqs9ao29g.com">也不可以设成baidu.com</a>，因为主域已经不相同了。</li><li>兼容性：所有浏览器都支持；</li><li>优点：可以实现不同window之间的相互访问和操作；</li><li>缺点：只适用于父子window之间的通信，不能用于xhr；只能在主域相同且子域不同的情况下使用；</li></ul></li></ol><h3 id="filter文件"><a class="markdownIt-Anchor" href="#filter文件"></a> Filter文件</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支持 CORS 跨域</span></span><br><span class="line"><span class="comment"> * web先OPTIONS请求，若 Access-Control-Allow-Origin：*，则发送真正的请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String allowOrigin;</span><br><span class="line">    <span class="keyword">private</span> String allowMethods;</span><br><span class="line">    <span class="keyword">private</span> String allowCredentials;</span><br><span class="line">    <span class="keyword">private</span> String allowHeaders;</span><br><span class="line">    <span class="keyword">private</span> String exposeHeaders;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        allowOrigin = filterConfig.getInitParameter(<span class="string">"allowOrigin"</span>);</span><br><span class="line">        allowMethods = filterConfig.getInitParameter(<span class="string">"allowMethods"</span>);</span><br><span class="line">        allowCredentials = filterConfig.getInitParameter(<span class="string">"allowCredentials"</span>);</span><br><span class="line">        allowHeaders = filterConfig.getInitParameter(<span class="string">"allowHeaders"</span>);</span><br><span class="line">        exposeHeaders = filterConfig.getInitParameter(<span class="string">"exposeHeaders"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span></span><br><span class="line"><span class="function">     <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        <span class="keyword">if</span> (!CStringUtils.isEmpty(allowOrigin)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"*"</span>.equals(allowOrigin))&#123;</span><br><span class="line">                response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                List&lt;String&gt; allowOriginList = Arrays.asList(allowOrigin.split(<span class="string">","</span>));</span><br><span class="line">                <span class="keyword">if</span> (!CollectionUtils.isEmpty(allowOriginList)) &#123;</span><br><span class="line">                    String currentOrigin = request.getHeader(<span class="string">"Origin"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (allowOriginList.contains(currentOrigin)) &#123;</span><br><span class="line">                        response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, currentOrigin);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(allowMethods)) &#123;</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, allowMethods);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(allowCredentials)) &#123;</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, allowCredentials);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(allowHeaders)) &#123;</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, allowHeaders);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(exposeHeaders)) &#123;</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Expose-Headers"</span>, exposeHeaders);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"OPTIONS"</span>.equals(request.getMethod()))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="webxml配置"><a class="markdownIt-Anchor" href="#webxml配置"></a> web.xml配置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.sgai.sadp.core.cors.CorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>allowOrigin<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>allowMethods<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>GET,PUT,DELETE,POST<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>allowHeaders<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Origin,X-Requested-With,Content-Type,Accept<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 编程随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> utils </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库中IP地址的存储</title>
      <link href="/2020/01/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%ADIP%E5%9C%B0%E5%9D%80%E7%9A%84%E5%AD%98%E5%82%A8/"/>
      <url>/2020/01/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%ADIP%E5%9C%B0%E5%9D%80%E7%9A%84%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>大多数公司的表结构都需要经过DBA进行审核，有时候你会看到存储IP地址采用varchar(15)，这种方式都是传统的做法，这种方法需要占用15个字节，那么有更省空间的做法么？肯定是有的，那就是用int存储。如果采用int存储这里又有2种处理方式。</p><ol><li>利用MySQL函数进行处理。可以采用INET_ATON，INET_NTOA函数进行转换。</li><li>利用开发语言的函数进行处理，以php进行举例。可以采用ip2long，long2ip函数进行转换；java语言处理工具类如下：</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Desc:  IP地址使用无符号整型存储</span></span><br><span class="line"><span class="comment"> * User:  Xiaomo Song</span></span><br><span class="line"><span class="comment"> * Date: 2018-11-26</span></span><br><span class="line"><span class="comment"> * Time: 17:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IPConvetor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ip地址转成long型数字</span></span><br><span class="line"><span class="comment">     * 将IP地址转化成整数的方法如下：</span></span><br><span class="line"><span class="comment">     * 1、通过String的split方法按.分隔得到4个长度的数组</span></span><br><span class="line"><span class="comment">     * 2、通过左移位操作（&lt;&lt;）给每一段的数字加权，</span></span><br><span class="line"><span class="comment">     * 第一段的权为2的24次方，</span></span><br><span class="line"><span class="comment">     * 第二段的权为2的16次方，</span></span><br><span class="line"><span class="comment">     * 第三段的权为2的8次方，最后一段的权为1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strIp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">ipToLong</span><span class="params">(String strIp)</span> </span>&#123;</span><br><span class="line">        String[] ip = strIp.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">return</span> (Long.parseLong(ip[<span class="number">0</span>]) &lt;&lt; <span class="number">24</span>) +</span><br><span class="line">            (Long.parseLong(ip[<span class="number">1</span>]) &lt;&lt; <span class="number">16</span>) +</span><br><span class="line">            (Long.parseLong(ip[<span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) +</span><br><span class="line">            Long.parseLong(ip[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将十进制整数形式转换成127.0.0.1形式的ip地址</span></span><br><span class="line"><span class="comment">     * 将整数形式的IP地址转化成字符串的方法如下：</span></span><br><span class="line"><span class="comment">     * 1、将整数值进行右移位操作（&gt;&gt;&gt;），右移24位，右移时高位补0，得到的数字即为第一段IP。</span></span><br><span class="line"><span class="comment">     * 2、通过与操作符（&amp;）将整数值的高8位设为0，再右移16位，得到的数字即为第二段IP。</span></span><br><span class="line"><span class="comment">     * 3、通过与操作符吧整数值的高16位设为0，再右移8位，得到的数字即为第三段IP。</span></span><br><span class="line"><span class="comment">     * 4、通过与操作符吧整数值的高24位设为0，得到的数字即为第四段IP。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> longIp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longToIP</span><span class="params">(<span class="keyword">long</span> longIp)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line">        <span class="comment">// 直接右移24位</span></span><br><span class="line">        sb.append(String.valueOf((longIp &gt;&gt;&gt; <span class="number">24</span>)));</span><br><span class="line">        sb.append(<span class="string">"."</span>);</span><br><span class="line">        <span class="comment">// 将高8位置0，然后右移16位</span></span><br><span class="line">        sb.append(String.valueOf((longIp &amp; <span class="number">0x00FFFFFF</span>) &gt;&gt;&gt; <span class="number">16</span>));</span><br><span class="line">        sb.append(<span class="string">"."</span>);</span><br><span class="line">        <span class="comment">// 将高16位置0，然后右移8位</span></span><br><span class="line">        sb.append(String.valueOf((longIp &amp; <span class="number">0x0000FFFF</span>) &gt;&gt;&gt; <span class="number">8</span>));</span><br><span class="line">        sb.append(<span class="string">"."</span>);</span><br><span class="line">        <span class="comment">// 将高24位置0</span></span><br><span class="line">        sb.append(String.valueOf((longIp &amp; <span class="number">0x000000FF</span>)));</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(ipToLong(<span class="string">"255.255.0.255"</span>));</span><br><span class="line">        System.out.println(longToIP(<span class="number">4294967295L</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 编程随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地图坐标系转换算法</title>
      <link href="/2020/01/29/%E5%9C%B0%E5%9B%BE%E5%9D%90%E6%A0%87%E7%B3%BB%E8%BD%AC%E6%8D%A2%E7%AE%97%E6%B3%95/"/>
      <url>/2020/01/29/%E5%9C%B0%E5%9B%BE%E5%9D%90%E6%A0%87%E7%B3%BB%E8%BD%AC%E6%8D%A2%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="当前互联网地图的坐标系现状"><a class="markdownIt-Anchor" href="#当前互联网地图的坐标系现状"></a> 当前互联网地图的坐标系现状</h2><ul><li>地球坐标 (WGS84)<ul><li>国际标准，从专业 GPS 设备中取出的数据的坐标系。国际地图提供商使用的坐标系。</li></ul></li><li>火星坐标 (GCJ-02)也叫国测局坐标系<ul><li>中国标准，从国行移动设备中定位获取的坐标数据使用这个坐标系。</li><li>国家规定： 国内出版的各种地图系统（包括电子形式），必须至少采用GCJ-02对地理位置进行首次加密。</li></ul></li><li>百度坐标 (BD-09)<ul><li>百度标准，百度 SDK，百度地图，Geocoding 使用(百度在火星坐标上的二次加密)。</li></ul></li></ul><h2 id="互联网在线地图使用的坐标系"><a class="markdownIt-Anchor" href="#互联网在线地图使用的坐标系"></a> 互联网在线地图使用的坐标系</h2><ul><li>火星坐标系：<ul><li>iOS 地图（其实是高德）、Gogole地图、搜搜、阿里云、高德地图</li></ul></li><li>百度坐标系：<ul><li>当然只有百度地图</li></ul></li><li>WGS84坐标系：<ul><li>国际标准，谷歌国外地图、osm地图等国外的地图一般都是这个。</li></ul></li></ul><h2 id="从设备获取经纬度gps坐标"><a class="markdownIt-Anchor" href="#从设备获取经纬度gps坐标"></a> 从设备获取经纬度（GPS）坐标</h2><ul><li>如果使用的是百度sdk那么可以获得百度坐标（bd09）或者火星坐标（GCJ02),默认是bd09。</li><li>如果使用的是ios的原生定位库，那么获得的坐标是WGS84。</li><li>如果使用的是高德sdk,那么获取的坐标是GCJ02。</li></ul><h2 id="详细代码"><a class="markdownIt-Anchor" href="#详细代码"></a> 详细代码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//定义一些常量</span></span><br><span class="line">    <span class="keyword">var</span> x_PI = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span>;</span><br><span class="line">    <span class="keyword">var</span> PI = <span class="number">3.1415926535897932384626</span>;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">6378245.0</span>;</span><br><span class="line">    <span class="keyword">var</span> ee = <span class="number">0.00669342162296594323</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     　　* 百度坐标系 (BD-09) 与 火星坐标系 (GCJ-02)的转换</span></span><br><span class="line"><span class="comment">     　　* 即 百度 转 谷歌、高德</span></span><br><span class="line"><span class="comment">     　　* <span class="doctag">@param <span class="variable">bd_lon</span></span></span></span><br><span class="line"><span class="comment">     　　* <span class="doctag">@param <span class="variable">bd_lat</span></span></span></span><br><span class="line"><span class="comment">     　　* <span class="doctag">@returns <span class="type">&#123;*[]&#125;</span></span></span></span><br><span class="line"><span class="comment">     　　*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bd09togcj02</span>(<span class="params">bd_lon, bd_lat</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span>;</span><br><span class="line">        <span class="keyword">var</span> x = bd_lon - <span class="number">0.0065</span>;</span><br><span class="line">        <span class="keyword">var</span> y = bd_lat - <span class="number">0.006</span>;</span><br><span class="line">        <span class="keyword">var</span> z = <span class="built_in">Math</span>.sqrt(x * x + y * y) - <span class="number">0.00002</span> * <span class="built_in">Math</span>.sin(y * x_pi);</span><br><span class="line">        <span class="keyword">var</span> theta = <span class="built_in">Math</span>.atan2(y, x) - <span class="number">0.000003</span> * <span class="built_in">Math</span>.cos(x * x_pi);</span><br><span class="line">        <span class="keyword">var</span> gg_lng = z * <span class="built_in">Math</span>.cos(theta);</span><br><span class="line">        <span class="keyword">var</span> gg_lat = z * <span class="built_in">Math</span>.sin(theta);</span><br><span class="line">        <span class="keyword">return</span> [gg_lng, gg_lat]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 火星坐标系 (GCJ-02) 与百度坐标系 (BD-09) 的转换</span></span><br><span class="line"><span class="comment">     * 即谷歌、高德 转 百度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">lng</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">lat</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns <span class="type">&#123;*[]&#125;</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gcj02tobd09</span>(<span class="params">lng, lat</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> z = <span class="built_in">Math</span>.sqrt(lng * lng + lat * lat) + <span class="number">0.00002</span> * <span class="built_in">Math</span>.sin(lat * x_PI);</span><br><span class="line">        <span class="keyword">var</span> theta = <span class="built_in">Math</span>.atan2(lat, lng) + <span class="number">0.000003</span> * <span class="built_in">Math</span>.cos(lng * x_PI);</span><br><span class="line">        <span class="keyword">var</span> bd_lng = z * <span class="built_in">Math</span>.cos(theta) + <span class="number">0.0065</span>;</span><br><span class="line">        <span class="keyword">var</span> bd_lat = z * <span class="built_in">Math</span>.sin(theta) + <span class="number">0.006</span>;</span><br><span class="line">        <span class="keyword">return</span> [bd_lng, bd_lat]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WGS84转GCj02</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">lng</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">lat</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns <span class="type">&#123;*[]&#125;</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">wgs84togcj02</span>(<span class="params">lng, lat</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (out_of_china(lng, lat)) &#123;</span><br><span class="line">            <span class="keyword">return</span> [lng, lat]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> dlat = transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>);</span><br><span class="line">            <span class="keyword">var</span> dlng = transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>);</span><br><span class="line">            <span class="keyword">var</span> radlat = lat / <span class="number">180.0</span> * PI;</span><br><span class="line">            <span class="keyword">var</span> magic = <span class="built_in">Math</span>.sin(radlat);</span><br><span class="line">            magic = <span class="number">1</span> - ee * magic * magic;</span><br><span class="line">            <span class="keyword">var</span> sqrtmagic = <span class="built_in">Math</span>.sqrt(magic);</span><br><span class="line">            dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * PI);</span><br><span class="line">            dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * <span class="built_in">Math</span>.cos(radlat) * PI);</span><br><span class="line">            <span class="keyword">var</span> mglat = lat + dlat;</span><br><span class="line">            <span class="keyword">var</span> mglng = lng + dlng;</span><br><span class="line">            <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GCJ02 转换为 WGS84</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">lng</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">lat</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns <span class="type">&#123;*[]&#125;</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gcj02towgs84</span>(<span class="params">lng, lat</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (out_of_china(lng, lat)) &#123;</span><br><span class="line">            <span class="keyword">return</span> [lng, lat]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> dlat = transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>);</span><br><span class="line">            <span class="keyword">var</span> dlng = transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>);</span><br><span class="line">            <span class="keyword">var</span> radlat = lat / <span class="number">180.0</span> * PI;</span><br><span class="line">            <span class="keyword">var</span> magic = <span class="built_in">Math</span>.sin(radlat);</span><br><span class="line">            magic = <span class="number">1</span> - ee * magic * magic;</span><br><span class="line">            <span class="keyword">var</span> sqrtmagic = <span class="built_in">Math</span>.sqrt(magic);</span><br><span class="line">            dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * PI);</span><br><span class="line">            dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * <span class="built_in">Math</span>.cos(radlat) * PI);</span><br><span class="line">            mglat = lat + dlat;</span><br><span class="line">            mglng = lng + dlng;</span><br><span class="line">            <span class="keyword">return</span> [lng * <span class="number">2</span> - mglng, lat * <span class="number">2</span> - mglat]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">transformlat</span>(<span class="params">lng, lat</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = <span class="number">-100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * <span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.abs(lng));</span><br><span class="line">        ret += (<span class="number">20.0</span> * <span class="built_in">Math</span>.sin(<span class="number">6.0</span> * lng * PI) + <span class="number">20.0</span> * <span class="built_in">Math</span>.sin(<span class="number">2.0</span> * lng * PI)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        ret += (<span class="number">20.0</span> * <span class="built_in">Math</span>.sin(lat * PI) + <span class="number">40.0</span> * <span class="built_in">Math</span>.sin(lat / <span class="number">3.0</span> * PI)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        ret += (<span class="number">160.0</span> * <span class="built_in">Math</span>.sin(lat / <span class="number">12.0</span> * PI) + <span class="number">320</span> * <span class="built_in">Math</span>.sin(lat * PI / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">transformlng</span>(<span class="params">lng, lat</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * <span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.abs(lng));</span><br><span class="line">        ret += (<span class="number">20.0</span> * <span class="built_in">Math</span>.sin(<span class="number">6.0</span> * lng * PI) + <span class="number">20.0</span> * <span class="built_in">Math</span>.sin(<span class="number">2.0</span> * lng * PI)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        ret += (<span class="number">20.0</span> * <span class="built_in">Math</span>.sin(lng * PI) + <span class="number">40.0</span> * <span class="built_in">Math</span>.sin(lng / <span class="number">3.0</span> * PI)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        ret += (<span class="number">150.0</span> * <span class="built_in">Math</span>.sin(lng / <span class="number">12.0</span> * PI) + <span class="number">300.0</span> * <span class="built_in">Math</span>.sin(lng / <span class="number">30.0</span> * PI)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否在国内，不在国内则不做偏移</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">lng</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">lat</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">out_of_china</span>(<span class="params">lng, lat</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (lng &lt; <span class="number">72.004</span> || lng &gt; <span class="number">137.8347</span>) || ((lat &lt; <span class="number">0.8293</span> || lat &gt; <span class="number">55.8271</span>) || <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        wgs84ToGcj:wgs84togcj02,</span><br><span class="line">        wgs84ToBd:<span class="function"><span class="keyword">function</span>(<span class="params">lng,lat</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> p=wgs84togcj02(lng,lat);</span><br><span class="line">            <span class="keyword">return</span> gcj02tobd09(p[<span class="number">0</span>],p[<span class="number">1</span>]);</span><br><span class="line">        &#125;,</span><br><span class="line">        gcjToBd:gcj02tobd09,</span><br><span class="line">        gcjToWgs84:gcj02towgs84,</span><br><span class="line">        bdToGcj:bd09togcj02,</span><br><span class="line">        bdToWgs84:<span class="function"><span class="keyword">function</span>(<span class="params">lng,lat</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> p=bd09togcj02(lng,lat);</span><br><span class="line">            <span class="keyword">return</span> gcj02towgs84(p[<span class="number">0</span>],p[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 编程随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四位共阳数码管显示驱动</title>
      <link href="/2020/01/29/%E5%9B%9B%E4%BD%8D%E5%85%B1%E9%98%B3%E6%95%B0%E7%A0%81%E7%AE%A1%E6%98%BE%E7%A4%BA%E9%A9%B1%E5%8A%A8/"/>
      <url>/2020/01/29/%E5%9B%9B%E4%BD%8D%E5%85%B1%E9%98%B3%E6%95%B0%E7%A0%81%E7%AE%A1%E6%98%BE%E7%A4%BA%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>四位共阳数码管显示驱动，使用 python3 编写。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tm1637 class</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0, 1, 2, 3, 4, 5, 6, 7, 8 ,9</span></span><br><span class="line"><span class="comment">#HexDigits = [0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71];</span></span><br><span class="line">HexDigits = [<span class="number">0x3f</span>,<span class="number">0x06</span>,<span class="number">0x5b</span>,<span class="number">0x4f</span>,<span class="number">0x66</span>,<span class="number">0x6d</span>,<span class="number">0x7d</span>,<span class="number">0x07</span>,<span class="number">0x7f</span>,<span class="number">0x6f</span>];</span><br><span class="line"></span><br><span class="line">ADDR_AUTO = <span class="number">0x40</span>;</span><br><span class="line">ADDR_FIXED = <span class="number">0x44</span>;</span><br><span class="line">START_ADDR = <span class="number">0xC0</span>;</span><br><span class="line">BRIGHT_DARKEST = <span class="number">0</span>;</span><br><span class="line">BRIGHT_TYPICAL = <span class="number">2</span>;</span><br><span class="line">BRIGHT_HIGHEST = <span class="number">7</span>;</span><br><span class="line">OUTPUT = GPIO.OUT;</span><br><span class="line">INPUT = GPIO.IN;</span><br><span class="line">LOW = GPIO.LOW;</span><br><span class="line">HIGH = GPIO.HIGH;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TM1637</span>:</span></span><br><span class="line">    doublePoint = <span class="literal">False</span>;</span><br><span class="line">    clkPin = <span class="number">0</span>;</span><br><span class="line">    dataPin = <span class="number">0</span>;</span><br><span class="line">    brightnes = BRIGHT_TYPICAL;</span><br><span class="line">    curData = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, clkPin, dataPin, brightnes = BRIGHT_TYPICAL)</span>:</span></span><br><span class="line">        self.clkPin = clkPin;</span><br><span class="line">        self.dataPin = dataPin;</span><br><span class="line">        self.brightnes = brightnes;</span><br><span class="line">        GPIO.setup(self.clkPin, OUTPUT);</span><br><span class="line">        GPIO.setup(self.dataPin, OUTPUT);</span><br><span class="line">    <span class="comment"># end __init__</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">        point = self.doublePoint;</span><br><span class="line">        self.doublePoint = <span class="literal">False</span>;</span><br><span class="line">        data = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">        self.showData(data);</span><br><span class="line">        self.doublePoint = point;</span><br><span class="line">    <span class="comment"># end clear</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showData</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="comment">#print 'show data';</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">            self.curData[i] = data[i];</span><br><span class="line">            <span class="comment">#print 'data[', i, ']', data[i];</span></span><br><span class="line">        <span class="comment">#end for</span></span><br><span class="line"></span><br><span class="line">        self.start();</span><br><span class="line">        self.writeByte(ADDR_AUTO);</span><br><span class="line">        self.stop();</span><br><span class="line">        self.start();</span><br><span class="line">        self.writeByte(START_ADDR);</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">            self.writeByte(self.encode(data[i]));</span><br><span class="line">        self.stop()</span><br><span class="line">        self.start();</span><br><span class="line">        self.writeByte(<span class="number">0x88</span> + self.brightnes);</span><br><span class="line">        self.stop();</span><br><span class="line">    <span class="comment"># end showData</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showDoublePoint</span><span class="params">(self, on)</span>:</span></span><br><span class="line">        <span class="keyword">if</span>(self.doublePoint != on):</span><br><span class="line">            self.doublePoint = on;</span><br><span class="line">            self.showData(self.curData);</span><br><span class="line">        <span class="comment"># end if</span></span><br><span class="line">    <span class="comment">#end showDoublePoint</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeByte</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">            GPIO.output(self.clkPin, LOW);</span><br><span class="line">            <span class="keyword">if</span>(data &amp; <span class="number">0x01</span>):</span><br><span class="line">                GPIO.output(self.dataPin, HIGH);</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                GPIO.output(self.dataPin, LOW);</span><br><span class="line"></span><br><span class="line">            data = data &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            GPIO.output(self.clkPin, HIGH);</span><br><span class="line">        <span class="comment"># end for</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># wait for ACK</span></span><br><span class="line">        GPIO.output(self.clkPin, LOW);</span><br><span class="line">        GPIO.output(self.dataPin, HIGH); <span class="comment"># set data gpio high, util slave ack,set low</span></span><br><span class="line">        GPIO.output(self.clkPin, HIGH);</span><br><span class="line">        GPIO.setup(self.dataPin, INPUT); <span class="comment"># set data gpio to input for slave</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#print 'self.dataPint = ', self.dataPin;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(GPIO.input(self.dataPin)):</span><br><span class="line">            time.sleep(<span class="number">0.001</span>);</span><br><span class="line">            <span class="keyword">if</span>(GPIO.input(self.dataPin)):</span><br><span class="line">                GPIO.setup(self.dataPin, OUTPUT);</span><br><span class="line">                GPIO.output(self.dataPin, LOW);</span><br><span class="line">                GPIO.setup(self.dataPin, INPUT);</span><br><span class="line">            <span class="comment"># end if</span></span><br><span class="line">        <span class="comment"># end while</span></span><br><span class="line">        <span class="comment">#print 'ack is get'</span></span><br><span class="line">        GPIO.setup(self.dataPin, OUTPUT);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># end writeByte</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        GPIO.output(self.clkPin, HIGH);</span><br><span class="line">        GPIO.output(self.dataPin, HIGH);</span><br><span class="line">        GPIO.output(self.dataPin, LOW);</span><br><span class="line">        GPIO.output(self.clkPin, LOW)</span><br><span class="line">    <span class="comment"># end start</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        GPIO.output(self.clkPin, LOW);</span><br><span class="line">        GPIO.output(self.dataPin, LOW);</span><br><span class="line">        GPIO.output(self.clkPin, HIGH);</span><br><span class="line">        GPIO.output(self.dataPin, HIGH);</span><br><span class="line">    <span class="comment"># end stop</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">if</span>(self.doublePoint):</span><br><span class="line">            pointData = <span class="number">0x80</span>;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pointData = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(data == <span class="number">0x7F</span>):</span><br><span class="line">            data = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data = HexDigits[data] + pointData;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    <span class="comment"># end encode</span></span><br><span class="line"><span class="comment"># end class TM1637</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># start show cur timer</span></span><br><span class="line"><span class="keyword">import</span> tm1637</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">CLK = <span class="number">24</span>;</span><br><span class="line">DATA  = <span class="number">23</span>;</span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line">GPIO.setwarnings(<span class="literal">False</span>);</span><br><span class="line"></span><br><span class="line">HHMMFORMAT = <span class="string">'%H:%M'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    digital1637 = tm1637.TM1637(CLK, DATA)</span><br><span class="line">    digital1637.showDoublePoint(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    lastTime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        curTime = time.strftime(HHMMFORMAT, time.localtime(time.time()));</span><br><span class="line">        <span class="keyword">if</span>(curTime != lastTime):</span><br><span class="line">            number = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">            digital1637.showData(number);</span><br><span class="line">        <span class="comment"># end if</span></span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">0.05</span>);</span><br><span class="line">    <span class="comment"># end while</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">GPIO.cleanup();</span><br><span class="line"><span class="comment"># end show cur timer</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 编程随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> raspberry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8简明教程摘要</title>
      <link href="/2020/01/29/Java8%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B%E6%91%98%E8%A6%81/"/>
      <url>/2020/01/29/Java8%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B%E6%91%98%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<h2 id="允许在接口中有默认方法实现"><a class="markdownIt-Anchor" href="#允许在接口中有默认方法实现"></a> 允许在接口中有默认方法实现</h2><blockquote><p>Java 8 允许我们使用default关键字，为接口声明添加非抽象的方法实现。这个特性又被称为扩展方法。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Formula</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Formula formula = <span class="keyword">new</span> Formula() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqrt(a * <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">formula.calculate(<span class="number">100</span>);     <span class="comment">// 100.0</span></span><br><span class="line">formula.sqrt(<span class="number">16</span>);           <span class="comment">// 4.0</span></span><br></pre></td></tr></table></figure></div><h2 id="lambda表达式"><a class="markdownIt-Anchor" href="#lambda表达式"></a> Lambda表达式</h2><blockquote><p>Java编译器能够自动识别参数的类型，所以你就可以省略掉类型不写</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">"peter"</span>, <span class="string">"anna"</span>, <span class="string">"mike"</span>, <span class="string">"xenia"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建匿名对象</span></span><br><span class="line">Collections.sort(names, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.compareTo(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda表达式</span></span><br><span class="line">Collections.sort(names,(a,b)-&gt;a.compareTo(b));</span><br></pre></td></tr></table></figure></div><h2 id="函数式接口"><a class="markdownIt-Anchor" href="#函数式接口"></a> 函数式接口</h2><blockquote><p>任意只包含一个抽象方法的接口，我们都可以用来做成lambda表达式。为了让你定义的接口满足要求，你应当在接口前加上@FunctionalInterface 标注。编译器会注意到这个标注，如果你的接口中定义了第二个抽象方法的话，编译器会抛出异常。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">convert</span><span class="params">(F from)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Converter&lt;String, Integer&gt; converter = (from) -&gt; Integer.valueOf(from);</span><br><span class="line">Integer converted = converter.convert(<span class="string">"123"</span>);</span><br><span class="line">System.out.println(converted);    <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></div><h2 id="方法和构造函数引用"><a class="markdownIt-Anchor" href="#方法和构造函数引用"></a> 方法和构造函数引用</h2><blockquote><p>Java 8 允许你通过::关键字获取方法或者构造函数的的引用。上面的例子就演示了如何引用一个静态方法</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Converter&lt;String, Integer&gt; converter = Integer::valueOf;</span><br><span class="line">Integer converted = converter.convert(<span class="string">"123"</span>);</span><br><span class="line">System.out.println(converted);   <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></div><blockquote><p>我们还可以对一个对象的方法进行引用</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">startsWith</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(s.charAt(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Something something = <span class="keyword">new</span> Something();</span><br><span class="line">Converter&lt;String, String&gt; converter = something::startsWith;</span><br><span class="line">String converted = converter.convert(<span class="string">"Java"</span>);</span><br><span class="line">System.out.println(converted);    <span class="comment">// "J"</span></span><br></pre></td></tr></table></figure></div><blockquote><p>用::关键字引用构造函数。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String firstName;</span><br><span class="line">    String lastName;</span><br><span class="line"></span><br><span class="line">    Person() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Person(String firstName, String lastName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonFactory</span>&lt;<span class="title">P</span> <span class="keyword">extends</span> <span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">P <span class="title">create</span><span class="params">(String firstName, String lastName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PersonFactory&lt;Person&gt; personFactory = Person::<span class="keyword">new</span>;</span><br><span class="line">Person person = personFactory.create(<span class="string">"Peter"</span>, <span class="string">"Parker"</span>);</span><br></pre></td></tr></table></figure></div><h2 id="lambda的范围"><a class="markdownIt-Anchor" href="#lambda的范围"></a> Lambda的范围</h2><blockquote><p>对于lambdab表达式外部的变量，其访问权限的粒度与匿名对象的方式非常类似。你能够访问局部对应的外部区域的局部final变量，以及成员变量和静态变量</p></blockquote><ol><li>我们可以访问lambda表达式外部的final局部变量,但是与匿名对象不同的是，变量num并不需要一定是final。然而，num在编译的时候被隐式地当做final变量来处理。</li><li>与局部变量不同，我们在lambda表达式的内部能获取到对成员变量或静态变量的读写权。这种访问行为在匿名对象里是非常典型的。</li><li>默认方法无法在lambda表达式内部被访问。</li></ol><h2 id="内置函数式接口"><a class="markdownIt-Anchor" href="#内置函数式接口"></a> 内置函数式接口</h2><blockquote><p>JDK 1.8 API中包含了很多内置的函数式接口。有些是在以前版本的Java中大家耳熟能详的，例如Comparator接口，或者Runnable接口。对这些现成的接口进行实现，可以通过@FunctionalInterface 标注来启用Lambda功能支持。<br>Predicate是一个布尔类型的函数，该函数只有一个输入参数。Predicate接口包含了多种默认方法，用于处理复杂的逻辑动词（and, or，negate）</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">predicate.test(<span class="string">"foo"</span>);              <span class="comment">// true</span></span><br><span class="line">predicate.negate().test(<span class="string">"foo"</span>);     <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">Predicate&lt;Boolean&gt; nonNull = Objects::nonNull;</span><br><span class="line">Predicate&lt;Boolean&gt; isNull = Objects::isNull;</span><br><span class="line"></span><br><span class="line">Predicate&lt;String&gt; isEmpty = String::isEmpty;</span><br><span class="line">Predicate&lt;String&gt; isNotEmpty = isEmpty.negate();</span><br></pre></td></tr></table></figure></div><blockquote><p>Function接口接收一个参数，并返回单一的结果。默认方法可以将多个函数串在一起（compse, andThen）</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;String, Integer&gt; toInteger = Integer::valueOf;</span><br><span class="line">Function&lt;String, String&gt; backToString = toInteger.andThen(String::valueOf);</span><br><span class="line"></span><br><span class="line">backToString.apply(<span class="string">"123"</span>);     <span class="comment">// "123"</span></span><br></pre></td></tr></table></figure></div><blockquote><p>Supplier接口产生一个给定类型的结果。与Function不同的是，Supplier没有输入参数。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Supplier&lt;Person&gt; personSupplier = Person::<span class="keyword">new</span>;</span><br><span class="line">personSupplier.get();   <span class="comment">// new Person</span></span><br></pre></td></tr></table></figure></div><blockquote><p>Consumer代表了在一个输入参数上需要进行的操作。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Consumer&lt;Person&gt; greeter = (p) -&gt; System.out.println(<span class="string">"Hello, "</span> + p.firstName);</span><br><span class="line">greeter.accept(<span class="keyword">new</span> Person(<span class="string">"Luke"</span>, <span class="string">"Skywalker"</span>));</span><br></pre></td></tr></table></figure></div><blockquote><p>Comparator接口在早期的Java版本中非常著名。Java 8 为这个接口添加了不同的默认方法。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);</span><br><span class="line"></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Doe"</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">"Alice"</span>, <span class="string">"Wonderland"</span>);</span><br><span class="line"></span><br><span class="line">comparator.compare(p1, p2);             <span class="comment">// &gt; 0</span></span><br><span class="line">comparator.reversed().compare(p1, p2);  <span class="comment">// &lt; 0</span></span><br></pre></td></tr></table></figure></div><blockquote><p>Optional不是一个函数式接口，而是一个精巧的工具接口，用来防止NullPointerException产生。这个概念在下一节会显得很重要，所以我们在这里快速地浏览一下Optional的工作原理。<br>Optional是一个简单的值容器，这个值可以是null，也可以是non-null。考虑到一个方法可能会返回一个non-null的值，也可能返回一个空值。为了不直接返回null，我们在Java 8中就返回一个Optional.</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; optional = Optional.of(<span class="string">"bam"</span>);</span><br><span class="line"></span><br><span class="line">optional.isPresent();           <span class="comment">// true</span></span><br><span class="line">optional.get();                 <span class="comment">// "bam"</span></span><br><span class="line">optional.orElse(<span class="string">"fallback"</span>);    <span class="comment">// "bam"</span></span><br><span class="line"></span><br><span class="line">optional.ifPresent((s) -&gt; System.out.println(s.charAt(<span class="number">0</span>)));     <span class="comment">// "b"</span></span><br></pre></td></tr></table></figure></div><h2 id="streams"><a class="markdownIt-Anchor" href="#streams"></a> Streams</h2><blockquote><p>java.util.Stream表示了某一种元素的序列，在这些元素上可以进行各种操作。Stream操作可以是中间操作，也可以是完结操作。完结操作会返回一个某种类型的值，而中间操作会返回流对象本身，并且你可以通过多次调用同一个流操作方法来将操作结果串起来（就像StringBuffer的append方法一样————译者注）。Stream是在一个源的基础上创建出来的，例如java.util.Collection中的list或者set（map不能作为Stream的源）。Stream操作往往可以通过顺序或者并行两种方式来执行。<br>Java 8中的Collections类的功能已经有所增强，你可以之直接通过调用Collections.stream()或者Collection.parallelStream()方法来创建一个流对象。下面的章节会解释这个最常用的操作。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例数据</span></span><br><span class="line">List&lt;String&gt; stringCollection = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">stringCollection.add(<span class="string">"ddd2"</span>);</span><br><span class="line">stringCollection.add(<span class="string">"aaa2"</span>);</span><br><span class="line">stringCollection.add(<span class="string">"bbb1"</span>);</span><br><span class="line">stringCollection.add(<span class="string">"aaa1"</span>);</span><br><span class="line">stringCollection.add(<span class="string">"bbb3"</span>);</span><br><span class="line">stringCollection.add(<span class="string">"ccc"</span>);</span><br><span class="line">stringCollection.add(<span class="string">"bbb2"</span>);</span><br><span class="line">stringCollection.add(<span class="string">"ddd1"</span>);</span><br></pre></td></tr></table></figure></div><blockquote><p>filter接受一个predicate接口类型的变量，并将所有流对象中的元素进行过滤。该操作是一个<strong>中间操作</strong>，因此它允许我们在返回结果的基础上再进行其他的流操作（forEach）。forEach接受一个function接口类型的变量，用来执行对每一个元素的操作。forEach是一个中止操作。它不返回流，所以我们不能再调用其他的流操作。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stringCollection</span><br><span class="line">    .stream()</span><br><span class="line">    .filter((s) -&gt; s.startsWith(<span class="string">"a"</span>))</span><br><span class="line">    .forEach(System.out::println);</span><br></pre></td></tr></table></figure></div><blockquote><p>sorted是一个<strong>中间操作</strong>，能够返回一个排过序的流对象的视图。流对象中的元素会默认按照自然顺序进行排序，除非你自己指定一个Comparator接口来改变排序规则。<br>sorted只是创建一个流对象排序的视图，而不会改变原来集合中元素的顺序。原来string集合中的元素顺序是没有改变的。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stringCollection</span><br><span class="line">    .stream()</span><br><span class="line">    .sorted()</span><br><span class="line">    .filter((s) -&gt; s.startsWith(<span class="string">"a"</span>))</span><br><span class="line">    .forEach(System.out::println);</span><br></pre></td></tr></table></figure></div><blockquote><p>map是一个对于流对象的<strong>中间操作</strong>，通过给定的方法，它能够把流对象中的每一个元素对应到另外一个对象上。下面的例子就演示了如何把每个string都转换成大写的string. 不但如此，你还可以把每一种对象映射成为其他类型。对于带泛型结果的流对象，具体的类型还要由传递给map的泛型方法来决定。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stringCollection</span><br><span class="line">    .stream()</span><br><span class="line">    .map(String::toUpperCase)</span><br><span class="line">    .sorted((a, b) -&gt; b.compareTo(a))</span><br><span class="line">    .forEach(System.out::println);</span><br></pre></td></tr></table></figure></div><blockquote><p>match匹配操作有多种不同的类型，都是用来判断某一种规则是否与流对象相互吻合的。所有的匹配操作都是<strong>终结操作</strong>，只返回一个boolean类型的结果。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> anyStartsWithA =</span><br><span class="line">    stringCollection</span><br><span class="line">        .stream()</span><br><span class="line">        .anyMatch((s) -&gt; s.startsWith(<span class="string">"a"</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(anyStartsWithA);      <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><blockquote><p>count是一个<strong>终结操作</strong>，它的作用是返回一个数值，用来标识当前流对象中包含的元素数量。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> startsWithB =</span><br><span class="line">    stringCollection</span><br><span class="line">        .stream()</span><br><span class="line">        .filter((s) -&gt; s.startsWith(<span class="string">"b"</span>))</span><br><span class="line">        .count();</span><br><span class="line"></span><br><span class="line">System.out.println(startsWithB);    <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></div><blockquote><p>reduce该操作是一个终结操作，它能够通过某一个方法，对元素进行削减操作。该操作的结果会放在一个Optional变量里返回。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; reduced =</span><br><span class="line">    stringCollection</span><br><span class="line">        .stream()</span><br><span class="line">        .sorted()</span><br><span class="line">        .reduce((s1, s2) -&gt; s1 + <span class="string">"#"</span> + s2);</span><br><span class="line"></span><br><span class="line">reduced.ifPresent(System.out::println);</span><br><span class="line"><span class="comment">// "aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2"</span></span><br></pre></td></tr></table></figure></div><h2 id="parallel-streams"><a class="markdownIt-Anchor" href="#parallel-streams"></a> Parallel Streams</h2><blockquote><p>流操作可以是顺序的，也可以是并行的。顺序操作通过单线程执行，而并行操作则通过多线程执行。</p></blockquote><h2 id="map"><a class="markdownIt-Anchor" href="#map"></a> Map</h2><blockquote><p>正如前面已经提到的那样，map是不支持流操作的。而更新后的map现在则支持多种实用的新方法，来完成常规的任务。<br><strong>没太看懂，继续</strong></p></blockquote><h2 id="时间日期api"><a class="markdownIt-Anchor" href="#时间日期api"></a> 时间日期API</h2><blockquote><p>Java 8 包含了全新的时间日期API，这些功能都放在了java.time包下。新的时间日期API是基于Joda-Time库开发的，但是也不尽相同。下面的例子就涵盖了大多数新的API的重要部分。<br>Clock提供了对当前时间和日期的访问功能。Clock是对当前时区敏感的，并可用于替代System.currentTimeMillis()方法来获取当前的毫秒时间。当前时间线上的时刻可以用Instance类来表示。Instance也能够用于创建原先的java.util.Date对象。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Clock clock = Clock.systemDefaultZone();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> millis = clock.millis();</span><br><span class="line">Instant instant = clock.instant();</span><br><span class="line">Date date = Date.from(instant);</span><br></pre></td></tr></table></figure></div><blockquote><p>Timezones:时区类可以用一个ZoneId来表示。时区类的对象可以通过静态工厂方法方便地获取。时区类还定义了一个偏移量，用来在当前时刻或某时间与目标时区时间之间进行转换。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; set = ZoneId.getAvailableZoneIds();</span><br><span class="line"></span><br><span class="line">set.stream()</span><br><span class="line">    .filter(a -&gt; a.contains(<span class="string">"Asia"</span>))</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">ZoneId zone1 = ZoneId.of(<span class="string">"Europe/Berlin"</span>);</span><br><span class="line">ZoneId zone2 = ZoneId.of(<span class="string">"Brazil/East"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(zone1.getRules());</span><br><span class="line">System.out.println(zone2.getRules());</span><br></pre></td></tr></table></figure></div><blockquote><p>LocalTime:本地时间类表示一个没有指定时区的时间，例如，10 p.m.或者17：30:15，下面的例子会用上面的例子定义的时区创建两个本地时间对象。然后我们会比较两个时间，并计算它们之间的小时和分钟的不同。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalTime now1 = LocalTime.now(zone1);</span><br><span class="line">LocalTime now2 = LocalTime.now(zone2);</span><br><span class="line"></span><br><span class="line">System.out.println(now1.isBefore(now2));</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> hoursBetween = ChronoUnit.HOURS.between(now1, now2);</span><br><span class="line"><span class="keyword">long</span> minutesBetween = ChronoUnit.MINUTES.between(now1, now2);</span><br><span class="line"></span><br><span class="line">System.out.println(hoursBetween);</span><br><span class="line">System.out.println(minutesBetween);</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> hoursBetween = ChronoUnit.HOURS.between(now1, now2);</span><br><span class="line"><span class="keyword">long</span> minutesBetween = ChronoUnit.MINUTES.between(now1, now2);</span><br><span class="line"></span><br><span class="line">System.out.println(hoursBetween);</span><br><span class="line">System.out.println(minutesBetween);</span><br></pre></td></tr></table></figure></div><blockquote><p>LocalDate:本地时间表示了一个独一无二的时间，例如：2014-03-11。这个时间是不可变的，与LocalTime是同源的。下面的例子演示了如何通过加减日，月，年等指标来计算新的日期。记住，每一次操作都会返回一个新的时间对象。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">LocalDate tomorrow = today.plus(<span class="number">1</span>,ChronoUnit.DAYS);</span><br><span class="line">LocalDate yesterday = tomorrow.minusDays(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(yesterday);</span><br><span class="line">System.out.println(today);</span><br><span class="line">System.out.println(tomorrow);</span><br><span class="line"></span><br><span class="line">LocalDate independenceDay = LocalDate.of(<span class="number">2018</span>, Month.OCTOBER, <span class="number">4</span>);</span><br><span class="line">DayOfWeek dayOfWeek = independenceDay.getDayOfWeek();</span><br><span class="line">System.out.println(dayOfWeek);</span><br><span class="line"></span><br><span class="line"><span class="comment">//日期格式化，这里有个问题，用“.”分隔日期，选择Locale.CHINA的话会报错，需要知道具体原理</span></span><br><span class="line">DateTimeFormatter germanFormatter =</span><br><span class="line">    DateTimeFormatter</span><br><span class="line">        .ofLocalizedDate(FormatStyle.MEDIUM)</span><br><span class="line">        .withLocale(Locale.GERMAN);</span><br><span class="line"></span><br><span class="line">LocalDate xmas = LocalDate.parse(<span class="string">"24.12.2014"</span>, germanFormatter);</span><br><span class="line">System.out.println(xmas);   <span class="comment">// 2014-12-24</span></span><br></pre></td></tr></table></figure></div><blockquote><p>LocalDateTime表示的是日期-时间。它将刚才介绍的日期对象和时间对象结合起来，形成了一个对象实例。LocalDateTime是不可变的，与LocalTime和LocalDate的工作原理相同。我们可以通过调用方法来获取日期时间对象中特定的数据域</p></blockquote><h2 id="annotations"><a class="markdownIt-Anchor" href="#annotations"></a> Annotations</h2><blockquote><p>Java 8中的注解是可重复的。让我们直接深入看看例子，弄明白它是什么意思。</p></blockquote><p>to be continued …</p><hr><p>摘自 <a href="http://blog.didispace.com/books/java8-tutorial/">Java 8 简明教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 编程随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解HashMap</title>
      <link href="/2020/01/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3HashMap/"/>
      <url>/2020/01/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3HashMap/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><ul><li>HashMap 是一个用于存储Key-Value键值对的集合，每一个键值对也叫做 Entry；</li><li>键值对（Entry）分散存储在一个数组当中，这个数组就是HashMap的主干；</li><li>HashMap 数组每一个元素的初始值都是 Null。</li></ul><h2 id="常用方法"><a class="markdownIt-Anchor" href="#常用方法"></a> 常用方法</h2><h3 id="put"><a class="markdownIt-Anchor" href="#put"></a> Put</h3><p>调用 hashMap.put(“apple”, 0) ，插入一个Key为“apple”的元素。这时候我们需要利用一个哈希函数来确定Entry的插入位置（index）：index = Hash（“apple”），假定最后计算出的index是2，那么结果会存在数组index=2的位置中。</p><p>但是，因为HashMap的长度是有限的，当插入的Entry越来越多时，会出现index（key的hash值）冲突的情况。那么这个时候可以使用链表来解决。<br>HashMap 数组的每一个元素不止是一个 Entry 对象，也是一个链表的头节点。<br>每一个 Entry 对象通过 Next 指针指向它的下一个 Entry 节点。当新来的Entry映射到冲突的数组位置时，只需要插入到对应的链表即可。<br>新来的Entry节点插入链表时，使用的是“头插法”，应为发明者认为后插入的Entry被查找的几率较大</p><h3 id="get"><a class="markdownIt-Anchor" href="#get"></a> Get</h3><p>查找时，根据key的hash值来找到index，这时如果之前的hash没有冲突的话，直接就可以取到value；但是如果hash冲突了，这里key值对不上，然后往下找Entry，找到key对应的Entry就可以取到我们要的value值了。</p><h2 id="默认长度及扩容"><a class="markdownIt-Anchor" href="#默认长度及扩容"></a> 默认长度及扩容</h2><blockquote><p>HashMap的默认长度是16 ，自动扩展或初始化时，长度必须是2的幂</p></blockquote><h3 id="hash算法的实现"><a class="markdownIt-Anchor" href="#hash算法的实现"></a> Hash算法的实现</h3><p>其采用了位运算的方式如何进行位运算呢？有如下的公式（Length是HashMap的长度）：<br>index = HashCode(Key) &amp; (Length -1)</p><p>下面以值为“book”的 Key 来演示整个过程：</p><ol><li>计算 book 的 hashcode，结果为十进制的 3029737，二进制的101110001110101110 1001。</li><li>假定 HashMap 长度是默认的16，计算Length-1的结果为十进制的15，二进制的1111。</li><li>把以上两个结果做与运算，101110001110101110 1001 &amp; 1111 = 1001，十进制是9，所以 index=9。（与运算：和，同位上都为1则为1，否则为0)</li></ol><p>Hash 算法最终得到的 index 结果，取决于 Key 的 Hashcode 值的最后几位。</p><h3 id="为什么长度必须是2的幂"><a class="markdownIt-Anchor" href="#为什么长度必须是2的幂"></a> 为什么长度必须是2的幂</h3><p>这是因为长度16或者其他2的幂，Length-1 的值是所有二进制位全为1，比如15是1111，7是111，这种情况下，index 的结果等同于 HashCode 后几位的值。<br>只要输入的 HashCode 本身分布均匀，Hash 算法的结果就是均匀的。</p><h3 id="hashmap扩容与rehash"><a class="markdownIt-Anchor" href="#hashmap扩容与rehash"></a> HashMap扩容与Rehash</h3><blockquote><p>HashMap的容量是有限的。当经过多次元素插入，使得HashMap达到一定饱和度时，Key映射位置发生冲突的几率会逐渐提高。这时候，HashMap需要扩展它的长度，也就是进行Resize。</p></blockquote><h4 id="影响发生resize的因素"><a class="markdownIt-Anchor" href="#影响发生resize的因素"></a> 影响发生Resize的因素</h4><p>1.Capacity<br>HashMap的当前长度，是2的幂。</p><p>2.LoadFactor<br>HashMap负载因子，默认值为0.75f。<br>衡量HashMap是否进行Resize的条件如下：HashMap.Size &gt;= Capacity * LoadFactor</p><h4 id="hashmap的resize经历以下两个步骤"><a class="markdownIt-Anchor" href="#hashmap的resize经历以下两个步骤"></a> HashMap的resize经历以下两个步骤</h4><p>1.扩容<br>创建一个新的Entry空数组，长度是原数组的2倍。</p><p>2.ReHash<br>遍历原Entry数组，把所有的Entry重新Hash到新数组。这是因为长度扩大以后，Hash的规则也随之改变。</p><p>要记录下 HashMap 遍历时删除某些 entry</p><hr><p>整理自 <a href="https://blog.csdn.net/Jae_Peng/article/details/79562432">https://blog.csdn.net/Jae_Peng/article/details/79562432</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串转Double</title>
      <link href="/2020/01/29/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%ACDouble/"/>
      <url>/2020/01/29/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%ACDouble/</url>
      
        <content type="html"><![CDATA[<p>Q：给你一个字符串，比如「123.456」，转换成 Double 类型</p><p>A：easy 啊</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Double d1 = Double.valueOf(<span class="string">"123.456"</span>);</span><br></pre></td></tr></table></figure></div><p>Q：这样就没意思了，不能用JDK里面的方法</p><p>A：我想想（内心：木有IDE == ，木有手册；此种情况我只知道某鹅厂大神可以徒手撸代码，直接编译不报错）</p><p>A：这样，我讲下我的思路吧，blablabla……</p><p>Q：嗯好，你写吧</p><p>A：……</p><p>好吧，保存一下。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Desc: 给定字符串，转换成 Double；</span></span><br><span class="line"><span class="comment"> *       如果是 null 或者空串，直接返回0</span></span><br><span class="line"><span class="comment"> *       如果不是标准的数字格式“asdf”、“.12345”、“1234.”也返回0</span></span><br><span class="line"><span class="comment"> *       char-&gt;int，得到的是ASCII码，并不是真正的数值，</span></span><br><span class="line"><span class="comment"> *       但是鉴于0-9是连续编码的，我们可以这样获得 '1'-'0'=1</span></span><br><span class="line"><span class="comment"> *       To be continued...</span></span><br><span class="line"><span class="comment"> * User:  Xiaomo Song</span></span><br><span class="line"><span class="comment"> * Date: 2018-12-09</span></span><br><span class="line"><span class="comment"> * Time: 18:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String2Double</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Metho1:</span></span><br><span class="line">        Double d1 = Double.valueOf(<span class="string">"123.233"</span>);</span><br><span class="line">        System.out.println(d1);</span><br><span class="line"><span class="comment">//        Method2:</span></span><br><span class="line">        Double d2 = String2Double.string2Double(<span class="string">"123.456"</span>);</span><br><span class="line">        System.out.println(d2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">string2Double</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> result = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.trim().equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"未输入字符串"</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (str.matches(<span class="string">"^\\d+(\\.\\d+)?"</span>)) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">            <span class="keyword">int</span> index = str.indexOf(<span class="string">'.'</span>);</span><br><span class="line">            <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">                index = chars.length;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=index-<span class="number">1</span> ;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                result+=Math.pow(<span class="number">10</span>,index-<span class="number">1</span>-i)*char2Int(chars[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=index+<span class="number">1</span>;i&lt;chars.length;i++)&#123;</span><br><span class="line">                result+=Math.pow(<span class="number">0.1</span>,i-index)*char2Int(chars[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"字符串中有其他字符"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">char2Int</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机 </category>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口文档示例</title>
      <link href="/2020/01/29/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E7%A4%BA%E4%BE%8B/"/>
      <url>/2020/01/29/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 文档记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 标准 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中文文案排版指北</title>
      <link href="/2020/01/28/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88%E6%8C%87%E5%8C%97/"/>
      <url>/2020/01/28/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88%E6%8C%87%E5%8C%97/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2><!-- TOC --><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E7%A9%BA%E6%A0%BC">空格</a><ul><li><a href="#%E4%B8%AD%E8%8B%B1%E6%96%87%E4%B9%8B%E9%97%B4%E9%9C%80%E8%A6%81%E5%A2%9E%E5%8A%A0%E7%A9%BA%E6%A0%BC">中英文之间需要增加空格</a></li><li><a href="#%E4%B8%AD%E6%96%87%E4%B8%8E%E6%95%B0%E5%AD%97%E4%B9%8B%E9%97%B4%E9%9C%80%E8%A6%81%E5%A2%9E%E5%8A%A0%E7%A9%BA%E6%A0%BC">中文与数字之间需要增加空格</a></li><li><a href="#%E6%95%B0%E5%AD%97%E4%B8%8E%E5%8D%95%E4%BD%8D%E4%B9%8B%E9%97%B4%E6%97%A0%E9%9C%80%E5%A2%9E%E5%8A%A0%E7%A9%BA%E6%A0%BC">数字与单位之间无需增加空格</a></li><li><a href="#%E5%85%A8%E8%A7%92%E6%A0%87%E7%82%B9%E4%B8%8E%E5%85%B6%E4%BB%96%E5%AD%97%E7%AC%A6%E4%B9%8B%E9%97%B4%E4%B8%8D%E5%8A%A0%E7%A9%BA%E6%A0%BC">全角标点与其他字符之间不加空格</a></li><li><a href="#-ms-text-autospace-to-the-rescue"><code>-ms-text-autospace</code> to the rescue?</a></li></ul></li><li><a href="#%E6%A0%87%E7%82%B9%E7%AC%A6%E5%8F%B7">标点符号</a><ul><li><a href="#%E4%B8%8D%E9%87%8D%E5%A4%8D%E4%BD%BF%E7%94%A8%E6%A0%87%E7%82%B9%E7%AC%A6%E5%8F%B7">不重复使用标点符号</a></li></ul></li><li><a href="#%E5%85%A8%E8%A7%92%E5%92%8C%E5%8D%8A%E8%A7%92">全角和半角</a><ul><li><a href="#%E4%BD%BF%E7%94%A8%E5%85%A8%E8%A7%92%E4%B8%AD%E6%96%87%E6%A0%87%E7%82%B9">使用全角中文标点</a></li><li><a href="#%E6%95%B0%E5%AD%97%E4%BD%BF%E7%94%A8%E5%8D%8A%E8%A7%92%E5%AD%97%E7%AC%A6">数字使用半角字符</a></li><li><a href="#%E9%81%87%E5%88%B0%E5%AE%8C%E6%95%B4%E7%9A%84%E8%8B%B1%E6%96%87%E6%95%B4%E5%8F%A5%E7%89%B9%E6%AE%8A%E5%90%8D%E8%AF%8D%E5%85%B6%E5%85%A7%E5%AE%B9%E4%BD%BF%E7%94%A8%E5%8D%8A%E8%A7%92%E6%A0%87%E7%82%B9">遇到完整的英文整句、特殊名词，其內容使用半角标点</a></li></ul></li><li><a href="#%E5%90%8D%E8%AF%8D">名词</a><ul><li><a href="#%E4%B8%93%E6%9C%89%E5%90%8D%E8%AF%8D%E4%BD%BF%E7%94%A8%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99">专有名词使用正确的大小写</a></li><li><a href="#%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%9C%B0%E9%81%93%E7%9A%84%E7%BC%A9%E5%86%99">不要使用不地道的缩写</a></li></ul></li><li><a href="#%E4%BA%89%E8%AE%AE">争议</a><ul><li><a href="#%E9%93%BE%E6%8E%A5%E4%B9%8B%E9%97%B4%E5%A2%9E%E5%8A%A0%E7%A9%BA%E6%A0%BC">链接之间增加空格</a></li><li><a href="#%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E4%BD%BF%E7%94%A8%E7%9B%B4%E8%A7%92%E5%BC%95%E5%8F%B7">简体中文使用直角引号</a></li></ul></li><li><a href="#%E5%B7%A5%E5%85%B7">工具</a></li><li><a href="#%E8%B0%81%E5%9C%A8%E8%BF%99%E6%A0%B7%E5%81%9A">谁在这样做？</a></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></li></ul><!-- /TOC --><h2 id="空格"><a class="markdownIt-Anchor" href="#空格"></a> 空格</h2><p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。</p><p>与大家共勉之。」——<a href="https://github.com/vinta/pangu.js">vinta/paranoid-auto-spacing</a></p><h3 id="中英文之间需要增加空格"><a class="markdownIt-Anchor" href="#中英文之间需要增加空格"></a> 中英文之间需要增加空格</h3><p>正确：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p></blockquote><p>错误：</p><blockquote><p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。</p></blockquote><blockquote><p>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p></blockquote><p>完整的正确用法：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。每个 <code>AVObject</code> 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 <code>AVObject</code> 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。</p></blockquote><p>例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。</p><h3 id="中文与数字之间需要增加空格"><a class="markdownIt-Anchor" href="#中文与数字之间需要增加空格"></a> 中文与数字之间需要增加空格</h3><p>正确：</p><blockquote><p>今天出去买菜花了 5000 元。</p></blockquote><p>错误：</p><blockquote><p>今天出去买菜花了 5000元。</p></blockquote><blockquote><p>今天出去买菜花了5000元。</p></blockquote><h3 id="数字与单位之间无需增加空格"><a class="markdownIt-Anchor" href="#数字与单位之间无需增加空格"></a> 数字与单位之间无需增加空格</h3><p>正确：</p><blockquote><p>我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。</p></blockquote><p>错误：</p><blockquote><p>我家的光纤入户宽带有 10 Gbps，SSD 一共有 20 TB。</p></blockquote><p>另外，度／百分比与数字之间不需要增加空格：</p><p>正确：</p><blockquote><p>今天是 233° 的高温。</p></blockquote><blockquote><p>新 MacBook Pro 有 15% 的 CPU 性能提升。</p></blockquote><p>错误：</p><blockquote><p>今天是 233 ° 的高温。</p></blockquote><blockquote><p>新 MacBook Pro 有 15 % 的 CPU 性能提升。</p></blockquote><h3 id="全角标点与其他字符之间不加空格"><a class="markdownIt-Anchor" href="#全角标点与其他字符之间不加空格"></a> 全角标点与其他字符之间不加空格</h3><p>正确：</p><blockquote><p>刚刚买了一部 iPhone，好开心！</p></blockquote><p>错误：</p><blockquote><p>刚刚买了一部 iPhone ，好开心！</p></blockquote><h3 id="-ms-text-autospace-to-the-rescue"><a class="markdownIt-Anchor" href="#-ms-text-autospace-to-the-rescue"></a> <code>-ms-text-autospace</code> to the rescue?</h3><p>Microsoft 有个 <a href="http://msdn.microsoft.com/en-us/library/ie/ms531164(v=vs.85).aspx"><code>-ms-text-autospace</code></a> 的 CSS 属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 OS X、iOS 的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。</p><h2 id="标点符号"><a class="markdownIt-Anchor" href="#标点符号"></a> 标点符号</h2><h3 id="不重复使用标点符号"><a class="markdownIt-Anchor" href="#不重复使用标点符号"></a> 不重复使用标点符号</h3><p>正确：</p><blockquote><p>德国队竟然战胜了巴西队！</p></blockquote><blockquote><p>她竟然对你说「喵」？！</p></blockquote><p>错误：</p><blockquote><p>德国队竟然战胜了巴西队！！</p></blockquote><blockquote><p>德国队竟然战胜了巴西队！！！！！！！！</p></blockquote><blockquote><p>她竟然对你说「喵」？？！！</p></blockquote><blockquote><p>她竟然对你说「喵」？！？！？？！！</p></blockquote><h2 id="全角和半角"><a class="markdownIt-Anchor" href="#全角和半角"></a> 全角和半角</h2><p>不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『<a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2">全角和半角</a>』。</p><h3 id="使用全角中文标点"><a class="markdownIt-Anchor" href="#使用全角中文标点"></a> 使用全角中文标点</h3><p>正确：</p><blockquote><p>嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！</p></blockquote><blockquote><p>核磁共振成像（NMRI）是什么原理都不知道？JFGI！</p></blockquote><p>错误：</p><blockquote><p>嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎!</p></blockquote><blockquote><p>嗨!你知道嘛?今天前台的小妹跟我说&quot;喵&quot;了哎!</p></blockquote><blockquote><p>核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!</p></blockquote><blockquote><p>核磁共振成像(NMRI)是什么原理都不知道?JFGI!</p></blockquote><h3 id="数字使用半角字符"><a class="markdownIt-Anchor" href="#数字使用半角字符"></a> 数字使用半角字符</h3><p>正确：</p><blockquote><p>这件蛋糕只卖 1000 元。</p></blockquote><p>错误：</p><blockquote><p>这件蛋糕只卖 １０００ 元。</p></blockquote><p>例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。</p><h3 id="遇到完整的英文整句-特殊名词其內容使用半角标点"><a class="markdownIt-Anchor" href="#遇到完整的英文整句-特殊名词其內容使用半角标点"></a> 遇到完整的英文整句、特殊名词，其內容使用半角标点</h3><p>正确：</p><blockquote><p>乔布斯那句话是怎么说的？「Stay hungry, stay foolish.」</p></blockquote><blockquote><p>推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><p>错误：</p><blockquote><p>乔布斯那句话是怎么说的？「Stay hungry，stay foolish。」</p></blockquote><blockquote><p>推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><h2 id="名词"><a class="markdownIt-Anchor" href="#名词"></a> 名词</h2><h3 id="专有名词使用正确的大小写"><a class="markdownIt-Anchor" href="#专有名词使用正确的大小写"></a> 专有名词使用正确的大小写</h3><p>大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论內容，在这里只对部分易错用法进行简述。</p><p>正确：</p><blockquote><p>使用 GitHub 登录</p></blockquote><blockquote><p>我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。</p></blockquote><p>错误：</p><blockquote><p>使用 github 登录</p></blockquote><blockquote><p>使用 GITHUB 登录</p></blockquote><blockquote><p>使用 Github 登录</p></blockquote><blockquote><p>使用 gitHub 登录</p></blockquote><blockquote><p>使用 gｲんĤЦ8 登录</p></blockquote><blockquote><p>我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。</p></blockquote><blockquote><p>我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。</p></blockquote><blockquote><p>我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。</p></blockquote><blockquote><p>我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。</p></blockquote><blockquote><p>我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。</p></blockquote><p>注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标准的大小写规范进行书写；并通过 <code>text-transform: uppercase;</code>／<code>text-transform: lowercase;</code> 对表现形式进行定义。</p><h3 id="不要使用不地道的缩写"><a class="markdownIt-Anchor" href="#不要使用不地道的缩写"></a> 不要使用不地道的缩写</h3><p>正确：</p><blockquote><p>我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。</p></blockquote><p>错误：</p><blockquote><p>我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。</p></blockquote><h2 id="争议"><a class="markdownIt-Anchor" href="#争议"></a> 争议</h2><p>以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是<strong>正确</strong>的。</p><h3 id="链接之间增加空格"><a class="markdownIt-Anchor" href="#链接之间增加空格"></a> 链接之间增加空格</h3><p>用法：</p><blockquote><p>请 <a href="#">提交一个 issue</a> 并分配给相关同事。</p></blockquote><blockquote><p>访问我们网站的最新动态，请 <a href="#">点击这里</a> 进行订阅！</p></blockquote><p>对比用法：</p><blockquote><p>请<a href="#">提交一个 issue</a> 并分配给相关同事。</p></blockquote><blockquote><p>访问我们网站的最新动态，请<a href="#">点击这里</a>进行订阅！</p></blockquote><h3 id="简体中文使用直角引号"><a class="markdownIt-Anchor" href="#简体中文使用直角引号"></a> 简体中文使用直角引号</h3><p>用法：</p><blockquote><p>「老师，『有条不紊』的『紊』是什么意思？」</p></blockquote><p>对比用法：</p><blockquote><p>“老师，‘有条不紊’的‘紊’是什么意思？”</p></blockquote><h2 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h2><table><thead><tr><th>仓库</th><th>语言</th></tr></thead><tbody><tr><td><a href="https://github.com/vinta/paranoid-auto-spacing">vinta/paranoid-auto-spacing</a></td><td>JavaScript</td></tr><tr><td><a href="https://github.com/huei90/pangu.node">huei90/pangu.node</a></td><td>Node.js</td></tr><tr><td><a href="https://github.com/huacnlee/auto-correct">huacnlee/auto-correct</a></td><td>Ruby</td></tr><tr><td><a href="https://github.com/sparanoid/space-lover">sparanoid/space-lover</a></td><td>PHP (WordPress)</td></tr><tr><td><a href="https://github.com/NauxLiu/auto-correct">nauxliu/auto-correct</a></td><td>PHP</td></tr><tr><td><a href="https://github.com/ricoa/copywriting-correct">ricoa/copywriting-correct</a></td><td>PHP</td></tr><tr><td><a href="https://github.com/hotoo/pangu.vim">hotoo/pangu.vim</a></td><td>Vim</td></tr><tr><td><a href="https://github.com/sparanoid/grunt-auto-spacing">sparanoid/grunt-auto-spacing</a></td><td>Node.js (Grunt)</td></tr><tr><td><a href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk">hjiang/scripts/add-space-between-latin-and-cjk</a></td><td>Python</td></tr></tbody></table><h2 id="谁在这样做"><a class="markdownIt-Anchor" href="#谁在这样做"></a> 谁在这样做？</h2><table><thead><tr><th>网站</th><th>文案</th><th>UGC</th></tr></thead><tbody><tr><td><a href="http://www.apple.com/cn/">Apple 中国</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.apple.com/hk/">Apple 香港</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.apple.com/tw/">Apple 台湾</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.microsoft.com/zh-cn/">Microsoft 中国</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.microsoft.com/zh-hk/">Microsoft 香港</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.microsoft.com/zh-tw/">Microsoft 台湾</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://leancloud.cn/">LeanCloud</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://www.zhihu.com/">知乎</a></td><td>Yes</td><td>部分用户达成</td></tr><tr><td><a href="https://www.v2ex.com/">V2EX</a></td><td>Yes</td><td>Yes</td></tr><tr><td><a href="https://segmentfault.com/">SegmentFault</a></td><td>Yes</td><td>部分用户达成</td></tr><tr><td><a href="http://apple4us.com/">Apple4us</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://www.wandoujia.com/">豌豆荚</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://ruby-china.org/">Ruby China</a></td><td>Yes</td><td>标题达成</td></tr><tr><td><a href="https://phphub.org/">PHPHub</a></td><td>Yes</td><td>标题达成</td></tr><tr><td><a href="http://sspai.com/">少数派</a></td><td>Yes</td><td>N/A</td></tr></tbody></table><h2 id="参考文献"><a class="markdownIt-Anchor" href="#参考文献"></a> 参考文献</h2><ul><li><a href="http://grammar.about.com/od/punctuationandmechanics/a/Guidelines-For-Using-Capital-Letters.htm">Guidelines for Using Capital Letters</a></li><li><a href="http://en.wikipedia.org/wiki/Letter_case">Letter case - Wikipedia</a></li><li><a href="http://www.oxforddictionaries.com/words/punctuation">Punctuation - Oxford Dictionaries</a></li><li><a href="https://owl.english.purdue.edu/owl/section/1/6/">Punctuation - The Purdue OWL</a></li><li><a href="http://www.wikihow.com/Use-English-Punctuation-Correctly">How to Use English Punctuation Corrently - wikiHow</a></li><li><a href="https://zh.opensuse.org/index.php?title=Help:%E6%A0%BC%E5%BC%8F">格式 - openSUSE</a></li><li><a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2">全角和半角 - 维基百科</a></li><li><a href="http://zh.wikipedia.org/wiki/%E5%BC%95%E8%99%9F">引号 - 维基百科</a></li><li><a href="http://zh.wikipedia.org/wiki/%E7%96%91%E5%95%8F%E9%A9%9A%E5%98%86%E8%99%9F">疑问惊叹号 - 维基百科</a></li></ul><hr><p>摘自 GitHub repository: mzlogin/chinese-copywriting-guidelines</p>]]></content>
      
      
      <categories>
          
          <category> 文档记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标准 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
